
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model StayInfo
 * 
 */
export type StayInfo = $Result.DefaultSelection<Prisma.$StayInfoPayload>
/**
 * Model Recommendation
 * 
 */
export type Recommendation = $Result.DefaultSelection<Prisma.$RecommendationPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const RecommendationType: {
  RESTAURANT: 'RESTAURANT',
  ACTIVITY: 'ACTIVITY',
  BAR: 'BAR',
  TOURISM: 'TOURISM',
  GROCERY: 'GROCERY'
};

export type RecommendationType = (typeof RecommendationType)[keyof typeof RecommendationType]

}

export type RecommendationType = $Enums.RecommendationType

export const RecommendationType: typeof $Enums.RecommendationType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more StayInfos
 * const stayInfos = await prisma.stayInfo.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more StayInfos
   * const stayInfos = await prisma.stayInfo.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.stayInfo`: Exposes CRUD operations for the **StayInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StayInfos
    * const stayInfos = await prisma.stayInfo.findMany()
    * ```
    */
  get stayInfo(): Prisma.StayInfoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.recommendation`: Exposes CRUD operations for the **Recommendation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recommendations
    * const recommendations = await prisma.recommendation.findMany()
    * ```
    */
  get recommendation(): Prisma.RecommendationDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    StayInfo: 'StayInfo',
    Recommendation: 'Recommendation'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "stayInfo" | "recommendation"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      StayInfo: {
        payload: Prisma.$StayInfoPayload<ExtArgs>
        fields: Prisma.StayInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StayInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StayInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StayInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StayInfoPayload>
          }
          findFirst: {
            args: Prisma.StayInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StayInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StayInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StayInfoPayload>
          }
          findMany: {
            args: Prisma.StayInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StayInfoPayload>[]
          }
          create: {
            args: Prisma.StayInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StayInfoPayload>
          }
          createMany: {
            args: Prisma.StayInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StayInfoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StayInfoPayload>[]
          }
          delete: {
            args: Prisma.StayInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StayInfoPayload>
          }
          update: {
            args: Prisma.StayInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StayInfoPayload>
          }
          deleteMany: {
            args: Prisma.StayInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StayInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StayInfoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StayInfoPayload>[]
          }
          upsert: {
            args: Prisma.StayInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StayInfoPayload>
          }
          aggregate: {
            args: Prisma.StayInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStayInfo>
          }
          groupBy: {
            args: Prisma.StayInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<StayInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.StayInfoCountArgs<ExtArgs>
            result: $Utils.Optional<StayInfoCountAggregateOutputType> | number
          }
        }
      }
      Recommendation: {
        payload: Prisma.$RecommendationPayload<ExtArgs>
        fields: Prisma.RecommendationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecommendationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecommendationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          findFirst: {
            args: Prisma.RecommendationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecommendationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          findMany: {
            args: Prisma.RecommendationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>[]
          }
          create: {
            args: Prisma.RecommendationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          createMany: {
            args: Prisma.RecommendationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecommendationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>[]
          }
          delete: {
            args: Prisma.RecommendationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          update: {
            args: Prisma.RecommendationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          deleteMany: {
            args: Prisma.RecommendationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecommendationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RecommendationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>[]
          }
          upsert: {
            args: Prisma.RecommendationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          aggregate: {
            args: Prisma.RecommendationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecommendation>
          }
          groupBy: {
            args: Prisma.RecommendationGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecommendationGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecommendationCountArgs<ExtArgs>
            result: $Utils.Optional<RecommendationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    stayInfo?: StayInfoOmit
    recommendation?: RecommendationOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StayInfoCountOutputType
   */

  export type StayInfoCountOutputType = {
    recommendations: number
  }

  export type StayInfoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recommendations?: boolean | StayInfoCountOutputTypeCountRecommendationsArgs
  }

  // Custom InputTypes
  /**
   * StayInfoCountOutputType without action
   */
  export type StayInfoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StayInfoCountOutputType
     */
    select?: StayInfoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StayInfoCountOutputType without action
   */
  export type StayInfoCountOutputTypeCountRecommendationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecommendationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model StayInfo
   */

  export type AggregateStayInfo = {
    _count: StayInfoCountAggregateOutputType | null
    _min: StayInfoMinAggregateOutputType | null
    _max: StayInfoMaxAggregateOutputType | null
  }

  export type StayInfoMinAggregateOutputType = {
    id: string | null
    arrivalTime: string | null
    accessInstructions: string | null
    arrivalAdditionalInfo: string | null
    departureTime: string | null
    exitInstructions: string | null
    departureAdditionalInfo: string | null
    wifiName: string | null
    wifiPassword: string | null
    houseRules: string | null
    ownerContact: string | null
    ownerName: string | null
    generalInfo: string | null
  }

  export type StayInfoMaxAggregateOutputType = {
    id: string | null
    arrivalTime: string | null
    accessInstructions: string | null
    arrivalAdditionalInfo: string | null
    departureTime: string | null
    exitInstructions: string | null
    departureAdditionalInfo: string | null
    wifiName: string | null
    wifiPassword: string | null
    houseRules: string | null
    ownerContact: string | null
    ownerName: string | null
    generalInfo: string | null
  }

  export type StayInfoCountAggregateOutputType = {
    id: number
    arrivalTime: number
    accessInstructions: number
    arrivalAdditionalInfo: number
    departureTime: number
    exitInstructions: number
    departureAdditionalInfo: number
    wifiName: number
    wifiPassword: number
    houseRules: number
    ownerContact: number
    ownerName: number
    generalInfo: number
    _all: number
  }


  export type StayInfoMinAggregateInputType = {
    id?: true
    arrivalTime?: true
    accessInstructions?: true
    arrivalAdditionalInfo?: true
    departureTime?: true
    exitInstructions?: true
    departureAdditionalInfo?: true
    wifiName?: true
    wifiPassword?: true
    houseRules?: true
    ownerContact?: true
    ownerName?: true
    generalInfo?: true
  }

  export type StayInfoMaxAggregateInputType = {
    id?: true
    arrivalTime?: true
    accessInstructions?: true
    arrivalAdditionalInfo?: true
    departureTime?: true
    exitInstructions?: true
    departureAdditionalInfo?: true
    wifiName?: true
    wifiPassword?: true
    houseRules?: true
    ownerContact?: true
    ownerName?: true
    generalInfo?: true
  }

  export type StayInfoCountAggregateInputType = {
    id?: true
    arrivalTime?: true
    accessInstructions?: true
    arrivalAdditionalInfo?: true
    departureTime?: true
    exitInstructions?: true
    departureAdditionalInfo?: true
    wifiName?: true
    wifiPassword?: true
    houseRules?: true
    ownerContact?: true
    ownerName?: true
    generalInfo?: true
    _all?: true
  }

  export type StayInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StayInfo to aggregate.
     */
    where?: StayInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StayInfos to fetch.
     */
    orderBy?: StayInfoOrderByWithRelationInput | StayInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StayInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StayInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StayInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StayInfos
    **/
    _count?: true | StayInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StayInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StayInfoMaxAggregateInputType
  }

  export type GetStayInfoAggregateType<T extends StayInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateStayInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStayInfo[P]>
      : GetScalarType<T[P], AggregateStayInfo[P]>
  }




  export type StayInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StayInfoWhereInput
    orderBy?: StayInfoOrderByWithAggregationInput | StayInfoOrderByWithAggregationInput[]
    by: StayInfoScalarFieldEnum[] | StayInfoScalarFieldEnum
    having?: StayInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StayInfoCountAggregateInputType | true
    _min?: StayInfoMinAggregateInputType
    _max?: StayInfoMaxAggregateInputType
  }

  export type StayInfoGroupByOutputType = {
    id: string
    arrivalTime: string
    accessInstructions: string
    arrivalAdditionalInfo: string
    departureTime: string
    exitInstructions: string
    departureAdditionalInfo: string
    wifiName: string
    wifiPassword: string
    houseRules: string
    ownerContact: string
    ownerName: string
    generalInfo: string
    _count: StayInfoCountAggregateOutputType | null
    _min: StayInfoMinAggregateOutputType | null
    _max: StayInfoMaxAggregateOutputType | null
  }

  type GetStayInfoGroupByPayload<T extends StayInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StayInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StayInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StayInfoGroupByOutputType[P]>
            : GetScalarType<T[P], StayInfoGroupByOutputType[P]>
        }
      >
    >


  export type StayInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    arrivalTime?: boolean
    accessInstructions?: boolean
    arrivalAdditionalInfo?: boolean
    departureTime?: boolean
    exitInstructions?: boolean
    departureAdditionalInfo?: boolean
    wifiName?: boolean
    wifiPassword?: boolean
    houseRules?: boolean
    ownerContact?: boolean
    ownerName?: boolean
    generalInfo?: boolean
    recommendations?: boolean | StayInfo$recommendationsArgs<ExtArgs>
    _count?: boolean | StayInfoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stayInfo"]>

  export type StayInfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    arrivalTime?: boolean
    accessInstructions?: boolean
    arrivalAdditionalInfo?: boolean
    departureTime?: boolean
    exitInstructions?: boolean
    departureAdditionalInfo?: boolean
    wifiName?: boolean
    wifiPassword?: boolean
    houseRules?: boolean
    ownerContact?: boolean
    ownerName?: boolean
    generalInfo?: boolean
  }, ExtArgs["result"]["stayInfo"]>

  export type StayInfoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    arrivalTime?: boolean
    accessInstructions?: boolean
    arrivalAdditionalInfo?: boolean
    departureTime?: boolean
    exitInstructions?: boolean
    departureAdditionalInfo?: boolean
    wifiName?: boolean
    wifiPassword?: boolean
    houseRules?: boolean
    ownerContact?: boolean
    ownerName?: boolean
    generalInfo?: boolean
  }, ExtArgs["result"]["stayInfo"]>

  export type StayInfoSelectScalar = {
    id?: boolean
    arrivalTime?: boolean
    accessInstructions?: boolean
    arrivalAdditionalInfo?: boolean
    departureTime?: boolean
    exitInstructions?: boolean
    departureAdditionalInfo?: boolean
    wifiName?: boolean
    wifiPassword?: boolean
    houseRules?: boolean
    ownerContact?: boolean
    ownerName?: boolean
    generalInfo?: boolean
  }

  export type StayInfoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "arrivalTime" | "accessInstructions" | "arrivalAdditionalInfo" | "departureTime" | "exitInstructions" | "departureAdditionalInfo" | "wifiName" | "wifiPassword" | "houseRules" | "ownerContact" | "ownerName" | "generalInfo", ExtArgs["result"]["stayInfo"]>
  export type StayInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recommendations?: boolean | StayInfo$recommendationsArgs<ExtArgs>
    _count?: boolean | StayInfoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StayInfoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type StayInfoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StayInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StayInfo"
    objects: {
      recommendations: Prisma.$RecommendationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      arrivalTime: string
      accessInstructions: string
      arrivalAdditionalInfo: string
      departureTime: string
      exitInstructions: string
      departureAdditionalInfo: string
      wifiName: string
      wifiPassword: string
      houseRules: string
      ownerContact: string
      ownerName: string
      generalInfo: string
    }, ExtArgs["result"]["stayInfo"]>
    composites: {}
  }

  type StayInfoGetPayload<S extends boolean | null | undefined | StayInfoDefaultArgs> = $Result.GetResult<Prisma.$StayInfoPayload, S>

  type StayInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StayInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StayInfoCountAggregateInputType | true
    }

  export interface StayInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StayInfo'], meta: { name: 'StayInfo' } }
    /**
     * Find zero or one StayInfo that matches the filter.
     * @param {StayInfoFindUniqueArgs} args - Arguments to find a StayInfo
     * @example
     * // Get one StayInfo
     * const stayInfo = await prisma.stayInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StayInfoFindUniqueArgs>(args: SelectSubset<T, StayInfoFindUniqueArgs<ExtArgs>>): Prisma__StayInfoClient<$Result.GetResult<Prisma.$StayInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StayInfo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StayInfoFindUniqueOrThrowArgs} args - Arguments to find a StayInfo
     * @example
     * // Get one StayInfo
     * const stayInfo = await prisma.stayInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StayInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, StayInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StayInfoClient<$Result.GetResult<Prisma.$StayInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StayInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StayInfoFindFirstArgs} args - Arguments to find a StayInfo
     * @example
     * // Get one StayInfo
     * const stayInfo = await prisma.stayInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StayInfoFindFirstArgs>(args?: SelectSubset<T, StayInfoFindFirstArgs<ExtArgs>>): Prisma__StayInfoClient<$Result.GetResult<Prisma.$StayInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StayInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StayInfoFindFirstOrThrowArgs} args - Arguments to find a StayInfo
     * @example
     * // Get one StayInfo
     * const stayInfo = await prisma.stayInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StayInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, StayInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__StayInfoClient<$Result.GetResult<Prisma.$StayInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StayInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StayInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StayInfos
     * const stayInfos = await prisma.stayInfo.findMany()
     * 
     * // Get first 10 StayInfos
     * const stayInfos = await prisma.stayInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stayInfoWithIdOnly = await prisma.stayInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StayInfoFindManyArgs>(args?: SelectSubset<T, StayInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StayInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StayInfo.
     * @param {StayInfoCreateArgs} args - Arguments to create a StayInfo.
     * @example
     * // Create one StayInfo
     * const StayInfo = await prisma.stayInfo.create({
     *   data: {
     *     // ... data to create a StayInfo
     *   }
     * })
     * 
     */
    create<T extends StayInfoCreateArgs>(args: SelectSubset<T, StayInfoCreateArgs<ExtArgs>>): Prisma__StayInfoClient<$Result.GetResult<Prisma.$StayInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StayInfos.
     * @param {StayInfoCreateManyArgs} args - Arguments to create many StayInfos.
     * @example
     * // Create many StayInfos
     * const stayInfo = await prisma.stayInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StayInfoCreateManyArgs>(args?: SelectSubset<T, StayInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StayInfos and returns the data saved in the database.
     * @param {StayInfoCreateManyAndReturnArgs} args - Arguments to create many StayInfos.
     * @example
     * // Create many StayInfos
     * const stayInfo = await prisma.stayInfo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StayInfos and only return the `id`
     * const stayInfoWithIdOnly = await prisma.stayInfo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StayInfoCreateManyAndReturnArgs>(args?: SelectSubset<T, StayInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StayInfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StayInfo.
     * @param {StayInfoDeleteArgs} args - Arguments to delete one StayInfo.
     * @example
     * // Delete one StayInfo
     * const StayInfo = await prisma.stayInfo.delete({
     *   where: {
     *     // ... filter to delete one StayInfo
     *   }
     * })
     * 
     */
    delete<T extends StayInfoDeleteArgs>(args: SelectSubset<T, StayInfoDeleteArgs<ExtArgs>>): Prisma__StayInfoClient<$Result.GetResult<Prisma.$StayInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StayInfo.
     * @param {StayInfoUpdateArgs} args - Arguments to update one StayInfo.
     * @example
     * // Update one StayInfo
     * const stayInfo = await prisma.stayInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StayInfoUpdateArgs>(args: SelectSubset<T, StayInfoUpdateArgs<ExtArgs>>): Prisma__StayInfoClient<$Result.GetResult<Prisma.$StayInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StayInfos.
     * @param {StayInfoDeleteManyArgs} args - Arguments to filter StayInfos to delete.
     * @example
     * // Delete a few StayInfos
     * const { count } = await prisma.stayInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StayInfoDeleteManyArgs>(args?: SelectSubset<T, StayInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StayInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StayInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StayInfos
     * const stayInfo = await prisma.stayInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StayInfoUpdateManyArgs>(args: SelectSubset<T, StayInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StayInfos and returns the data updated in the database.
     * @param {StayInfoUpdateManyAndReturnArgs} args - Arguments to update many StayInfos.
     * @example
     * // Update many StayInfos
     * const stayInfo = await prisma.stayInfo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StayInfos and only return the `id`
     * const stayInfoWithIdOnly = await prisma.stayInfo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StayInfoUpdateManyAndReturnArgs>(args: SelectSubset<T, StayInfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StayInfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StayInfo.
     * @param {StayInfoUpsertArgs} args - Arguments to update or create a StayInfo.
     * @example
     * // Update or create a StayInfo
     * const stayInfo = await prisma.stayInfo.upsert({
     *   create: {
     *     // ... data to create a StayInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StayInfo we want to update
     *   }
     * })
     */
    upsert<T extends StayInfoUpsertArgs>(args: SelectSubset<T, StayInfoUpsertArgs<ExtArgs>>): Prisma__StayInfoClient<$Result.GetResult<Prisma.$StayInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StayInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StayInfoCountArgs} args - Arguments to filter StayInfos to count.
     * @example
     * // Count the number of StayInfos
     * const count = await prisma.stayInfo.count({
     *   where: {
     *     // ... the filter for the StayInfos we want to count
     *   }
     * })
    **/
    count<T extends StayInfoCountArgs>(
      args?: Subset<T, StayInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StayInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StayInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StayInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StayInfoAggregateArgs>(args: Subset<T, StayInfoAggregateArgs>): Prisma.PrismaPromise<GetStayInfoAggregateType<T>>

    /**
     * Group by StayInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StayInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StayInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StayInfoGroupByArgs['orderBy'] }
        : { orderBy?: StayInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StayInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStayInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StayInfo model
   */
  readonly fields: StayInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StayInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StayInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    recommendations<T extends StayInfo$recommendationsArgs<ExtArgs> = {}>(args?: Subset<T, StayInfo$recommendationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StayInfo model
   */
  interface StayInfoFieldRefs {
    readonly id: FieldRef<"StayInfo", 'String'>
    readonly arrivalTime: FieldRef<"StayInfo", 'String'>
    readonly accessInstructions: FieldRef<"StayInfo", 'String'>
    readonly arrivalAdditionalInfo: FieldRef<"StayInfo", 'String'>
    readonly departureTime: FieldRef<"StayInfo", 'String'>
    readonly exitInstructions: FieldRef<"StayInfo", 'String'>
    readonly departureAdditionalInfo: FieldRef<"StayInfo", 'String'>
    readonly wifiName: FieldRef<"StayInfo", 'String'>
    readonly wifiPassword: FieldRef<"StayInfo", 'String'>
    readonly houseRules: FieldRef<"StayInfo", 'String'>
    readonly ownerContact: FieldRef<"StayInfo", 'String'>
    readonly ownerName: FieldRef<"StayInfo", 'String'>
    readonly generalInfo: FieldRef<"StayInfo", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StayInfo findUnique
   */
  export type StayInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StayInfo
     */
    select?: StayInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StayInfo
     */
    omit?: StayInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StayInfoInclude<ExtArgs> | null
    /**
     * Filter, which StayInfo to fetch.
     */
    where: StayInfoWhereUniqueInput
  }

  /**
   * StayInfo findUniqueOrThrow
   */
  export type StayInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StayInfo
     */
    select?: StayInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StayInfo
     */
    omit?: StayInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StayInfoInclude<ExtArgs> | null
    /**
     * Filter, which StayInfo to fetch.
     */
    where: StayInfoWhereUniqueInput
  }

  /**
   * StayInfo findFirst
   */
  export type StayInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StayInfo
     */
    select?: StayInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StayInfo
     */
    omit?: StayInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StayInfoInclude<ExtArgs> | null
    /**
     * Filter, which StayInfo to fetch.
     */
    where?: StayInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StayInfos to fetch.
     */
    orderBy?: StayInfoOrderByWithRelationInput | StayInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StayInfos.
     */
    cursor?: StayInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StayInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StayInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StayInfos.
     */
    distinct?: StayInfoScalarFieldEnum | StayInfoScalarFieldEnum[]
  }

  /**
   * StayInfo findFirstOrThrow
   */
  export type StayInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StayInfo
     */
    select?: StayInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StayInfo
     */
    omit?: StayInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StayInfoInclude<ExtArgs> | null
    /**
     * Filter, which StayInfo to fetch.
     */
    where?: StayInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StayInfos to fetch.
     */
    orderBy?: StayInfoOrderByWithRelationInput | StayInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StayInfos.
     */
    cursor?: StayInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StayInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StayInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StayInfos.
     */
    distinct?: StayInfoScalarFieldEnum | StayInfoScalarFieldEnum[]
  }

  /**
   * StayInfo findMany
   */
  export type StayInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StayInfo
     */
    select?: StayInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StayInfo
     */
    omit?: StayInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StayInfoInclude<ExtArgs> | null
    /**
     * Filter, which StayInfos to fetch.
     */
    where?: StayInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StayInfos to fetch.
     */
    orderBy?: StayInfoOrderByWithRelationInput | StayInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StayInfos.
     */
    cursor?: StayInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StayInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StayInfos.
     */
    skip?: number
    distinct?: StayInfoScalarFieldEnum | StayInfoScalarFieldEnum[]
  }

  /**
   * StayInfo create
   */
  export type StayInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StayInfo
     */
    select?: StayInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StayInfo
     */
    omit?: StayInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StayInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a StayInfo.
     */
    data: XOR<StayInfoCreateInput, StayInfoUncheckedCreateInput>
  }

  /**
   * StayInfo createMany
   */
  export type StayInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StayInfos.
     */
    data: StayInfoCreateManyInput | StayInfoCreateManyInput[]
  }

  /**
   * StayInfo createManyAndReturn
   */
  export type StayInfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StayInfo
     */
    select?: StayInfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StayInfo
     */
    omit?: StayInfoOmit<ExtArgs> | null
    /**
     * The data used to create many StayInfos.
     */
    data: StayInfoCreateManyInput | StayInfoCreateManyInput[]
  }

  /**
   * StayInfo update
   */
  export type StayInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StayInfo
     */
    select?: StayInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StayInfo
     */
    omit?: StayInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StayInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a StayInfo.
     */
    data: XOR<StayInfoUpdateInput, StayInfoUncheckedUpdateInput>
    /**
     * Choose, which StayInfo to update.
     */
    where: StayInfoWhereUniqueInput
  }

  /**
   * StayInfo updateMany
   */
  export type StayInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StayInfos.
     */
    data: XOR<StayInfoUpdateManyMutationInput, StayInfoUncheckedUpdateManyInput>
    /**
     * Filter which StayInfos to update
     */
    where?: StayInfoWhereInput
    /**
     * Limit how many StayInfos to update.
     */
    limit?: number
  }

  /**
   * StayInfo updateManyAndReturn
   */
  export type StayInfoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StayInfo
     */
    select?: StayInfoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StayInfo
     */
    omit?: StayInfoOmit<ExtArgs> | null
    /**
     * The data used to update StayInfos.
     */
    data: XOR<StayInfoUpdateManyMutationInput, StayInfoUncheckedUpdateManyInput>
    /**
     * Filter which StayInfos to update
     */
    where?: StayInfoWhereInput
    /**
     * Limit how many StayInfos to update.
     */
    limit?: number
  }

  /**
   * StayInfo upsert
   */
  export type StayInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StayInfo
     */
    select?: StayInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StayInfo
     */
    omit?: StayInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StayInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the StayInfo to update in case it exists.
     */
    where: StayInfoWhereUniqueInput
    /**
     * In case the StayInfo found by the `where` argument doesn't exist, create a new StayInfo with this data.
     */
    create: XOR<StayInfoCreateInput, StayInfoUncheckedCreateInput>
    /**
     * In case the StayInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StayInfoUpdateInput, StayInfoUncheckedUpdateInput>
  }

  /**
   * StayInfo delete
   */
  export type StayInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StayInfo
     */
    select?: StayInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StayInfo
     */
    omit?: StayInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StayInfoInclude<ExtArgs> | null
    /**
     * Filter which StayInfo to delete.
     */
    where: StayInfoWhereUniqueInput
  }

  /**
   * StayInfo deleteMany
   */
  export type StayInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StayInfos to delete
     */
    where?: StayInfoWhereInput
    /**
     * Limit how many StayInfos to delete.
     */
    limit?: number
  }

  /**
   * StayInfo.recommendations
   */
  export type StayInfo$recommendationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    where?: RecommendationWhereInput
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    cursor?: RecommendationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * StayInfo without action
   */
  export type StayInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StayInfo
     */
    select?: StayInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StayInfo
     */
    omit?: StayInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StayInfoInclude<ExtArgs> | null
  }


  /**
   * Model Recommendation
   */

  export type AggregateRecommendation = {
    _count: RecommendationCountAggregateOutputType | null
    _min: RecommendationMinAggregateOutputType | null
    _max: RecommendationMaxAggregateOutputType | null
  }

  export type RecommendationMinAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    description: string | null
    type: $Enums.RecommendationType | null
    stayInfoId: string | null
  }

  export type RecommendationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    description: string | null
    type: $Enums.RecommendationType | null
    stayInfoId: string | null
  }

  export type RecommendationCountAggregateOutputType = {
    id: number
    name: number
    address: number
    description: number
    type: number
    stayInfoId: number
    _all: number
  }


  export type RecommendationMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    description?: true
    type?: true
    stayInfoId?: true
  }

  export type RecommendationMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    description?: true
    type?: true
    stayInfoId?: true
  }

  export type RecommendationCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    description?: true
    type?: true
    stayInfoId?: true
    _all?: true
  }

  export type RecommendationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recommendation to aggregate.
     */
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     */
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recommendations
    **/
    _count?: true | RecommendationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecommendationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecommendationMaxAggregateInputType
  }

  export type GetRecommendationAggregateType<T extends RecommendationAggregateArgs> = {
        [P in keyof T & keyof AggregateRecommendation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecommendation[P]>
      : GetScalarType<T[P], AggregateRecommendation[P]>
  }




  export type RecommendationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecommendationWhereInput
    orderBy?: RecommendationOrderByWithAggregationInput | RecommendationOrderByWithAggregationInput[]
    by: RecommendationScalarFieldEnum[] | RecommendationScalarFieldEnum
    having?: RecommendationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecommendationCountAggregateInputType | true
    _min?: RecommendationMinAggregateInputType
    _max?: RecommendationMaxAggregateInputType
  }

  export type RecommendationGroupByOutputType = {
    id: string
    name: string
    address: string | null
    description: string | null
    type: $Enums.RecommendationType
    stayInfoId: string
    _count: RecommendationCountAggregateOutputType | null
    _min: RecommendationMinAggregateOutputType | null
    _max: RecommendationMaxAggregateOutputType | null
  }

  type GetRecommendationGroupByPayload<T extends RecommendationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecommendationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecommendationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecommendationGroupByOutputType[P]>
            : GetScalarType<T[P], RecommendationGroupByOutputType[P]>
        }
      >
    >


  export type RecommendationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    description?: boolean
    type?: boolean
    stayInfoId?: boolean
    stayInfo?: boolean | StayInfoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recommendation"]>

  export type RecommendationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    description?: boolean
    type?: boolean
    stayInfoId?: boolean
    stayInfo?: boolean | StayInfoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recommendation"]>

  export type RecommendationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    description?: boolean
    type?: boolean
    stayInfoId?: boolean
    stayInfo?: boolean | StayInfoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recommendation"]>

  export type RecommendationSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    description?: boolean
    type?: boolean
    stayInfoId?: boolean
  }

  export type RecommendationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "address" | "description" | "type" | "stayInfoId", ExtArgs["result"]["recommendation"]>
  export type RecommendationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stayInfo?: boolean | StayInfoDefaultArgs<ExtArgs>
  }
  export type RecommendationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stayInfo?: boolean | StayInfoDefaultArgs<ExtArgs>
  }
  export type RecommendationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stayInfo?: boolean | StayInfoDefaultArgs<ExtArgs>
  }

  export type $RecommendationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Recommendation"
    objects: {
      stayInfo: Prisma.$StayInfoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      address: string | null
      description: string | null
      type: $Enums.RecommendationType
      stayInfoId: string
    }, ExtArgs["result"]["recommendation"]>
    composites: {}
  }

  type RecommendationGetPayload<S extends boolean | null | undefined | RecommendationDefaultArgs> = $Result.GetResult<Prisma.$RecommendationPayload, S>

  type RecommendationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RecommendationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RecommendationCountAggregateInputType | true
    }

  export interface RecommendationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recommendation'], meta: { name: 'Recommendation' } }
    /**
     * Find zero or one Recommendation that matches the filter.
     * @param {RecommendationFindUniqueArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecommendationFindUniqueArgs>(args: SelectSubset<T, RecommendationFindUniqueArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Recommendation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RecommendationFindUniqueOrThrowArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecommendationFindUniqueOrThrowArgs>(args: SelectSubset<T, RecommendationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Recommendation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationFindFirstArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecommendationFindFirstArgs>(args?: SelectSubset<T, RecommendationFindFirstArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Recommendation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationFindFirstOrThrowArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecommendationFindFirstOrThrowArgs>(args?: SelectSubset<T, RecommendationFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Recommendations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recommendations
     * const recommendations = await prisma.recommendation.findMany()
     * 
     * // Get first 10 Recommendations
     * const recommendations = await prisma.recommendation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recommendationWithIdOnly = await prisma.recommendation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecommendationFindManyArgs>(args?: SelectSubset<T, RecommendationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Recommendation.
     * @param {RecommendationCreateArgs} args - Arguments to create a Recommendation.
     * @example
     * // Create one Recommendation
     * const Recommendation = await prisma.recommendation.create({
     *   data: {
     *     // ... data to create a Recommendation
     *   }
     * })
     * 
     */
    create<T extends RecommendationCreateArgs>(args: SelectSubset<T, RecommendationCreateArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Recommendations.
     * @param {RecommendationCreateManyArgs} args - Arguments to create many Recommendations.
     * @example
     * // Create many Recommendations
     * const recommendation = await prisma.recommendation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecommendationCreateManyArgs>(args?: SelectSubset<T, RecommendationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Recommendations and returns the data saved in the database.
     * @param {RecommendationCreateManyAndReturnArgs} args - Arguments to create many Recommendations.
     * @example
     * // Create many Recommendations
     * const recommendation = await prisma.recommendation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Recommendations and only return the `id`
     * const recommendationWithIdOnly = await prisma.recommendation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecommendationCreateManyAndReturnArgs>(args?: SelectSubset<T, RecommendationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Recommendation.
     * @param {RecommendationDeleteArgs} args - Arguments to delete one Recommendation.
     * @example
     * // Delete one Recommendation
     * const Recommendation = await prisma.recommendation.delete({
     *   where: {
     *     // ... filter to delete one Recommendation
     *   }
     * })
     * 
     */
    delete<T extends RecommendationDeleteArgs>(args: SelectSubset<T, RecommendationDeleteArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Recommendation.
     * @param {RecommendationUpdateArgs} args - Arguments to update one Recommendation.
     * @example
     * // Update one Recommendation
     * const recommendation = await prisma.recommendation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecommendationUpdateArgs>(args: SelectSubset<T, RecommendationUpdateArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Recommendations.
     * @param {RecommendationDeleteManyArgs} args - Arguments to filter Recommendations to delete.
     * @example
     * // Delete a few Recommendations
     * const { count } = await prisma.recommendation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecommendationDeleteManyArgs>(args?: SelectSubset<T, RecommendationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recommendations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recommendations
     * const recommendation = await prisma.recommendation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecommendationUpdateManyArgs>(args: SelectSubset<T, RecommendationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recommendations and returns the data updated in the database.
     * @param {RecommendationUpdateManyAndReturnArgs} args - Arguments to update many Recommendations.
     * @example
     * // Update many Recommendations
     * const recommendation = await prisma.recommendation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Recommendations and only return the `id`
     * const recommendationWithIdOnly = await prisma.recommendation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RecommendationUpdateManyAndReturnArgs>(args: SelectSubset<T, RecommendationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Recommendation.
     * @param {RecommendationUpsertArgs} args - Arguments to update or create a Recommendation.
     * @example
     * // Update or create a Recommendation
     * const recommendation = await prisma.recommendation.upsert({
     *   create: {
     *     // ... data to create a Recommendation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recommendation we want to update
     *   }
     * })
     */
    upsert<T extends RecommendationUpsertArgs>(args: SelectSubset<T, RecommendationUpsertArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Recommendations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationCountArgs} args - Arguments to filter Recommendations to count.
     * @example
     * // Count the number of Recommendations
     * const count = await prisma.recommendation.count({
     *   where: {
     *     // ... the filter for the Recommendations we want to count
     *   }
     * })
    **/
    count<T extends RecommendationCountArgs>(
      args?: Subset<T, RecommendationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecommendationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recommendation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecommendationAggregateArgs>(args: Subset<T, RecommendationAggregateArgs>): Prisma.PrismaPromise<GetRecommendationAggregateType<T>>

    /**
     * Group by Recommendation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecommendationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecommendationGroupByArgs['orderBy'] }
        : { orderBy?: RecommendationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecommendationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecommendationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Recommendation model
   */
  readonly fields: RecommendationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recommendation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecommendationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stayInfo<T extends StayInfoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StayInfoDefaultArgs<ExtArgs>>): Prisma__StayInfoClient<$Result.GetResult<Prisma.$StayInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Recommendation model
   */
  interface RecommendationFieldRefs {
    readonly id: FieldRef<"Recommendation", 'String'>
    readonly name: FieldRef<"Recommendation", 'String'>
    readonly address: FieldRef<"Recommendation", 'String'>
    readonly description: FieldRef<"Recommendation", 'String'>
    readonly type: FieldRef<"Recommendation", 'RecommendationType'>
    readonly stayInfoId: FieldRef<"Recommendation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Recommendation findUnique
   */
  export type RecommendationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendation to fetch.
     */
    where: RecommendationWhereUniqueInput
  }

  /**
   * Recommendation findUniqueOrThrow
   */
  export type RecommendationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendation to fetch.
     */
    where: RecommendationWhereUniqueInput
  }

  /**
   * Recommendation findFirst
   */
  export type RecommendationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendation to fetch.
     */
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     */
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recommendations.
     */
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recommendations.
     */
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * Recommendation findFirstOrThrow
   */
  export type RecommendationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendation to fetch.
     */
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     */
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recommendations.
     */
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recommendations.
     */
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * Recommendation findMany
   */
  export type RecommendationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendations to fetch.
     */
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     */
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recommendations.
     */
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     */
    skip?: number
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * Recommendation create
   */
  export type RecommendationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * The data needed to create a Recommendation.
     */
    data: XOR<RecommendationCreateInput, RecommendationUncheckedCreateInput>
  }

  /**
   * Recommendation createMany
   */
  export type RecommendationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recommendations.
     */
    data: RecommendationCreateManyInput | RecommendationCreateManyInput[]
  }

  /**
   * Recommendation createManyAndReturn
   */
  export type RecommendationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * The data used to create many Recommendations.
     */
    data: RecommendationCreateManyInput | RecommendationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Recommendation update
   */
  export type RecommendationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * The data needed to update a Recommendation.
     */
    data: XOR<RecommendationUpdateInput, RecommendationUncheckedUpdateInput>
    /**
     * Choose, which Recommendation to update.
     */
    where: RecommendationWhereUniqueInput
  }

  /**
   * Recommendation updateMany
   */
  export type RecommendationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recommendations.
     */
    data: XOR<RecommendationUpdateManyMutationInput, RecommendationUncheckedUpdateManyInput>
    /**
     * Filter which Recommendations to update
     */
    where?: RecommendationWhereInput
    /**
     * Limit how many Recommendations to update.
     */
    limit?: number
  }

  /**
   * Recommendation updateManyAndReturn
   */
  export type RecommendationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * The data used to update Recommendations.
     */
    data: XOR<RecommendationUpdateManyMutationInput, RecommendationUncheckedUpdateManyInput>
    /**
     * Filter which Recommendations to update
     */
    where?: RecommendationWhereInput
    /**
     * Limit how many Recommendations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Recommendation upsert
   */
  export type RecommendationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * The filter to search for the Recommendation to update in case it exists.
     */
    where: RecommendationWhereUniqueInput
    /**
     * In case the Recommendation found by the `where` argument doesn't exist, create a new Recommendation with this data.
     */
    create: XOR<RecommendationCreateInput, RecommendationUncheckedCreateInput>
    /**
     * In case the Recommendation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecommendationUpdateInput, RecommendationUncheckedUpdateInput>
  }

  /**
   * Recommendation delete
   */
  export type RecommendationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter which Recommendation to delete.
     */
    where: RecommendationWhereUniqueInput
  }

  /**
   * Recommendation deleteMany
   */
  export type RecommendationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recommendations to delete
     */
    where?: RecommendationWhereInput
    /**
     * Limit how many Recommendations to delete.
     */
    limit?: number
  }

  /**
   * Recommendation without action
   */
  export type RecommendationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const StayInfoScalarFieldEnum: {
    id: 'id',
    arrivalTime: 'arrivalTime',
    accessInstructions: 'accessInstructions',
    arrivalAdditionalInfo: 'arrivalAdditionalInfo',
    departureTime: 'departureTime',
    exitInstructions: 'exitInstructions',
    departureAdditionalInfo: 'departureAdditionalInfo',
    wifiName: 'wifiName',
    wifiPassword: 'wifiPassword',
    houseRules: 'houseRules',
    ownerContact: 'ownerContact',
    ownerName: 'ownerName',
    generalInfo: 'generalInfo'
  };

  export type StayInfoScalarFieldEnum = (typeof StayInfoScalarFieldEnum)[keyof typeof StayInfoScalarFieldEnum]


  export const RecommendationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    description: 'description',
    type: 'type',
    stayInfoId: 'stayInfoId'
  };

  export type RecommendationScalarFieldEnum = (typeof RecommendationScalarFieldEnum)[keyof typeof RecommendationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'RecommendationType'
   */
  export type EnumRecommendationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RecommendationType'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    
  /**
   * Deep Input Types
   */


  export type StayInfoWhereInput = {
    AND?: StayInfoWhereInput | StayInfoWhereInput[]
    OR?: StayInfoWhereInput[]
    NOT?: StayInfoWhereInput | StayInfoWhereInput[]
    id?: StringFilter<"StayInfo"> | string
    arrivalTime?: StringFilter<"StayInfo"> | string
    accessInstructions?: StringFilter<"StayInfo"> | string
    arrivalAdditionalInfo?: StringFilter<"StayInfo"> | string
    departureTime?: StringFilter<"StayInfo"> | string
    exitInstructions?: StringFilter<"StayInfo"> | string
    departureAdditionalInfo?: StringFilter<"StayInfo"> | string
    wifiName?: StringFilter<"StayInfo"> | string
    wifiPassword?: StringFilter<"StayInfo"> | string
    houseRules?: StringFilter<"StayInfo"> | string
    ownerContact?: StringFilter<"StayInfo"> | string
    ownerName?: StringFilter<"StayInfo"> | string
    generalInfo?: StringFilter<"StayInfo"> | string
    recommendations?: RecommendationListRelationFilter
  }

  export type StayInfoOrderByWithRelationInput = {
    id?: SortOrder
    arrivalTime?: SortOrder
    accessInstructions?: SortOrder
    arrivalAdditionalInfo?: SortOrder
    departureTime?: SortOrder
    exitInstructions?: SortOrder
    departureAdditionalInfo?: SortOrder
    wifiName?: SortOrder
    wifiPassword?: SortOrder
    houseRules?: SortOrder
    ownerContact?: SortOrder
    ownerName?: SortOrder
    generalInfo?: SortOrder
    recommendations?: RecommendationOrderByRelationAggregateInput
  }

  export type StayInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StayInfoWhereInput | StayInfoWhereInput[]
    OR?: StayInfoWhereInput[]
    NOT?: StayInfoWhereInput | StayInfoWhereInput[]
    arrivalTime?: StringFilter<"StayInfo"> | string
    accessInstructions?: StringFilter<"StayInfo"> | string
    arrivalAdditionalInfo?: StringFilter<"StayInfo"> | string
    departureTime?: StringFilter<"StayInfo"> | string
    exitInstructions?: StringFilter<"StayInfo"> | string
    departureAdditionalInfo?: StringFilter<"StayInfo"> | string
    wifiName?: StringFilter<"StayInfo"> | string
    wifiPassword?: StringFilter<"StayInfo"> | string
    houseRules?: StringFilter<"StayInfo"> | string
    ownerContact?: StringFilter<"StayInfo"> | string
    ownerName?: StringFilter<"StayInfo"> | string
    generalInfo?: StringFilter<"StayInfo"> | string
    recommendations?: RecommendationListRelationFilter
  }, "id">

  export type StayInfoOrderByWithAggregationInput = {
    id?: SortOrder
    arrivalTime?: SortOrder
    accessInstructions?: SortOrder
    arrivalAdditionalInfo?: SortOrder
    departureTime?: SortOrder
    exitInstructions?: SortOrder
    departureAdditionalInfo?: SortOrder
    wifiName?: SortOrder
    wifiPassword?: SortOrder
    houseRules?: SortOrder
    ownerContact?: SortOrder
    ownerName?: SortOrder
    generalInfo?: SortOrder
    _count?: StayInfoCountOrderByAggregateInput
    _max?: StayInfoMaxOrderByAggregateInput
    _min?: StayInfoMinOrderByAggregateInput
  }

  export type StayInfoScalarWhereWithAggregatesInput = {
    AND?: StayInfoScalarWhereWithAggregatesInput | StayInfoScalarWhereWithAggregatesInput[]
    OR?: StayInfoScalarWhereWithAggregatesInput[]
    NOT?: StayInfoScalarWhereWithAggregatesInput | StayInfoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StayInfo"> | string
    arrivalTime?: StringWithAggregatesFilter<"StayInfo"> | string
    accessInstructions?: StringWithAggregatesFilter<"StayInfo"> | string
    arrivalAdditionalInfo?: StringWithAggregatesFilter<"StayInfo"> | string
    departureTime?: StringWithAggregatesFilter<"StayInfo"> | string
    exitInstructions?: StringWithAggregatesFilter<"StayInfo"> | string
    departureAdditionalInfo?: StringWithAggregatesFilter<"StayInfo"> | string
    wifiName?: StringWithAggregatesFilter<"StayInfo"> | string
    wifiPassword?: StringWithAggregatesFilter<"StayInfo"> | string
    houseRules?: StringWithAggregatesFilter<"StayInfo"> | string
    ownerContact?: StringWithAggregatesFilter<"StayInfo"> | string
    ownerName?: StringWithAggregatesFilter<"StayInfo"> | string
    generalInfo?: StringWithAggregatesFilter<"StayInfo"> | string
  }

  export type RecommendationWhereInput = {
    AND?: RecommendationWhereInput | RecommendationWhereInput[]
    OR?: RecommendationWhereInput[]
    NOT?: RecommendationWhereInput | RecommendationWhereInput[]
    id?: StringFilter<"Recommendation"> | string
    name?: StringFilter<"Recommendation"> | string
    address?: StringNullableFilter<"Recommendation"> | string | null
    description?: StringNullableFilter<"Recommendation"> | string | null
    type?: EnumRecommendationTypeFilter<"Recommendation"> | $Enums.RecommendationType
    stayInfoId?: StringFilter<"Recommendation"> | string
    stayInfo?: XOR<StayInfoScalarRelationFilter, StayInfoWhereInput>
  }

  export type RecommendationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    stayInfoId?: SortOrder
    stayInfo?: StayInfoOrderByWithRelationInput
  }

  export type RecommendationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RecommendationWhereInput | RecommendationWhereInput[]
    OR?: RecommendationWhereInput[]
    NOT?: RecommendationWhereInput | RecommendationWhereInput[]
    name?: StringFilter<"Recommendation"> | string
    address?: StringNullableFilter<"Recommendation"> | string | null
    description?: StringNullableFilter<"Recommendation"> | string | null
    type?: EnumRecommendationTypeFilter<"Recommendation"> | $Enums.RecommendationType
    stayInfoId?: StringFilter<"Recommendation"> | string
    stayInfo?: XOR<StayInfoScalarRelationFilter, StayInfoWhereInput>
  }, "id">

  export type RecommendationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    stayInfoId?: SortOrder
    _count?: RecommendationCountOrderByAggregateInput
    _max?: RecommendationMaxOrderByAggregateInput
    _min?: RecommendationMinOrderByAggregateInput
  }

  export type RecommendationScalarWhereWithAggregatesInput = {
    AND?: RecommendationScalarWhereWithAggregatesInput | RecommendationScalarWhereWithAggregatesInput[]
    OR?: RecommendationScalarWhereWithAggregatesInput[]
    NOT?: RecommendationScalarWhereWithAggregatesInput | RecommendationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Recommendation"> | string
    name?: StringWithAggregatesFilter<"Recommendation"> | string
    address?: StringNullableWithAggregatesFilter<"Recommendation"> | string | null
    description?: StringNullableWithAggregatesFilter<"Recommendation"> | string | null
    type?: EnumRecommendationTypeWithAggregatesFilter<"Recommendation"> | $Enums.RecommendationType
    stayInfoId?: StringWithAggregatesFilter<"Recommendation"> | string
  }

  export type StayInfoCreateInput = {
    id?: string
    arrivalTime: string
    accessInstructions: string
    arrivalAdditionalInfo: string
    departureTime: string
    exitInstructions: string
    departureAdditionalInfo: string
    wifiName: string
    wifiPassword: string
    houseRules: string
    ownerContact: string
    ownerName: string
    generalInfo: string
    recommendations?: RecommendationCreateNestedManyWithoutStayInfoInput
  }

  export type StayInfoUncheckedCreateInput = {
    id?: string
    arrivalTime: string
    accessInstructions: string
    arrivalAdditionalInfo: string
    departureTime: string
    exitInstructions: string
    departureAdditionalInfo: string
    wifiName: string
    wifiPassword: string
    houseRules: string
    ownerContact: string
    ownerName: string
    generalInfo: string
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutStayInfoInput
  }

  export type StayInfoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    arrivalTime?: StringFieldUpdateOperationsInput | string
    accessInstructions?: StringFieldUpdateOperationsInput | string
    arrivalAdditionalInfo?: StringFieldUpdateOperationsInput | string
    departureTime?: StringFieldUpdateOperationsInput | string
    exitInstructions?: StringFieldUpdateOperationsInput | string
    departureAdditionalInfo?: StringFieldUpdateOperationsInput | string
    wifiName?: StringFieldUpdateOperationsInput | string
    wifiPassword?: StringFieldUpdateOperationsInput | string
    houseRules?: StringFieldUpdateOperationsInput | string
    ownerContact?: StringFieldUpdateOperationsInput | string
    ownerName?: StringFieldUpdateOperationsInput | string
    generalInfo?: StringFieldUpdateOperationsInput | string
    recommendations?: RecommendationUpdateManyWithoutStayInfoNestedInput
  }

  export type StayInfoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    arrivalTime?: StringFieldUpdateOperationsInput | string
    accessInstructions?: StringFieldUpdateOperationsInput | string
    arrivalAdditionalInfo?: StringFieldUpdateOperationsInput | string
    departureTime?: StringFieldUpdateOperationsInput | string
    exitInstructions?: StringFieldUpdateOperationsInput | string
    departureAdditionalInfo?: StringFieldUpdateOperationsInput | string
    wifiName?: StringFieldUpdateOperationsInput | string
    wifiPassword?: StringFieldUpdateOperationsInput | string
    houseRules?: StringFieldUpdateOperationsInput | string
    ownerContact?: StringFieldUpdateOperationsInput | string
    ownerName?: StringFieldUpdateOperationsInput | string
    generalInfo?: StringFieldUpdateOperationsInput | string
    recommendations?: RecommendationUncheckedUpdateManyWithoutStayInfoNestedInput
  }

  export type StayInfoCreateManyInput = {
    id?: string
    arrivalTime: string
    accessInstructions: string
    arrivalAdditionalInfo: string
    departureTime: string
    exitInstructions: string
    departureAdditionalInfo: string
    wifiName: string
    wifiPassword: string
    houseRules: string
    ownerContact: string
    ownerName: string
    generalInfo: string
  }

  export type StayInfoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    arrivalTime?: StringFieldUpdateOperationsInput | string
    accessInstructions?: StringFieldUpdateOperationsInput | string
    arrivalAdditionalInfo?: StringFieldUpdateOperationsInput | string
    departureTime?: StringFieldUpdateOperationsInput | string
    exitInstructions?: StringFieldUpdateOperationsInput | string
    departureAdditionalInfo?: StringFieldUpdateOperationsInput | string
    wifiName?: StringFieldUpdateOperationsInput | string
    wifiPassword?: StringFieldUpdateOperationsInput | string
    houseRules?: StringFieldUpdateOperationsInput | string
    ownerContact?: StringFieldUpdateOperationsInput | string
    ownerName?: StringFieldUpdateOperationsInput | string
    generalInfo?: StringFieldUpdateOperationsInput | string
  }

  export type StayInfoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    arrivalTime?: StringFieldUpdateOperationsInput | string
    accessInstructions?: StringFieldUpdateOperationsInput | string
    arrivalAdditionalInfo?: StringFieldUpdateOperationsInput | string
    departureTime?: StringFieldUpdateOperationsInput | string
    exitInstructions?: StringFieldUpdateOperationsInput | string
    departureAdditionalInfo?: StringFieldUpdateOperationsInput | string
    wifiName?: StringFieldUpdateOperationsInput | string
    wifiPassword?: StringFieldUpdateOperationsInput | string
    houseRules?: StringFieldUpdateOperationsInput | string
    ownerContact?: StringFieldUpdateOperationsInput | string
    ownerName?: StringFieldUpdateOperationsInput | string
    generalInfo?: StringFieldUpdateOperationsInput | string
  }

  export type RecommendationCreateInput = {
    id?: string
    name: string
    address?: string | null
    description?: string | null
    type: $Enums.RecommendationType
    stayInfo: StayInfoCreateNestedOneWithoutRecommendationsInput
  }

  export type RecommendationUncheckedCreateInput = {
    id?: string
    name: string
    address?: string | null
    description?: string | null
    type: $Enums.RecommendationType
    stayInfoId: string
  }

  export type RecommendationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumRecommendationTypeFieldUpdateOperationsInput | $Enums.RecommendationType
    stayInfo?: StayInfoUpdateOneRequiredWithoutRecommendationsNestedInput
  }

  export type RecommendationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumRecommendationTypeFieldUpdateOperationsInput | $Enums.RecommendationType
    stayInfoId?: StringFieldUpdateOperationsInput | string
  }

  export type RecommendationCreateManyInput = {
    id?: string
    name: string
    address?: string | null
    description?: string | null
    type: $Enums.RecommendationType
    stayInfoId: string
  }

  export type RecommendationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumRecommendationTypeFieldUpdateOperationsInput | $Enums.RecommendationType
  }

  export type RecommendationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumRecommendationTypeFieldUpdateOperationsInput | $Enums.RecommendationType
    stayInfoId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type RecommendationListRelationFilter = {
    every?: RecommendationWhereInput
    some?: RecommendationWhereInput
    none?: RecommendationWhereInput
  }

  export type RecommendationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StayInfoCountOrderByAggregateInput = {
    id?: SortOrder
    arrivalTime?: SortOrder
    accessInstructions?: SortOrder
    arrivalAdditionalInfo?: SortOrder
    departureTime?: SortOrder
    exitInstructions?: SortOrder
    departureAdditionalInfo?: SortOrder
    wifiName?: SortOrder
    wifiPassword?: SortOrder
    houseRules?: SortOrder
    ownerContact?: SortOrder
    ownerName?: SortOrder
    generalInfo?: SortOrder
  }

  export type StayInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    arrivalTime?: SortOrder
    accessInstructions?: SortOrder
    arrivalAdditionalInfo?: SortOrder
    departureTime?: SortOrder
    exitInstructions?: SortOrder
    departureAdditionalInfo?: SortOrder
    wifiName?: SortOrder
    wifiPassword?: SortOrder
    houseRules?: SortOrder
    ownerContact?: SortOrder
    ownerName?: SortOrder
    generalInfo?: SortOrder
  }

  export type StayInfoMinOrderByAggregateInput = {
    id?: SortOrder
    arrivalTime?: SortOrder
    accessInstructions?: SortOrder
    arrivalAdditionalInfo?: SortOrder
    departureTime?: SortOrder
    exitInstructions?: SortOrder
    departureAdditionalInfo?: SortOrder
    wifiName?: SortOrder
    wifiPassword?: SortOrder
    houseRules?: SortOrder
    ownerContact?: SortOrder
    ownerName?: SortOrder
    generalInfo?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumRecommendationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RecommendationType | EnumRecommendationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RecommendationType[]
    notIn?: $Enums.RecommendationType[]
    not?: NestedEnumRecommendationTypeFilter<$PrismaModel> | $Enums.RecommendationType
  }

  export type StayInfoScalarRelationFilter = {
    is?: StayInfoWhereInput
    isNot?: StayInfoWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RecommendationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    description?: SortOrder
    type?: SortOrder
    stayInfoId?: SortOrder
  }

  export type RecommendationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    description?: SortOrder
    type?: SortOrder
    stayInfoId?: SortOrder
  }

  export type RecommendationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    description?: SortOrder
    type?: SortOrder
    stayInfoId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumRecommendationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RecommendationType | EnumRecommendationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RecommendationType[]
    notIn?: $Enums.RecommendationType[]
    not?: NestedEnumRecommendationTypeWithAggregatesFilter<$PrismaModel> | $Enums.RecommendationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRecommendationTypeFilter<$PrismaModel>
    _max?: NestedEnumRecommendationTypeFilter<$PrismaModel>
  }

  export type RecommendationCreateNestedManyWithoutStayInfoInput = {
    create?: XOR<RecommendationCreateWithoutStayInfoInput, RecommendationUncheckedCreateWithoutStayInfoInput> | RecommendationCreateWithoutStayInfoInput[] | RecommendationUncheckedCreateWithoutStayInfoInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutStayInfoInput | RecommendationCreateOrConnectWithoutStayInfoInput[]
    createMany?: RecommendationCreateManyStayInfoInputEnvelope
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
  }

  export type RecommendationUncheckedCreateNestedManyWithoutStayInfoInput = {
    create?: XOR<RecommendationCreateWithoutStayInfoInput, RecommendationUncheckedCreateWithoutStayInfoInput> | RecommendationCreateWithoutStayInfoInput[] | RecommendationUncheckedCreateWithoutStayInfoInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutStayInfoInput | RecommendationCreateOrConnectWithoutStayInfoInput[]
    createMany?: RecommendationCreateManyStayInfoInputEnvelope
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type RecommendationUpdateManyWithoutStayInfoNestedInput = {
    create?: XOR<RecommendationCreateWithoutStayInfoInput, RecommendationUncheckedCreateWithoutStayInfoInput> | RecommendationCreateWithoutStayInfoInput[] | RecommendationUncheckedCreateWithoutStayInfoInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutStayInfoInput | RecommendationCreateOrConnectWithoutStayInfoInput[]
    upsert?: RecommendationUpsertWithWhereUniqueWithoutStayInfoInput | RecommendationUpsertWithWhereUniqueWithoutStayInfoInput[]
    createMany?: RecommendationCreateManyStayInfoInputEnvelope
    set?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    disconnect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    delete?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    update?: RecommendationUpdateWithWhereUniqueWithoutStayInfoInput | RecommendationUpdateWithWhereUniqueWithoutStayInfoInput[]
    updateMany?: RecommendationUpdateManyWithWhereWithoutStayInfoInput | RecommendationUpdateManyWithWhereWithoutStayInfoInput[]
    deleteMany?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
  }

  export type RecommendationUncheckedUpdateManyWithoutStayInfoNestedInput = {
    create?: XOR<RecommendationCreateWithoutStayInfoInput, RecommendationUncheckedCreateWithoutStayInfoInput> | RecommendationCreateWithoutStayInfoInput[] | RecommendationUncheckedCreateWithoutStayInfoInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutStayInfoInput | RecommendationCreateOrConnectWithoutStayInfoInput[]
    upsert?: RecommendationUpsertWithWhereUniqueWithoutStayInfoInput | RecommendationUpsertWithWhereUniqueWithoutStayInfoInput[]
    createMany?: RecommendationCreateManyStayInfoInputEnvelope
    set?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    disconnect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    delete?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    update?: RecommendationUpdateWithWhereUniqueWithoutStayInfoInput | RecommendationUpdateWithWhereUniqueWithoutStayInfoInput[]
    updateMany?: RecommendationUpdateManyWithWhereWithoutStayInfoInput | RecommendationUpdateManyWithWhereWithoutStayInfoInput[]
    deleteMany?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
  }

  export type StayInfoCreateNestedOneWithoutRecommendationsInput = {
    create?: XOR<StayInfoCreateWithoutRecommendationsInput, StayInfoUncheckedCreateWithoutRecommendationsInput>
    connectOrCreate?: StayInfoCreateOrConnectWithoutRecommendationsInput
    connect?: StayInfoWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumRecommendationTypeFieldUpdateOperationsInput = {
    set?: $Enums.RecommendationType
  }

  export type StayInfoUpdateOneRequiredWithoutRecommendationsNestedInput = {
    create?: XOR<StayInfoCreateWithoutRecommendationsInput, StayInfoUncheckedCreateWithoutRecommendationsInput>
    connectOrCreate?: StayInfoCreateOrConnectWithoutRecommendationsInput
    upsert?: StayInfoUpsertWithoutRecommendationsInput
    connect?: StayInfoWhereUniqueInput
    update?: XOR<XOR<StayInfoUpdateToOneWithWhereWithoutRecommendationsInput, StayInfoUpdateWithoutRecommendationsInput>, StayInfoUncheckedUpdateWithoutRecommendationsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumRecommendationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RecommendationType | EnumRecommendationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RecommendationType[]
    notIn?: $Enums.RecommendationType[]
    not?: NestedEnumRecommendationTypeFilter<$PrismaModel> | $Enums.RecommendationType
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRecommendationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RecommendationType | EnumRecommendationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RecommendationType[]
    notIn?: $Enums.RecommendationType[]
    not?: NestedEnumRecommendationTypeWithAggregatesFilter<$PrismaModel> | $Enums.RecommendationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRecommendationTypeFilter<$PrismaModel>
    _max?: NestedEnumRecommendationTypeFilter<$PrismaModel>
  }

  export type RecommendationCreateWithoutStayInfoInput = {
    id?: string
    name: string
    address?: string | null
    description?: string | null
    type: $Enums.RecommendationType
  }

  export type RecommendationUncheckedCreateWithoutStayInfoInput = {
    id?: string
    name: string
    address?: string | null
    description?: string | null
    type: $Enums.RecommendationType
  }

  export type RecommendationCreateOrConnectWithoutStayInfoInput = {
    where: RecommendationWhereUniqueInput
    create: XOR<RecommendationCreateWithoutStayInfoInput, RecommendationUncheckedCreateWithoutStayInfoInput>
  }

  export type RecommendationCreateManyStayInfoInputEnvelope = {
    data: RecommendationCreateManyStayInfoInput | RecommendationCreateManyStayInfoInput[]
  }

  export type RecommendationUpsertWithWhereUniqueWithoutStayInfoInput = {
    where: RecommendationWhereUniqueInput
    update: XOR<RecommendationUpdateWithoutStayInfoInput, RecommendationUncheckedUpdateWithoutStayInfoInput>
    create: XOR<RecommendationCreateWithoutStayInfoInput, RecommendationUncheckedCreateWithoutStayInfoInput>
  }

  export type RecommendationUpdateWithWhereUniqueWithoutStayInfoInput = {
    where: RecommendationWhereUniqueInput
    data: XOR<RecommendationUpdateWithoutStayInfoInput, RecommendationUncheckedUpdateWithoutStayInfoInput>
  }

  export type RecommendationUpdateManyWithWhereWithoutStayInfoInput = {
    where: RecommendationScalarWhereInput
    data: XOR<RecommendationUpdateManyMutationInput, RecommendationUncheckedUpdateManyWithoutStayInfoInput>
  }

  export type RecommendationScalarWhereInput = {
    AND?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
    OR?: RecommendationScalarWhereInput[]
    NOT?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
    id?: StringFilter<"Recommendation"> | string
    name?: StringFilter<"Recommendation"> | string
    address?: StringNullableFilter<"Recommendation"> | string | null
    description?: StringNullableFilter<"Recommendation"> | string | null
    type?: EnumRecommendationTypeFilter<"Recommendation"> | $Enums.RecommendationType
    stayInfoId?: StringFilter<"Recommendation"> | string
  }

  export type StayInfoCreateWithoutRecommendationsInput = {
    id?: string
    arrivalTime: string
    accessInstructions: string
    arrivalAdditionalInfo: string
    departureTime: string
    exitInstructions: string
    departureAdditionalInfo: string
    wifiName: string
    wifiPassword: string
    houseRules: string
    ownerContact: string
    ownerName: string
    generalInfo: string
  }

  export type StayInfoUncheckedCreateWithoutRecommendationsInput = {
    id?: string
    arrivalTime: string
    accessInstructions: string
    arrivalAdditionalInfo: string
    departureTime: string
    exitInstructions: string
    departureAdditionalInfo: string
    wifiName: string
    wifiPassword: string
    houseRules: string
    ownerContact: string
    ownerName: string
    generalInfo: string
  }

  export type StayInfoCreateOrConnectWithoutRecommendationsInput = {
    where: StayInfoWhereUniqueInput
    create: XOR<StayInfoCreateWithoutRecommendationsInput, StayInfoUncheckedCreateWithoutRecommendationsInput>
  }

  export type StayInfoUpsertWithoutRecommendationsInput = {
    update: XOR<StayInfoUpdateWithoutRecommendationsInput, StayInfoUncheckedUpdateWithoutRecommendationsInput>
    create: XOR<StayInfoCreateWithoutRecommendationsInput, StayInfoUncheckedCreateWithoutRecommendationsInput>
    where?: StayInfoWhereInput
  }

  export type StayInfoUpdateToOneWithWhereWithoutRecommendationsInput = {
    where?: StayInfoWhereInput
    data: XOR<StayInfoUpdateWithoutRecommendationsInput, StayInfoUncheckedUpdateWithoutRecommendationsInput>
  }

  export type StayInfoUpdateWithoutRecommendationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    arrivalTime?: StringFieldUpdateOperationsInput | string
    accessInstructions?: StringFieldUpdateOperationsInput | string
    arrivalAdditionalInfo?: StringFieldUpdateOperationsInput | string
    departureTime?: StringFieldUpdateOperationsInput | string
    exitInstructions?: StringFieldUpdateOperationsInput | string
    departureAdditionalInfo?: StringFieldUpdateOperationsInput | string
    wifiName?: StringFieldUpdateOperationsInput | string
    wifiPassword?: StringFieldUpdateOperationsInput | string
    houseRules?: StringFieldUpdateOperationsInput | string
    ownerContact?: StringFieldUpdateOperationsInput | string
    ownerName?: StringFieldUpdateOperationsInput | string
    generalInfo?: StringFieldUpdateOperationsInput | string
  }

  export type StayInfoUncheckedUpdateWithoutRecommendationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    arrivalTime?: StringFieldUpdateOperationsInput | string
    accessInstructions?: StringFieldUpdateOperationsInput | string
    arrivalAdditionalInfo?: StringFieldUpdateOperationsInput | string
    departureTime?: StringFieldUpdateOperationsInput | string
    exitInstructions?: StringFieldUpdateOperationsInput | string
    departureAdditionalInfo?: StringFieldUpdateOperationsInput | string
    wifiName?: StringFieldUpdateOperationsInput | string
    wifiPassword?: StringFieldUpdateOperationsInput | string
    houseRules?: StringFieldUpdateOperationsInput | string
    ownerContact?: StringFieldUpdateOperationsInput | string
    ownerName?: StringFieldUpdateOperationsInput | string
    generalInfo?: StringFieldUpdateOperationsInput | string
  }

  export type RecommendationCreateManyStayInfoInput = {
    id?: string
    name: string
    address?: string | null
    description?: string | null
    type: $Enums.RecommendationType
  }

  export type RecommendationUpdateWithoutStayInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumRecommendationTypeFieldUpdateOperationsInput | $Enums.RecommendationType
  }

  export type RecommendationUncheckedUpdateWithoutStayInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumRecommendationTypeFieldUpdateOperationsInput | $Enums.RecommendationType
  }

  export type RecommendationUncheckedUpdateManyWithoutStayInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumRecommendationTypeFieldUpdateOperationsInput | $Enums.RecommendationType
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}