<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="eyJjdXJyZW50Q29udmVyc2F0aW9uSWQiOiJlZDYxMjQ1My03MzFiLTRlMDQtYWIzYS02Y2RmNWEzZjY3YTciLCJjb252ZXJzYXRpb25zIjp7ImVkNjEyNDUzLTczMWItNGUwNC1hYjNhLTZjZGY1YTNmNjdhNyI6eyJpZCI6ImVkNjEyNDUzLTczMWItNGUwNC1hYjNhLTZjZGY1YTNmNjdhNyIsImNyZWF0ZWRBdElzbyI6IjIwMjUtMDQtMTFUMTA6MjM6MDYuNjA4WiIsImxhc3RJbnRlcmFjdGVkQXRJc28iOiIyMDI1LTA0LTExVDEyOjI0OjQwLjU1M1oiLCJjaGF0SGlzdG9yeSI6W3sic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI1ZmFlMzQ2Ny0zMDZkLTQxMDEtYTViMC0yMjdlNDQ0MDk0NjYiLCJyZXF1ZXN0X21lc3NhZ2UiOiJEYW5zIGxlIHByb2pldCBmcm9udCwgbmUgbW9kaWZpZSBwYXMgZCdhdXRyZXMgZmljaGllcnMgaW51dGlsZW1lbnQgcXVlIEBzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeCAgQHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3ggLCBqZSB2ZXV4IHF1ZSBzaSB1bmUgbW9kaWZpY2F0aW9uIGVzdCBlZmZlY3R1w6kgZGFucyBAc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeCAsIGxlIGJvdXRvbiBzb2l0IGVucmVnaXN0cmVyIGxlcyBtb2RpZmljYXRpb24gZXQgbG9ycyBkJ3VuIHN1Ym1pdCwgdW4gZmV0Y2ggdmVycyBodHRwOi8vbG9jYWxob3N0OjMwMDEvYXBpL3N0YXkvbCdpZCBzb2l0IGVudm95w6kgZW4gUFVUIHBvdXIgbWV0dHJlIGEgam91ciBsZXMgZG9ubsOpZXMsIGV0IG1ldHRlIGEgam91ciAgbGUgc3RhdGUgYm9va0RhdGEgZGFucyBAc3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3ggYXZlYyBsZXMgZG9ubsOpZXMgcsOpY3Vww6lyw6ksIHNpIGF1Y3VuZSBtb2RpZmljYXRpb25zIG4nYSDDqXTDqSBmYWl0ZSwgamUgdmV1eCBxdWUgbGUgYm91dG9uIGRhbnMgQHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3ggc29pdCB1bmUgcmVkaXJlY3Rpb24gdmVycyBsYSBwYWdlIGQnYWNjdWVpbCAvIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkRhbnMgbGUgcHJvamV0IGZyb250LCBuZSBtb2RpZmllIHBhcyBkJ2F1dHJlcyBmaWNoaWVycyBpbnV0aWxlbWVudCBxdWUgIn0seyJ0eXBlIjoibWVudGlvbiIsImF0dHJzIjp7ImlkIjoiL3NyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4IiwibGFiZWwiOiJwYWdlLnRzeCIsImRhdGEiOnsibGFiZWwiOiJwYWdlLnRzeCIsIm5hbWUiOiJzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeCIsImlkIjoiL3NyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3gifSwidHlwZSI6Iml0ZW0ifX19LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAifSx7InR5cGUiOiJtZW50aW9uIiwiYXR0cnMiOnsiaWQiOiIvc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeCIsImxhYmVsIjoiQm9va0VkaXRGb3JtLnRzeCIsImRhdGEiOnsibGFiZWwiOiJCb29rRWRpdEZvcm0udHN4IiwibmFtZSI6InNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3giLCJpZCI6Ii9zcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeCJ9LCJ0eXBlIjoiaXRlbSJ9fX0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgLCBqZSB2ZXV4IHF1ZSBzaSB1bmUgbW9kaWZpY2F0aW9uIGVzdCBlZmZlY3R1w6kgZGFucyAifSx7InR5cGUiOiJtZW50aW9uIiwiYXR0cnMiOnsiaWQiOiIvc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeCIsImxhYmVsIjoiQm9va0VkaXRGb3JtLnRzeCIsImRhdGEiOnsibGFiZWwiOiJCb29rRWRpdEZvcm0udHN4IiwibmFtZSI6InNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3giLCJpZCI6Ii9zcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeCJ9LCJ0eXBlIjoiaXRlbSJ9fX0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgLCBsZSBib3V0b24gc29pdCBlbnJlZ2lzdHJlciBsZXMgbW9kaWZpY2F0aW9uIGV0IGxvcnMgZCd1biBzdWJtaXQsIHVuIGZldGNoIHZlcnMgaHR0cDovL2xvY2FsaG9zdDozMDAxL2FwaS9zdGF5L2wnaWQgc29pdCBlbnZvecOpIGVuIFBVVCBwb3VyIG1ldHRyZSBhIGpvdXIgbGVzIGRvbm7DqWVzLCBldCBtZXR0ZSBhIGpvdXIgIGxlIHN0YXRlIGJvb2tEYXRhIGRhbnMgIn0seyJ0eXBlIjoibWVudGlvbiIsImF0dHJzIjp7ImlkIjoiL3NyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4IiwibGFiZWwiOiJwYWdlLnRzeCIsImRhdGEiOnsibGFiZWwiOiJwYWdlLnRzeCIsIm5hbWUiOiJzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeCIsImlkIjoiL3NyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3gifSwidHlwZSI6Iml0ZW0ifX19LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiIGF2ZWMgbGVzIGRvbm7DqWVzIHLDqWN1cMOpcsOpLCBzaSBhdWN1bmUgbW9kaWZpY2F0aW9ucyBuJ2Egw6l0w6kgZmFpdGUsIGplIHZldXggcXVlIGxlIGJvdXRvbiBkYW5zICJ9LHsidHlwZSI6Im1lbnRpb24iLCJhdHRycyI6eyJpZCI6Ii9zcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4IiwibGFiZWwiOiJCb29rRWRpdEZvcm0udHN4IiwiZGF0YSI6eyJsYWJlbCI6IkJvb2tFZGl0Rm9ybS50c3giLCJuYW1lIjoic3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeCIsImlkIjoiL3NyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3giLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4In0sInR5cGUiOiJpdGVtIn19fSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiBzb2l0IHVuZSByZWRpcmVjdGlvbiB2ZXJzIGxhIHBhZ2UgZCdhY2N1ZWlsIC8ifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W3sibGFiZWwiOiJwYWdlLnRzeCIsIm5hbWUiOiJzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeCIsImlkIjoiL3NyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3gifSwidHlwZSI6Iml0ZW0ifSx7ImxhYmVsIjoiQm9va0VkaXRGb3JtLnRzeCIsIm5hbWUiOiJzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4IiwiaWQiOiIvc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3gifSwidHlwZSI6Iml0ZW0ifSx7ImxhYmVsIjoiQm9va0VkaXRGb3JtLnRzeCIsIm5hbWUiOiJzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4IiwiaWQiOiIvc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3gifSwidHlwZSI6Iml0ZW0ifSx7ImxhYmVsIjoicGFnZS50c3giLCJuYW1lIjoic3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3giLCJpZCI6Ii9zcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4In0sInR5cGUiOiJpdGVtIn0seyJsYWJlbCI6IkJvb2tFZGl0Rm9ybS50c3giLCJuYW1lIjoic3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeCIsImlkIjoiL3NyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3giLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4In0sInR5cGUiOiJpdGVtIn1dLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxNUhEa0M2Z29mRE5Bb1dEUzVXTE11MyIsInRvb2xfbmFtZSI6ImNvZGViYXNlLXJldHJpZXZhbCIsImlucHV0X2pzb24iOiJ7XCJpbmZvcm1hdGlvbl9yZXF1ZXN0XCI6IFwiQ29udGVudSBkXFx1MDBlOXRhaWxsXFx1MDBlOSBkdSBmaWNoaWVyIHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3gsIGluY2x1YW50IHRvdXMgbGVzIGltcG9ydHMsIGNvbXBvc2FudHMsIFxcdTAwZTl0YXRzLCBmb25jdGlvbnMgZXQgbGEgc3RydWN0dXJlIGR1IGZvcm11bGFpcmVcIn0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkplIHZhaXMgdm91cyBhaWRlciDDoCBpbXBsw6ltZW50ZXIgY2V0dGUgZm9uY3Rpb25uYWxpdMOpLiBDb21tZW7Dp29ucyBwYXIgZXhhbWluZXIgbGVzIGZpY2hpZXJzIGNvbmNlcm7DqXMgcG91ciBjb21wcmVuZHJlIGxldXIgc3RydWN0dXJlIGFjdHVlbGxlLlxuXG4jIyDDiXRhcGUgcHLDqWxpbWluYWlyZSA6IEFuYWx5c2UgZHUgY29kZSBleGlzdGFudFxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiJEYW5zIGxlIHByb2pldCBmcm9udCwgbmUgbW9kaWZpZSBwYXMgZCdhdXRyZXMgZmljaGllcnMgaW51dGlsZW1lbnQgcXVlIEBzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeCAgQHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3ggLCBqZSB2ZXV4IHF1ZSBzaSB1bmUgbW9kaWZpY2F0aW9uIGVzdCBlZmZlY3R1w6kgZGFucyBAc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeCAsIGxlIGJvdXRvbiBzb2l0IGVucmVnaXN0cmVyIGxlcyBtb2RpZmljYXRpb24gZXQgbG9ycyBkJ3VuIHN1Ym1pdCwgdW4gZmV0Y2ggdmVycyBodHRwOi8vbG9jYWxob3N0OjMwMDEvYXBpL3N0YXkvbCdpZCBzb2l0IGVudm95w6kgZW4gUFVUIHBvdXIgbWV0dHJlIGEgam91ciBsZXMgZG9ubsOpZXMsIGV0IG1ldHRlIGEgam91ciAgbGUgc3RhdGUgYm9va0RhdGEgZGFucyBAc3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3ggYXZlYyBsZXMgZG9ubsOpZXMgcsOpY3Vww6lyw6ksIHNpIGF1Y3VuZSBtb2RpZmljYXRpb25zIG4nYSDDqXTDqSBmYWl0ZSwgamUgdmV1eCBxdWUgbGUgYm91dG9uIGRhbnMgQHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3ggc29pdCB1bmUgcmVkaXJlY3Rpb24gdmVycyBsYSBwYWdlIGQnYWNjdWVpbCAvIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQiLCJmb2xkZXJSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MywiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiSmUgdmFpcyB2b3VzIGFpZGVyIMOgIGltcGzDqW1lbnRlciBjZXR0ZSBmb25jdGlvbm5hbGl0w6kuIENvbW1lbsOnb25zIHBhciBleGFtaW5lciBsZXMgZmljaGllcnMgY29uY2VybsOpcyBwb3VyIGNvbXByZW5kcmUgbGV1ciBzdHJ1Y3R1cmUgYWN0dWVsbGUuXG5cbiMjIMOJdGFwZSBwcsOpbGltaW5haXJlIDogQW5hbHlzZSBkdSBjb2RlIGV4aXN0YW50XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiYTQyZjg2YzQtOTY1YS00ZjhlLWJmODItNDZkNmIxYTU1ZTliIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMTU4MlM5cENUSnNBWnJKd3pKTXRqRGIiLCJ0b29sX25hbWUiOiJjb2RlYmFzZS1yZXRyaWV2YWwiLCJpbnB1dF9qc29uIjoie1wiaW5mb3JtYXRpb25fcmVxdWVzdFwiOiBcIkNvbnRlbnUgZFxcdTAwZTl0YWlsbFxcdTAwZTkgZHUgZmljaGllciBzcmMvdHlwZXMvQm9va0RhdGEudHMgcG91ciBjb21wcmVuZHJlIGxhIHN0cnVjdHVyZSBkZXMgZG9ublxcdTAwZTllc1wifSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeFxuJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUZvcm0sIHVzZUZpZWxkQXJyYXkgfSBmcm9tICdyZWFjdC1ob29rLWZvcm0nO1xuaW1wb3J0IHsgem9kUmVzb2x2ZXIgfSBmcm9tICdAaG9va2Zvcm0vcmVzb2x2ZXJzL3pvZCc7XG5pbXBvcnQgeyBCb29rRGF0YSB9IGZyb20gJ0AvdHlwZXMvQm9va0RhdGEnO1xuaW1wb3J0IHsgQm9va0Zvcm1TY2hlbWEsIEJvb2tGb3JtVmFsdWVzVHlwZSB9IGZyb20gJy4vc2NoZW1hcy9Cb29rRm9ybVNjaGVtYSc7XG5pbXBvcnQgSW5wdXRGb3JtIGZyb20gJy4vSW5wdXRGb3JtJztcbmltcG9ydCB7IFBsdXNDaXJjbGUsIFBhbG10cmVlLCBQbGFuZSwgSG9tZSwgTWFwUGluIH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcbmltcG9ydCBSZWNvbW1lbmRhdGlvbiBmcm9tICcuL1JlY29tbWVuZGF0aW9uJztcbmltcG9ydCB7IG1vdGlvbiB9IGZyb20gJ2ZyYW1lci1tb3Rpb24nO1xuaW1wb3J0IHsgQWNjb3JkaW9uLCBBY2NvcmRpb25Db250ZW50LCBBY2NvcmRpb25JdGVtLCBBY2NvcmRpb25UcmlnZ2VyIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2FjY29yZGlvbic7XG5cbmNvbnN0IGNvbnZlcnRCb29rRGF0YVRvRm9ybVZhbHVlcyA9IChkYXRhOiBCb29rRGF0YSB8IHVuZGVmaW5lZCk6IEJvb2tGb3JtVmFsdWVzVHlwZSA9PiB7XG4gIHJldHVybiB7XG4gICAgaWQ6IGRhdGE/LmlkLFxuICAgIGFycml2YWxUaW1lOiBkYXRhPy5hcnJpdmFsVGltZSB8fCAnJyxcbiAgICBhY2Nlc3NJbnN0cnVjdGlvbnM6IGRhdGE/LmFjY2Vzc0luc3RydWN0aW9ucyB8fCAnJyxcbiAgICBhcnJpdmFsQWRkaXRpb25hbEluZm86IGRhdGE/LmFycml2YWxBZGRpdGlvbmFsSW5mbyB8fCAnJyxcbiAgICBkZXBhcnR1cmVUaW1lOiBkYXRhPy5kZXBhcnR1cmVUaW1lIHx8ICcnLFxuICAgIGV4aXRJbnN0cnVjdGlvbnM6IGRhdGE/LmV4aXRJbnN0cnVjdGlvbnMgfHwgJycsXG4gICAgZGVwYXJ0dXJlQWRkaXRpb25hbEluZm86IGRhdGE/LmRlcGFydHVyZUFkZGl0aW9uYWxJbmZvIHx8ICcnLFxuICAgIHdpZmlOYW1lOiBkYXRhPy53aWZpTmFtZSB8fCAnJyxcbiAgICB3aWZpUGFzc3dvcmQ6IGRhdGE/LndpZmlQYXNzd29yZCB8fCAnJyxcbiAgICBob3VzZVJ1bGVzOiBkYXRhPy5ob3VzZVJ1bGVzIHx8ICcnLFxuICAgIG93bmVyQ29udGFjdDogZGF0YT8ub3duZXJDb250YWN0IHx8ICcnLFxuICAgIG93bmVyTmFtZTogZGF0YT8ub3duZXJOYW1lIHx8ICcnLFxuICAgIGdlbmVyYWxJbmZvOiBkYXRhPy5nZW5lcmFsSW5mbyB8fCAnJyxcbiAgICByZWNvbW1lbmRhdGlvbnM6IGRhdGE/LnJlY29tbWVuZGF0aW9ucyB8fCBbXSxcbiAgfTtcbn07XG5cbmNvbnN0IGNvbnZlcnRGb3JtVmFsdWVzVG9Cb29rRGF0YSA9ICh2YWx1ZXM6IEJvb2tGb3JtVmFsdWVzVHlwZSk6IEJvb2tEYXRhID0+IHtcbiAgcmV0dXJuIHtcbiAgICBpZDogdmFsdWVzLmlkLFxuICAgIGFycml2YWxUaW1lOiB2YWx1ZXMuYXJyaXZhbFRpbWUsXG4gICAgYWNjZXNzSW5zdHJ1Y3Rpb25zOiB2YWx1ZXMuYWNjZXNzSW5zdHJ1Y3Rpb25zLFxuICAgIGFycml2YWxBZGRpdGlvbmFsSW5mbzogdmFsdWVzLmFycml2YWxBZGRpdGlvbmFsSW5mbyB8fCAnJyxcbiAgICBkZXBhcnR1cmVUaW1lOiB2YWx1ZXMuZGVwYXJ0dXJlVGltZSxcbiAgICBleGl0SW5zdHJ1Y3Rpb25zOiB2YWx1ZXMuZXhpdEluc3RydWN0aW9ucyxcbiAgICBkZXBhcnR1cmVBZGRpdGlvbmFsSW5mbzogdmFsdWVzLmRlcGFydHVyZUFkZGl0aW9uYWxJbmZvIHx8ICcnLFxuICAgIHdpZmlOYW1lOiB2YWx1ZXMud2lmaU5hbWUsXG4gICAgd2lmaVBhc3N3b3JkOiB2YWx1ZXMud2lmaVBhc3N3b3JkLFxuICAgIGhvdXNlUnVsZXM6IHZhbHVlcy5ob3VzZVJ1bGVzLFxuICAgIG93bmVyQ29udGFjdDogdmFsdWVzLm93bmVyQ29udGFjdCxcbiAgICBvd25lck5hbWU6IHZhbHVlcy5vd25lck5hbWUsXG4gICAgZ2VuZXJhbEluZm86IHZhbHVlcy5nZW5lcmFsSW5mbyB8fCAnJyxcbiAgICByZWNvbW1lbmRhdGlvbnM6IHZhbHVlcy5yZWNvbW1lbmRhdGlvbnMgfHwgW10sXG4gIH07XG59O1xuXG5pbnRlcmZhY2UgQm9va0VkaXRGb3JtUHJvcHMge1xuICBpbml0aWFsRGF0YT86IEJvb2tEYXRhO1xuICBvblN1Ym1pdD86IChkYXRhOiBCb29rRGF0YSkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEJvb2tFZGl0Rm9ybSh7IGluaXRpYWxEYXRhLCBvblN1Ym1pdCB9OiBCb29rRWRpdEZvcm1Qcm9wcykge1xuICBjb25zdCBbaXNTYXZpbmcsIHNldElzU2F2aW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCB7XG4gICAgcmVnaXN0ZXIsXG4gICAgaGFuZGxlU3VibWl0LFxuICAgIGNvbnRyb2wsXG4gICAgZm9ybVN0YXRlOiB7IGVycm9ycyB9LFxuICB9ID0gdXNlRm9ybTxCb29rRm9ybVZhbHVlc1R5cGU+KHtcbiAgICByZXNvbHZlcjogem9kUmVzb2x2ZXIoQm9va0Zvcm1TY2hlbWEpIGFzIGFueSxcbiAgICBkZWZhdWx0VmFsdWVzOiBjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMoaW5pdGlhbERhdGEpLFxuICB9KTtcblxuICBjb25zdCB7IGZpZWxkcywgYXBwZW5kLCByZW1vdmUgfSA9IHVzZUZpZWxkQXJyYXkoe1xuICAgIGNvbnRyb2wsXG4gICAgbmFtZTogXCJyZWNvbW1lbmRhdGlvbnNcIixcbiAgfSk7XG5cbiAgY29uc3QgaGFuZGxlRm9ybVN1Ym1pdCA9IChkYXRhOiBCb29rRm9ybVZhbHVlc1R5cGUpID0+IHtcbiAgICBzZXRJc1NhdmluZyh0cnVlKTtcblxuICAgIGNvbnN0IGJvb2tEYXRhID0gY29udmVydEZvcm1WYWx1ZXNUb0Jvb2tEYXRhKGRhdGEpO1xuXG4gICAgaWYgKG9uU3VibWl0KSB7XG4gICAgICBvblN1Ym1pdChib29rRGF0YSk7XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coJ0Rvbm7DqWVzIHNvdW1pc2VzOicsIGJvb2tEYXRhKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgc2V0SXNTYXZpbmcoZmFsc2UpO1xuICAgIH0sIDEwMDApO1xuICB9O1xuXG4gIGNvbnN0IGNvbnRhaW5lclZhcmlhbnRzID0ge1xuICAgIGhpZGRlbjogeyBvcGFjaXR5OiAwIH0sXG4gICAgdmlzaWJsZToge1xuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIHRyYW5zaXRpb246IHtcbiAgICAgICAgc3RhZ2dlckNoaWxkcmVuOiAwLjJcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaXRlbVZhcmlhbnRzID0ge1xuICAgIGhpZGRlbjogeyB5OiAyMCwgb3BhY2l0eTogMCB9LFxuICAgIHZpc2libGU6IHtcbiAgICAgIHk6IDAsXG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgdHJhbnNpdGlvbjoge1xuICAgICAgICB0eXBlOiAnc3ByaW5nJyxcbiAgICAgICAgc3RpZmZuZXNzOiAxMDAsXG4gICAgICAgIGRhbXBpbmc6IDEyXG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPG1vdGlvbi5mb3JtXG4gICAgICBpbml0aWFsPVwiaGlkZGVuXCJcbiAgICAgIGFuaW1hdGU9XCJ2aXNpYmxlXCJcbiAgICAgIHZhcmlhbnRzPXtjb250YWluZXJWYXJpYW50c31cbiAgICAgIG9uU3VibWl0PXtoYW5kbGVTdWJtaXQoaGFuZGxlRm9ybVN1Ym1pdCBhcyBhbnkpfVxuICAgICAgY2xhc3NOYW1lPVwic3BhY2UteS04IHJvdW5kZWQteGwgYmctZ3JhZGllbnQtdG8tYnIgZnJvbS1vcmFuZ2UtNTAgdG8tYW1iZXItNTAgcC04IHNoYWRvdy1sZyBib3JkZXIgYm9yZGVyLWFtYmVyLTEwMFwiXG4gICAgPlxuICAgICAgPEFjY29yZGlvbiB0eXBlPVwic2luZ2xlXCIgY29sbGFwc2libGUgIGNsYXNzTmFtZT1cInctZnVsbCBzcGFjZS15LTRcIj5cbiAgICAgIDxBY2NvcmRpb25JdGVtIHZhbHVlPVwiYXJyaXZhbFwiIGNsYXNzTmFtZT1cImJvcmRlci1ub25lXCIgPlxuICAgICAgICA8bW90aW9uLmRpdlxuICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiYmctd2hpdGUvODAgcm91bmRlZC1sZyBzaGFkb3ctc20gYm9yZGVyLWwtNCBib3JkZXItWyNmMDRjMjNdIG92ZXJmbG93LWhpZGRlblwiXG4gICAgICAgID5cbiAgICAgICAgICA8QWNjb3JkaW9uVHJpZ2dlciBjbGFzc05hbWU9XCJweC02IHB5LTQgaG92ZXI6bm8tdW5kZXJsaW5lIGhvdmVyOmJnLW9yYW5nZS01MC81MCB0cmFuc2l0aW9uLWFsbFwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC14bCBmb250LXNlbWlib2xkIHRleHQtWyNmMDRjMjNdIGZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAgICAgICAgICAgIDxQbGFuZSBjbGFzc05hbWU9XCJoLTUgdy01XCIgLz4gQXJyaXbDqWVcbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L0FjY29yZGlvblRyaWdnZXI+XG4gICAgICAgICAgPEFjY29yZGlvbkNvbnRlbnQgY2xhc3NOYW1lPVwicHgtNiBzcGFjZS15LTRcIj5cblxuICAgICAgICA8SW5wdXRGb3JtXG4gICAgICAgICAgbGFiZWw9XCJIZXVyZSBkJ2Fycml2w6llXCJcbiAgICAgICAgICBuYW1lPVwiYXJyaXZhbFRpbWVcIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRXg6IDE1OjAwXCJcbiAgICAgICAgICByZWdpc3Rlcj17cmVnaXN0ZXJ9XG4gICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAgICAgIC8+XG5cbiAgICAgICAgPElucHV0Rm9ybVxuICAgICAgICAgIGxhYmVsPVwiSW5zdHJ1Y3Rpb25zIGQnYWNjw6hzXCJcbiAgICAgICAgICBuYW1lPVwiYWNjZXNzSW5zdHJ1Y3Rpb25zXCJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIkNvbW1lbnQgYWNjw6lkZXIgYXUgbG9nZW1lbnRcIlxuICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgICAgICAgLz5cblxuICAgICAgICA8SW5wdXRGb3JtXG4gICAgICAgICAgbGFiZWw9XCJJbmZvcm1hdGlvbnMgc3VwcGzDqW1lbnRhaXJlc1wiXG4gICAgICAgICAgbmFtZT1cImFycml2YWxBZGRpdGlvbmFsSW5mb1wiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJBdXRyZXMgaW5mb3JtYXRpb25zIHV0aWxlcyBwb3VyIGwnYXJyaXbDqWVcIlxuICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgICAgICAgLz5cbiAgICAgICAgICA8L0FjY29yZGlvbkNvbnRlbnQ+XG4gICAgICAgIDwvbW90aW9uLmRpdj5cbiAgICAgIDwvQWNjb3JkaW9uSXRlbT5cblxuICAgICAgPEFjY29yZGlvbkl0ZW0gdmFsdWU9XCJkZXBhcnR1cmVcIiBjbGFzc05hbWU9XCJib3JkZXItbm9uZVwiPlxuICAgICAgICA8bW90aW9uLmRpdlxuICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiYmctd2hpdGUvODAgcm91bmRlZC1sZyBzaGFkb3ctc20gYm9yZGVyLWwtNCBib3JkZXItcGluay00MDAgb3ZlcmZsb3ctaGlkZGVuXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxBY2NvcmRpb25UcmlnZ2VyIGNsYXNzTmFtZT1cInB4LTYgcHktNCBob3Zlcjpuby11bmRlcmxpbmUgaG92ZXI6YmctcGluay01MC81MCB0cmFuc2l0aW9uLWFsbFwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC14bCBmb250LXNlbWlib2xkIHRleHQtcGluay01MDAgZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgICAgICAgICAgICAgPFBsYW5lIGNsYXNzTmFtZT1cImgtNSB3LTUgcm90YXRlLTE4MFwiIC8+IETDqXBhcnRcbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L0FjY29yZGlvblRyaWdnZXI+XG4gICAgICAgICAgPEFjY29yZGlvbkNvbnRlbnQgY2xhc3NOYW1lPVwicHgtNiBzcGFjZS15LTRcIj5cblxuICAgICAgICA8SW5wdXRGb3JtXG4gICAgICAgICAgbGFiZWw9XCJIZXVyZSBkZSBkw6lwYXJ0XCJcbiAgICAgICAgICBuYW1lPVwiZGVwYXJ0dXJlVGltZVwiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJFeDogMTE6MDBcIlxuICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgICAgICAgLz5cblxuICAgICAgICA8SW5wdXRGb3JtXG4gICAgICAgICAgbGFiZWw9XCJJbnN0cnVjdGlvbnMgZGUgc29ydGllXCJcbiAgICAgICAgICBuYW1lPVwiZXhpdEluc3RydWN0aW9uc1wiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJDb21tZW50IHF1aXR0ZXIgbGUgbG9nZW1lbnRcIlxuICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgICAgICAgLz5cblxuICAgICAgICA8SW5wdXRGb3JtXG4gICAgICAgICAgbGFiZWw9XCJJbmZvcm1hdGlvbnMgc3VwcGzDqW1lbnRhaXJlc1wiXG4gICAgICAgICAgbmFtZT1cImRlcGFydHVyZUFkZGl0aW9uYWxJbmZvXCJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIkF1dHJlcyBpbmZvcm1hdGlvbnMgdXRpbGVzIHBvdXIgbGUgZMOpcGFydFwiXG4gICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgICAgICAvPlxuICAgICAgICAgIDwvQWNjb3JkaW9uQ29udGVudD5cbiAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgICAgPC9BY2NvcmRpb25JdGVtPlxuXG4gICAgICA8QWNjb3JkaW9uSXRlbSB2YWx1ZT1cImFjY29tbW9kYXRpb25cIiBjbGFzc05hbWU9XCJib3JkZXItbm9uZVwiPlxuICAgICAgICA8bW90aW9uLmRpdlxuICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiYmctd2hpdGUvODAgcm91bmRlZC1sZyBzaGFkb3ctc20gYm9yZGVyLWwtNCBib3JkZXItYW1iZXItNDAwIG92ZXJmbG93LWhpZGRlblwiXG4gICAgICAgID5cbiAgICAgICAgICA8QWNjb3JkaW9uVHJpZ2dlciBjbGFzc05hbWU9XCJweC02IHB5LTQgaG92ZXI6bm8tdW5kZXJsaW5lIGhvdmVyOmJnLWFtYmVyLTUwLzUwIHRyYW5zaXRpb24tYWxsXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtc2VtaWJvbGQgdGV4dC1hbWJlci01MDAgZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgICAgICAgICAgICAgPEhvbWUgY2xhc3NOYW1lPVwiaC01IHctNVwiIC8+IEjDqWJlcmdlbWVudFxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvQWNjb3JkaW9uVHJpZ2dlcj5cbiAgICAgICAgICA8QWNjb3JkaW9uQ29udGVudCBjbGFzc05hbWU9XCJweC02IHNwYWNlLXktNFwiPlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMiBnYXAtNFwiPlxuICAgICAgICAgIDxJbnB1dEZvcm1cbiAgICAgICAgICAgIGxhYmVsPVwiTm9tIGR1IHLDqXNlYXUgV2lmaVwiXG4gICAgICAgICAgICBuYW1lPVwid2lmaU5hbWVcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJOb20gZHUgcsOpc2VhdSBXaWZpXCJcbiAgICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgICAgICAgIC8+XG5cbiAgICAgICAgICA8SW5wdXRGb3JtXG4gICAgICAgICAgICBsYWJlbD1cIk1vdCBkZSBwYXNzZSBXaWZpXCJcbiAgICAgICAgICAgIG5hbWU9XCJ3aWZpUGFzc3dvcmRcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJNb3QgZGUgcGFzc2UgV2lmaVwiXG4gICAgICAgICAgICByZWdpc3Rlcj17cmVnaXN0ZXJ9XG4gICAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktMlwiPlxuICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiaG91c2VSdWxlc1wiIGNsYXNzTmFtZT1cInRleHQtc20gZm9udC1tZWRpdW1cIj5cbiAgICAgICAgICAgIFLDqGdsZXMgZGUgbGEgbWFpc29uXG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8dGV4dGFyZWFcbiAgICAgICAgICAgIGlkPVwiaG91c2VSdWxlc1wiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudHJleiBjaGFxdWUgcsOoZ2xlIHN1ciB1bmUgbm91dmVsbGUgbGlnbmVcIlxuICAgICAgICAgICAgey4uLnJlZ2lzdGVyKCdob3VzZVJ1bGVzJyl9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2B3LWZ1bGwgbWluLWgtWzEwMHB4XSByb3VuZGVkLW1kIGJvcmRlciAke2Vycm9ycy5ob3VzZVJ1bGVzID8gJ2JvcmRlci1kZXN0cnVjdGl2ZScgOiAnYm9yZGVyLWlucHV0J30gYmctdHJhbnNwYXJlbnQgcHgtMyBweS0yIHRleHQtc20gc2hhZG93LXNtYH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQteHMgdGV4dC1tdXRlZC1mb3JlZ3JvdW5kXCI+RW50cmV6IGNoYXF1ZSByw6hnbGUgc3VyIHVuZSBub3V2ZWxsZSBsaWduZTwvcD5cbiAgICAgICAgICB7ZXJyb3JzLmhvdXNlUnVsZXMgJiYgKFxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LWRlc3RydWN0aXZlXCI+e2Vycm9ycy5ob3VzZVJ1bGVzLm1lc3NhZ2U/LnRvU3RyaW5nKCl9PC9wPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMiBnYXAtNFwiPlxuICAgICAgICAgIDxJbnB1dEZvcm1cbiAgICAgICAgICAgIGxhYmVsPVwiTm9tIGR1IHByb3ByacOpdGFpcmVcIlxuICAgICAgICAgICAgbmFtZT1cIm93bmVyTmFtZVwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlZvdHJlIG5vbVwiXG4gICAgICAgICAgICByZWdpc3Rlcj17cmVnaXN0ZXJ9XG4gICAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgICAgICAgICAvPlxuXG4gICAgICAgICAgPElucHV0Rm9ybVxuICAgICAgICAgICAgbGFiZWw9XCJDb250YWN0IGR1IHByb3ByacOpdGFpcmVcIlxuICAgICAgICAgICAgbmFtZT1cIm93bmVyQ29udGFjdFwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlZvdHJlIG51bcOpcm8gZGUgdMOpbMOpcGhvbmVcIlxuICAgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPElucHV0Rm9ybVxuICAgICAgICAgIGxhYmVsPVwiSW5mb3JtYXRpb25zIGfDqW7DqXJhbGVzXCJcbiAgICAgICAgICBuYW1lPVwiZ2VuZXJhbEluZm9cIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiQXV0cmVzIGluZm9ybWF0aW9ucyB1dGlsZXMgc3VyIGxlIGxvZ2VtZW50XCJcbiAgICAgICAgICByZWdpc3Rlcj17cmVnaXN0ZXJ9XG4gICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAgICAgIC8+XG4gICAgICAgICAgPC9BY2NvcmRpb25Db250ZW50PlxuICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAgICA8L0FjY29yZGlvbkl0ZW0+XG5cbiAgICAgIDxBY2NvcmRpb25JdGVtIHZhbHVlPVwicmVjb21tZW5kYXRpb25zXCIgY2xhc3NOYW1lPVwiYm9yZGVyLW5vbmVcIj5cbiAgICAgICAgPG1vdGlvbi5kaXZcbiAgICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxuICAgICAgICAgIGNsYXNzTmFtZT1cImJnLXdoaXRlLzgwIHJvdW5kZWQtbGcgc2hhZG93LXNtIGJvcmRlci1sLTQgYm9yZGVyLXRlYWwtNDAwIG92ZXJmbG93LWhpZGRlblwiXG4gICAgICAgID5cbiAgICAgICAgICA8QWNjb3JkaW9uVHJpZ2dlciBjbGFzc05hbWU9XCJweC02IHB5LTQgaG92ZXI6bm8tdW5kZXJsaW5lIGhvdmVyOmJnLXRlYWwtNTAvNTAgdHJhbnNpdGlvbi1hbGxcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQteGwgZm9udC1zZW1pYm9sZCB0ZXh0LXRlYWwtNjAwIGZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAgICAgICAgICAgIDxNYXBQaW4gY2xhc3NOYW1lPVwiaC01IHctNVwiIC8+IFJlY29tbWFuZGF0aW9uc1xuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvQWNjb3JkaW9uVHJpZ2dlcj5cbiAgICAgICAgICA8QWNjb3JkaW9uQ29udGVudCBjbGFzc05hbWU9XCJweC02IHNwYWNlLXktNFwiPlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LXRlYWwtNzAwLzcwXCI+QWpvdXRleiBkZXMgcmVjb21tYW5kYXRpb25zIHBvdXIgdm9zIGludml0w6lzIChyZXN0YXVyYW50cywgYWN0aXZpdMOpcywgYmFycywgZXRjLik8L3A+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTRcIj5cbiAgICAgICAgICB7ZmllbGRzLm1hcCgoZmllbGQsIGluZGV4KSA9PiAoXG4gICAgICAgICAgICA8UmVjb21tZW5kYXRpb25cbiAgICAgICAgICAgICAga2V5PXtmaWVsZC5pZH1cbiAgICAgICAgICAgICAgZmllbGQ9e2ZpZWxkfVxuICAgICAgICAgICAgICBpbmRleD17aW5kZXh9XG4gICAgICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgICAgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAgICAgICAgICAgIHJlbW92ZT17cmVtb3ZlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApKX1cblxuICAgICAgICAgIDxtb3Rpb24uYnV0dG9uXG4gICAgICAgICAgICB3aGlsZUhvdmVyPXt7IHNjYWxlOiAxLjAyIH19XG4gICAgICAgICAgICB3aGlsZVRhcD17eyBzY2FsZTogMC45OCB9fVxuICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBhcHBlbmQoeyBuYW1lOiAnJywgdHlwZTogJycgYXMgYW55LCBhZGRyZXNzOiAnJywgZGVzY3JpcHRpb246ICcnIH0pfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgdy1mdWxsIHB5LTMgcHgtNCBib3JkZXIgYm9yZGVyLWRhc2hlZCByb3VuZGVkLW1kIGJnLWdyYWRpZW50LXRvLXIgZnJvbS10ZWFsLTQwMCB0by10ZWFsLTMwMCB0ZXh0LXdoaXRlIGhvdmVyOmZyb20tdGVhbC01MDAgaG92ZXI6dG8tdGVhbC00MDAgdHJhbnNpdGlvbi1hbGwgc2hhZG93LXNtIGN1cnNvci1wb2ludGVyXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8UGx1c0NpcmNsZSBzaXplPXsxOH0gY2xhc3NOYW1lPVwibXItMlwiIC8+XG4gICAgICAgICAgICBBam91dGVyIHVuZSByZWNvbW1hbmRhdGlvblxuICAgICAgICAgIDwvbW90aW9uLmJ1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9BY2NvcmRpb25Db250ZW50PlxuICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAgICA8L0FjY29yZGlvbkl0ZW0+XG4gICAgICA8L0FjY29yZGlvbj5cblxuICAgICAgPG1vdGlvbi5kaXZcbiAgICAgICAgdmFyaWFudHM9e2l0ZW1WYXJpYW50c31cbiAgICAgICAgY2xhc3NOYW1lPVwiZmxleCBqdXN0aWZ5LWVuZCBtdC04XCJcbiAgICAgID5cbiAgICAgICAgPG1vdGlvbi5idXR0b25cbiAgICAgICAgICB3aGlsZUhvdmVyPXt7IHNjYWxlOiAxLjA1IH19XG4gICAgICAgICAgd2hpbGVUYXA9e3sgc2NhbGU6IDAuOTUgfX1cbiAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICBkaXNhYmxlZD17aXNTYXZpbmd9XG4gICAgICAgICAgY2xhc3NOYW1lPVwicHgtNiBweS0zIGJnLWdyYWRpZW50LXRvLXIgZnJvbS1bI2YwNGMyM10gdG8tcGluay01MDAgdGV4dC13aGl0ZSByb3VuZGVkLW1kIGhvdmVyOmZyb20tWyNmMDRjMjNdIGhvdmVyOnRvLXBpbmstNDAwIHRyYW5zaXRpb24tYWxsIHNoYWRvdy1tZCBkaXNhYmxlZDpvcGFjaXR5LTUwIGZvbnQtbWVkaXVtXCJcbiAgICAgICAgPlxuICAgICAgICAgIHtpc1NhdmluZyA/ICdDcsOpYXRpb24gZW4gY291cnMuLi4nIDogJ0Nyw6llciBtb24gbGl2cmV0J31cbiAgICAgICAgPC9tb3Rpb24uYnV0dG9uPlxuICAgICAgPC9tb3Rpb24uZGl2PlxuICAgIDwvbW90aW9uLmZvcm0+XG4gICk7XG59XG4uLi5cblBhdGg6IHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4XG4ndXNlIGNsaWVudCc7XG5cbmltcG9ydCB7IEJvb2tFZGl0Rm9ybSB9IGZyb20gJ0AvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0nO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJvb2tEYXRhIH0gZnJvbSAnQC90eXBlcy9Cb29rRGF0YSc7XG5pbXBvcnQgeyBtb3Rpb24gfSBmcm9tICdmcmFtZXItbW90aW9uJztcbmltcG9ydCB7IFBhbG10cmVlLCBCb29rLCBTdW4gfSBmcm9tICdsdWNpZGUtcmVhY3QnO1xuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9uYXZpZ2F0aW9uJztcbmltcG9ydCB7UGFzc3dvcmREaXNwbGF5fSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50cy9QYXNzd29yZERpc3BsYXlcIjtcblxuZnVuY3Rpb24gRWRpdEZvcm1Cb29rKCkge1xuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcbiAgY29uc3QgW2Jvb2tEYXRhLCBzZXRCb29rRGF0YV0gPSB1c2VTdGF0ZTxCb29rRGF0YSB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSk7XG5cbiAgY29uc3QgY29udGFpbmVyVmFyaWFudHMgPSB7XG4gICAgaGlkZGVuOiB7IG9wYWNpdHk6IDAgfSxcbiAgICB2aXNpYmxlOiB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgdHJhbnNpdGlvbjoge1xuICAgICAgICBzdGFnZ2VyQ2hpbGRyZW46IDAuMlxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCBpdGVtVmFyaWFudHMgPSB7XG4gICAgaGlkZGVuOiB7IHk6IDIwLCBvcGFjaXR5OiAwIH0sXG4gICAgdmlzaWJsZToge1xuICAgICAgeTogMCxcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICB0cmFuc2l0aW9uOiB7XG4gICAgICAgIHR5cGU6ICdzcHJpbmcnLFxuICAgICAgICBzdGlmZm5lc3M6IDEwMCxcbiAgICAgICAgZGFtcGluZzogMTJcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBzdG9yZWREYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2Jvb2tEYXRhJyk7XG4gICAgaWYgKHN0b3JlZERhdGEpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZERhdGEgPSBKU09OLnBhcnNlKHN0b3JlZERhdGEpO1xuICAgICAgICBzZXRCb29rRGF0YShwYXJzZWREYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBsb3JzIGRlIGxhIHLDqWN1cMOpcmF0aW9uIGRlcyBkb25uw6llczonLCBlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxtb3Rpb24uc2VjdGlvblxuICAgICAgaW5pdGlhbD1cImhpZGRlblwiXG4gICAgICBhbmltYXRlPVwidmlzaWJsZVwiXG4gICAgICB2YXJpYW50cz17Y29udGFpbmVyVmFyaWFudHN9XG4gICAgICBjbGFzc05hbWU9XCJtaW4taC1zY3JlZW4gdy1mdWxsIGJnLWdyYWRpZW50LXRvLWIgZnJvbS1vcmFuZ2UtNTAgdG8tYW1iZXItMTAwIHB5LTEyXCJcbiAgICA+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lciBteC1hdXRvIHB4LTRcIj5cbiAgICAgICAgPG1vdGlvbi5kaXZcbiAgICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxuICAgICAgICAgIGNsYXNzTmFtZT1cInctZnVsbCBtYXgtdy00eGwgbXgtYXV0byBwLTggc3BhY2UteS04IGJnLWdyYWRpZW50LXRvLWIgZnJvbS13aGl0ZSB0by1hbWJlci01MCByb3VuZGVkLXhsIHNoYWRvdy1sZyBib3JkZXIgYm9yZGVyLWFtYmVyLTEwMFwiXG4gICAgICAgID5cbiAgICAgICAgICA8bW90aW9uLmRpdlxuICAgICAgICAgICAgdmFyaWFudHM9e2l0ZW1WYXJpYW50c31cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInRleHQtY2VudGVyIHNwYWNlLXktMlwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBnYXAtMyBtYi00XCI+XG4gICAgICAgICAgICAgIDxQYWxtdHJlZSBjbGFzc05hbWU9XCJoLTggdy04IHRleHQtWyNmMDRjMjNdXCIgLz5cbiAgICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQtM3hsIGZvbnQtYm9sZCBiZy1ncmFkaWVudC10by1yIGZyb20tWyNmMDRjMjNdIHRvLXBpbmstNTAwIGJnLWNsaXAtdGV4dCB0ZXh0LXRyYW5zcGFyZW50XCI+XG4gICAgICAgICAgICAgICAgVm90cmUgTGl2cmV0IGQnQWNjdWVpbFxuICAgICAgICAgICAgICA8L2gyPlxuICAgICAgICAgICAgICA8U3VuIGNsYXNzTmFtZT1cImgtOCB3LTggdGV4dC1hbWJlci00MDBcIiAvPlxuICAgICAgICAgICAgPC9kaXY+XG4uLi5cblxuICAgICAgICAgIHtpc0xvYWRpbmcgPyAoXG4gICAgICAgICAgICA8bW90aW9uLmRpdlxuICAgICAgICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlciBweS0xMiBmbGV4IGZsZXgtY29sIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBzcGFjZS15LTRcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8Qm9vayBjbGFzc05hbWU9XCJoLTEyIHctMTIgdGV4dC1hbWJlci00MDAgYW5pbWF0ZS1wdWxzZVwiIC8+XG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtbGcgdGV4dC1ncmF5LTYwMFwiPkNoYXJnZW1lbnQgZGUgdm90cmUgbGl2cmV0Li4uPC9wPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctNjQgaC0yIGJnLWdyYXktMjAwIHJvdW5kZWQtZnVsbCBvdmVyZmxvdy1oaWRkZW5cIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImgtZnVsbCBiZy1ncmFkaWVudC10by1yIGZyb20tWyNmMDRjMjNdIHRvLXBpbmstNTAwIGFuaW1hdGUtW2xvYWRpbmdfMS41c19lYXNlLWluLW91dF9pbmZpbml0ZV1cIiBzdHlsZT17eyB3aWR0aDogJzcwJScgfX0+PC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8bW90aW9uLmRpdiB2YXJpYW50cz17aXRlbVZhcmlhbnRzfSBjbGFzc05hbWU9XCJzcGFjZS15LThcIj5cbiAgICAgICAgICAgICAgey8qIEFmZmljaGFnZSBkdSBtb3QgZGUgcGFzc2UgKi99XG4gICAgICAgICAgICAgIHtib29rRGF0YT8uYWNjZXNzUGFzc3dvcmQgJiYgYm9va0RhdGE/LmlkICYmIChcbiAgICAgICAgICAgICAgICA8bW90aW9uLmRpdiB2YXJpYW50cz17aXRlbVZhcmlhbnRzfT5cbiAgICAgICAgICAgICAgICAgIDxQYXNzd29yZERpc3BsYXkgcGFzc3dvcmQ9e2Jvb2tEYXRhLmFjY2Vzc1Bhc3N3b3JkfSBib29rSWQ9e2Jvb2tEYXRhLmlkfSAvPlxuICAgICAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAgICA8Qm9va0VkaXRGb3JtXG4gICAgICAgICAgICAgICAgaW5pdGlhbERhdGE9e2Jvb2tEYXRhIHx8IHVuZGVmaW5lZH1cbiAgICAgICAgICAgICAgICBvblN1Ym1pdD17KGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEb25uw6llcyBkdSBmb3JtdWxhaXJlIHNvdW1pc2VzOicsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3Ryw6llcyBhdmVjIHN1Y2PDqHMhJyk7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgICAgICAgICApfVxuICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPHN0eWxlIGpzeCBnbG9iYWw+e2BcbiAgICAgICAgQGtleWZyYW1lcyBsb2FkaW5nIHtcbiAgICAgICAgICAwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTAwJSk7IH1cbiAgICAgICAgICA1MCUgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMzAlKTsgfVxuICAgICAgICAgIDEwMCUgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMTAwJSk7IH1cbiAgICAgICAgfVxuICAgICAgYH08L3N0eWxlPlxuICAgIDwvbW90aW9uLnNlY3Rpb24+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEVkaXRGb3JtQm9vazsuLi5cblBhdGg6IHNyYy9jb21wb25lbnRzL1NpbXBsZUZvcm0udHN4XG5cInVzZSBjbGllbnRcIjtcblxuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlRm9ybSB9IGZyb20gXCJyZWFjdC1ob29rLWZvcm1cIjtcbmltcG9ydCB7IHpvZFJlc29sdmVyIH0gZnJvbSBcIkBob29rZm9ybS9yZXNvbHZlcnMvem9kXCI7XG5pbXBvcnQgeyBJbnB1dCB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvaW5wdXRcIjtcbmltcG9ydCBMaW5rIGZyb20gXCJuZXh0L2xpbmtcIjtcbmltcG9ydCB7IE1haW5Gb3JtU2NoZW1hLCBNYWluRm9ybVZhbHVlc1R5cGUgfSBmcm9tIFwiLi9zY2hlbWFzL01haW5Gb3JtU2NoZW1hXCI7XG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tIFwibmV4dC9uYXZpZ2F0aW9uXCI7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgeyBCb29rRGF0YSB9IGZyb20gXCJAL3R5cGVzL0Jvb2tEYXRhXCI7XG5pbXBvcnQgeyBtb3Rpb24gfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiO1xuaW1wb3J0IHsgRmlsZVVwLCBMaW5rMiwgUGFsbXRyZWUsIFN1biwgVXBsb2FkIH0gZnJvbSBcImx1Y2lkZS1yZWFjdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gU2ltcGxlRm9ybSgpIHtcbiAgY29uc3QgW2lzU3VibWl0dGVkLCBzZXRJc1N1Ym1pdHRlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtmaWxlTmFtZSwgc2V0RmlsZU5hbWVdID0gdXNlU3RhdGU8c3RyaW5nPihcIlwiKTtcbiAgY29uc3QgW2ZpbGVJbmZvLCBzZXRGaWxlSW5mb10gPSB1c2VTdGF0ZTx7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHR5cGU6IHN0cmluZztcbiAgICBzaXplOiBzdHJpbmc7XG4gIH0gfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2Jvb2tEYXRhLCBzZXRCb29rRGF0YV0gPSB1c2VTdGF0ZTxCb29rRGF0YSB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcblxuICAvLyBEw6lmaW5pciBsZXMgYW5pbWF0aW9uc1xuICBjb25zdCBjb250YWluZXJWYXJpYW50cyA9IHtcbiAgICBoaWRkZW46IHsgb3BhY2l0eTogMCB9LFxuICAgIHZpc2libGU6IHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICB0cmFuc2l0aW9uOiB7XG4gICAgICAgIHN0YWdnZXJDaGlsZHJlbjogMC4yXG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGl0ZW1WYXJpYW50cyA9IHtcbiAgICBoaWRkZW46IHsgeTogMjAsIG9wYWNpdHk6IDAgfSxcbiAgICB2aXNpYmxlOiB7XG4gICAgICB5OiAwLFxuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIHRyYW5zaXRpb246IHtcbiAgICAgICAgdHlwZTogJ3NwcmluZycsXG4gICAgICAgIHN0aWZmbmVzczogMTAwLFxuICAgICAgICBkYW1waW5nOiAxMlxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCB7XG4gICAgcmVnaXN0ZXIsXG4gICAgaGFuZGxlU3VibWl0LFxuICAgIHNldFZhbHVlLFxuICAgIGZvcm1TdGF0ZTogeyBlcnJvcnMsIGlzU3VibWl0dGluZyB9LFxuICAgIHdhdGNoLFxuICB9ID0gdXNlRm9ybTxNYWluRm9ybVZhbHVlc1R5cGU+KHtcbiAgICByZXNvbHZlcjogem9kUmVzb2x2ZXIoTWFpbkZvcm1TY2hlbWEpLFxuICAgIGRlZmF1bHRWYWx1ZXM6IHtcbiAgICAgIHVybDogXCJcIixcbiAgICB9LFxuICAgIG1vZGU6IFwib25DaGFuZ2VcIixcbiAgfSk7XG5cblxuICBjb25zdCBvblN1Ym1pdCA9IChkYXRhOiBNYWluRm9ybVZhbHVlc1R5cGUpID0+IHtcbiAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgY29uc3QgaGFzRmlsZSA9IGRhdGEuZmlsZSAmJiBkYXRhLmZpbGUubGVuZ3RoID4gMDtcblxuICAgIGlmICghaGFzRmlsZSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycmV1cjogQXVjdW4gZmljaGllciBuJ2VzdCBzw6lsZWN0aW9ubsOpXCIpO1xuICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4uLi5cblBhdGg6IHNyYy9jb21wb25lbnRzL3NjaGVtYXMvQm9va0Zvcm1TY2hlbWEudHNcbmltcG9ydCB7IHogfSBmcm9tIFwiem9kXCI7XG5pbXBvcnQgeyBSZWNvbW1lbmRhdGlvblR5cGUgfSBmcm9tIFwiQC90eXBlcy9Cb29rRGF0YVwiO1xuXG4vLyBTY2jDqW1hIHBvdXIgbGVzIHJlY29tbWFuZGF0aW9uc1xuY29uc3QgcmVjb21tZW5kYXRpb25TY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGlkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIG5hbWU6IHouc3RyaW5nKCkubWluKDEsIFwiTGUgbm9tIGVzdCByZXF1aXNcIiksXG4gIGFkZHJlc3M6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgZGVzY3JpcHRpb246IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgdHlwZTogei5uYXRpdmVFbnVtKFJlY29tbWVuZGF0aW9uVHlwZSlcbn0pO1xuXG4vLyBTY2jDqW1hIGRlIHZhbGlkYXRpb24gcG91ciBsZSBmb3JtdWxhaXJlXG5leHBvcnQgY29uc3QgQm9va0Zvcm1TY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGlkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIFxuICAvLyBBcnJpdsOpZVxuICBhcnJpdmFsVGltZTogei5zdHJpbmcoKS5taW4oMSwgXCJMJ2hldXJlIGQnYXJyaXbDqWUgZXN0IHJlcXVpc2VcIiksXG4gIGFjY2Vzc0luc3RydWN0aW9uczogei5zdHJpbmcoKS5taW4oMSwgXCJMZXMgaW5zdHJ1Y3Rpb25zIGQnYWNjw6hzIHNvbnQgcmVxdWlzZXNcIiksXG4gIGFycml2YWxBZGRpdGlvbmFsSW5mbzogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBcbiAgLy8gRMOpcGFydFxuICBkZXBhcnR1cmVUaW1lOiB6LnN0cmluZygpLm1pbigxLCBcIkwnaGV1cmUgZGUgZMOpcGFydCBlc3QgcmVxdWlzZVwiKSxcbiAgZXhpdEluc3RydWN0aW9uczogei5zdHJpbmcoKS5taW4oMSwgXCJMZXMgaW5zdHJ1Y3Rpb25zIGRlIHNvcnRpZSBzb250IHJlcXVpc2VzXCIpLFxuICBkZXBhcnR1cmVBZGRpdGlvbmFsSW5mbzogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBcbiAgLy8gSMOpYmVyZ2VtZW50XG4gIHdpZmlOYW1lOiB6LnN0cmluZygpLm1pbigxLCBcIkxlIG5vbSBkdSByw6lzZWF1IFdpRmkgZXN0IHJlcXVpc1wiKSxcbiAgd2lmaVBhc3N3b3JkOiB6LnN0cmluZygpLm1pbigxLCBcIkxlIG1vdCBkZSBwYXNzZSBXaUZpIGVzdCByZXF1aXNcIiksXG4gIGhvdXNlUnVsZXM6IHouc3RyaW5nKCkubWluKDEsIFwiTGVzIHLDqGdsZXMgZGUgbGEgbWFpc29uIHNvbnQgcmVxdWlzZXNcIiksXG4gIG93bmVyQ29udGFjdDogei5zdHJpbmcoKS5taW4oMSwgXCJMZSBjb250YWN0IGR1IHByb3ByacOpdGFpcmUgZXN0IHJlcXVpc1wiKSxcbiAgb3duZXJOYW1lOiB6LnN0cmluZygpLm1pbigxLCBcIkxlIG5vbSBkdSBwcm9wcmnDqXRhaXJlIGVzdCByZXF1aXNcIiksXG4gIGdlbmVyYWxJbmZvOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIFxuICAvLyBSZWNvbW1hbmRhdGlvbnNcbiAgcmVjb21tZW5kYXRpb25zOiB6LmFycmF5KHJlY29tbWVuZGF0aW9uU2NoZW1hKS5vcHRpb25hbCgpLmRlZmF1bHQoW10pXG59KTtcblxuZXhwb3J0IHR5cGUgQm9va0Zvcm1WYWx1ZXNUeXBlID0gei5pbmZlcjx0eXBlb2YgQm9va0Zvcm1TY2hlbWE+O1xuLi4uXG5QYXRoOiBzcmMvY29tcG9uZW50cy9zY2hlbWFzL01haW5Gb3JtU2NoZW1hLnRzXG5pbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuXG5leHBvcnQgY29uc3QgTWFpbkZvcm1TY2hlbWEgPSB6Lm9iamVjdCh7XG4gIHVybDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBmaWxlOiB6LmFueSgpXG4gICAgLm9wdGlvbmFsKClcbiAgICAudHJhbnNmb3JtKHZhbCA9PiB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH0pXG4gICAgLnN1cGVyUmVmaW5lKChmaWxlcywgY3R4KSA9PiB7XG5cbiAgICAgIGlmIChmaWxlcyAmJiBmaWxlcyBpbnN0YW5jZW9mIEZpbGVMaXN0ICYmIGZpbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgZmlsZSA9IGZpbGVzWzBdO1xuICAgICAgICBjb25zb2xlLmxvZygnRmljaGllciBkw6l0ZWN0w6kgZGFucyBzdXBlclJlZmluZTonLCBmaWxlLm5hbWUsIGZpbGUudHlwZSk7XG5cbiAgICAgICAgaWYgKGZpbGUudHlwZSAhPT0gJ2FwcGxpY2F0aW9uL3BkZicpIHtcbiAgICAgICAgICBjdHguYWRkSXNzdWUoe1xuICAgICAgICAgICAgY29kZTogei5ab2RJc3N1ZUNvZGUuY3VzdG9tLFxuICAgICAgICAgICAgbWVzc2FnZTogXCJMZSBmaWNoaWVyIGRvaXQgw6p0cmUgYXUgZm9ybWF0IFBERlwiLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbn0pLnN1cGVyUmVmaW5lKChkYXRhLCBjdHgpID0+IHtcbiAgY29uc3QgaGFzVXJsID0gZGF0YS51cmwgJiYgZGF0YS51cmwudHJpbSgpICE9PSAnJztcbiAgY29uc3QgaGFzRmlsZSA9IGRhdGEuZmlsZSAmJiBkYXRhLmZpbGUgaW5zdGFuY2VvZiBGaWxlTGlzdCAmJiBkYXRhLmZpbGUubGVuZ3RoID4gMDtcblxuXG4gIC8vIFbDqXJpZmllciBxdSdleGFjdGVtZW50IHVuIGRlcyBkZXV4IGNoYW1wcyBlc3QgcmVtcGxpXG4gIGlmICghaGFzVXJsICYmICFoYXNGaWxlKSB7XG4gICAgLy8gQXVjdW4gY2hhbXAgcmVtcGxpXG4gICAgY3R4LmFkZElzc3VlKHtcbiAgICAgIGNvZGU6IHouWm9kSXNzdWVDb2RlLmN1c3RvbSxcbiAgICAgIG1lc3NhZ2U6IFwiVmV1aWxsZXogZm91cm5pciB1bmUgVVJMIG91IGltcG9ydGVyIHVuIGZpY2hpZXIgUERGXCIsXG4gICAgICBwYXRoOiBbJ3VybCddLFxuICAgIH0pO1xuICB9IGVsc2UgaWYgKGhhc1VybCAmJiBoYXNGaWxlKSB7XG4gICAgLy8gTGVzIGRldXggY2hhbXBzIHNvbnQgcmVtcGxpc1xuICAgIGN0eC5hZGRJc3N1ZSh7XG4gICAgICBjb2RlOiB6LlpvZElzc3VlQ29kZS5jdXN0b20sXG4gICAgICBtZXNzYWdlOiBcIlZldWlsbGV6IGZvdXJuaXIgc29pdCB1bmUgVVJMLCBzb2l0IHVuIGZpY2guLi4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxNUhEa0M2Z29mRE5Bb1dEUzVXTE11MyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250IiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjMsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifX19XSwicmVzcG9uc2VfdGV4dCI6IiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJjMjQ4ZjM5NC1jMTMyLTRmNTQtYjNiNy0yZTBkMGZkY2QyMWMiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxR3pVVk1KaUVNNW11d1lGdUJmcVo0cyIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4XCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJNYWludGVuYW50IHF1ZSBqJ2FpIHVuZSBib25uZSBjb21wcsOpaGVuc2lvbiBkZXMgZmljaGllcnMgY29uY2VybsOpcywgamUgdmFpcyDDqWxhYm9yZXIgdW4gcGxhbiBkw6l0YWlsbMOpIHBvdXIgaW1wbMOpbWVudGVyIGxlcyBtb2RpZmljYXRpb25zIGRlbWFuZMOpZXMuXG5cbiMjIFBsYW4gZCdhY3Rpb25cblxuMS4gKipNb2RpZmllciBsZSBjb21wb3NhbnQgQm9va0VkaXRGb3JtLnRzeCoqIHBvdXIgOlxuICAgLSBBam91dGVyIHVuIMOpdGF0IHBvdXIgc3VpdnJlIHNpIGRlcyBtb2RpZmljYXRpb25zIG9udCDDqXTDqSBlZmZlY3R1w6llc1xuICAgLSBDaGFuZ2VyIGxlIHRleHRlIGR1IGJvdXRvbiBlbiBmb25jdGlvbiBkZSBsJ8OpdGF0IGRlcyBtb2RpZmljYXRpb25zXG4gICAtIEltcGzDqW1lbnRlciBsYSBsb2dpcXVlIGRlIHJlZGlyZWN0aW9uIHZlcnMgbGEgcGFnZSBkJ2FjY3VlaWwgc2kgYXVjdW5lIG1vZGlmaWNhdGlvbiBuJ2Egw6l0w6kgZmFpdGVcbiAgIC0gSW1wbMOpbWVudGVyIGxhIHJlcXXDqnRlIFBVVCB2ZXJzIGwnQVBJIHBvdXIgbWV0dHJlIMOgIGpvdXIgbGVzIGRvbm7DqWVzXG5cbjIuICoqTW9kaWZpZXIgbGUgZmljaGllciBvd25lci1lZGl0LWJvb2svcGFnZS50c3gqKiBwb3VyIDpcbiAgIC0gTWV0dHJlIMOgIGpvdXIgbGUgc3RhdGUgYm9va0RhdGEgYXZlYyBsZXMgZG9ubsOpZXMgcsOpY3Vww6lyw6llcyBhcHLDqHMgbGEgbWlzZSDDoCBqb3VyXG5cblZvaWNpIGxlIHBsYW4gZMOpdGFpbGzDqSBkZXMgbW9kaWZpY2F0aW9ucyDDoCBhcHBvcnRlciA6XG5cbiMjIyAxLiBNb2RpZmljYXRpb24gZGUgc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeFxuLSBBam91dGVyIHVuIMOpdGF0IGBpc01vZGlmaWVkYCBwb3VyIHN1aXZyZSBzaSBkZXMgbW9kaWZpY2F0aW9ucyBvbnQgw6l0w6kgZWZmZWN0dcOpZXNcbi0gQWpvdXRlciB1biBob29rIGB1c2VSb3V0ZXJgIHBvdXIgZ8OpcmVyIGxhIHJlZGlyZWN0aW9uXG4tIE1vZGlmaWVyIGxhIGZvbmN0aW9uIGBoYW5kbGVGb3JtU3VibWl0YCBwb3VyIDpcbiAgLSBWw6lyaWZpZXIgc2kgZGVzIG1vZGlmaWNhdGlvbnMgb250IMOpdMOpIGVmZmVjdHXDqWVzXG4gIC0gUmVkaXJpZ2VyIHZlcnMgbGEgcGFnZSBkJ2FjY3VlaWwgc2kgYXVjdW5lIG1vZGlmaWNhdGlvbiBuJ2Egw6l0w6kgZmFpdGVcbiAgLSBFbnZveWVyIHVuZSByZXF1w6p0ZSBQVVQgw6AgbCdBUEkgc2kgZGVzIG1vZGlmaWNhdGlvbnMgb250IMOpdMOpIGVmZmVjdHXDqWVzXG4tIE1vZGlmaWVyIGxlIHRleHRlIGR1IGJvdXRvbiBlbiBmb25jdGlvbiBkZSBsJ8OpdGF0IGRlcyBtb2RpZmljYXRpb25zXG5cbiMjIyAyLiBNb2RpZmljYXRpb24gZGUgc3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3hcbi0gTW9kaWZpZXIgbGEgZm9uY3Rpb24gYG9uU3VibWl0YCBwb3VyIG1ldHRyZSDDoCBqb3VyIGxlIHN0YXRlIGBib29rRGF0YWAgYXZlYyBsZXMgZG9ubsOpZXMgcsOpY3Vww6lyw6llc1xuLSBTYXV2ZWdhcmRlciBsZXMgZG9ubsOpZXMgbWlzZXMgw6Agam91ciBkYW5zIGxlIGxvY2FsU3RvcmFnZVxuXG5Db21tZW7Dp29ucyBwYXIgaW1wbMOpbWVudGVyIGNlcyBtb2RpZmljYXRpb25zLlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogc3JjL3R5cGVzL0Jvb2tEYXRhLnRzXG5leHBvcnQgZW51bSBSZWNvbW1lbmRhdGlvblR5cGUge1xuICBSRVNUQVVSQU5UID0gJ1JFU1RBVVJBTlQnLFxuICBBQ1RJVklUWSA9ICdBQ1RJVklUWScsXG4gIEJBUiA9ICdCQVInLFxuICBUT1VSSVNNID0gJ1RPVVJJU00nLFxuICBHUk9DRVJZID0gJ0dST0NFUlknXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVjb21tZW5kYXRpb24ge1xuICBpZD86IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBhZGRyZXNzPzogc3RyaW5nO1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgdHlwZTogUmVjb21tZW5kYXRpb25UeXBlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJvb2tEYXRhIHtcbiAgaWQ/OiBzdHJpbmc7XG5cbiAgLy8gQXJyaXbDqWVcbiAgYXJyaXZhbFRpbWU6IHN0cmluZztcbiAgYWNjZXNzSW5zdHJ1Y3Rpb25zOiBzdHJpbmc7XG4gIGFycml2YWxBZGRpdGlvbmFsSW5mbzogc3RyaW5nO1xuXG4gIC8vIETDqXBhcnRcbiAgZGVwYXJ0dXJlVGltZTogc3RyaW5nO1xuICBleGl0SW5zdHJ1Y3Rpb25zOiBzdHJpbmc7XG4gIGRlcGFydHVyZUFkZGl0aW9uYWxJbmZvOiBzdHJpbmc7XG5cbiAgLy8gSMOpYmVyZ2VtZW50XG4gIHdpZmlOYW1lOiBzdHJpbmc7XG4gIHdpZmlQYXNzd29yZDogc3RyaW5nO1xuICBob3VzZVJ1bGVzOiBzdHJpbmc7XG4gIG93bmVyQ29udGFjdDogc3RyaW5nO1xuICBvd25lck5hbWU6IHN0cmluZztcbiAgZ2VuZXJhbEluZm86IHN0cmluZztcblxuICAvLyBTw6ljdXJpdMOpXG4gIGFjY2Vzc1Bhc3N3b3JkPzogc3RyaW5nO1xuXG4gIC8vIFJlY29tbWFuZGF0aW9uc1xuICByZWNvbW1lbmRhdGlvbnM6IFJlY29tbWVuZGF0aW9uW107XG59XG4uLi5cblBhdGg6IHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3hcbid1c2UgY2xpZW50JztcblxuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VGb3JtLCB1c2VGaWVsZEFycmF5IH0gZnJvbSAncmVhY3QtaG9vay1mb3JtJztcbmltcG9ydCB7IHpvZFJlc29sdmVyIH0gZnJvbSAnQGhvb2tmb3JtL3Jlc29sdmVycy96b2QnO1xuaW1wb3J0IHsgQm9va0RhdGEgfSBmcm9tICdAL3R5cGVzL0Jvb2tEYXRhJztcbmltcG9ydCB7IEJvb2tGb3JtU2NoZW1hLCBCb29rRm9ybVZhbHVlc1R5cGUgfSBmcm9tICcuL3NjaGVtYXMvQm9va0Zvcm1TY2hlbWEnO1xuaW1wb3J0IElucHV0Rm9ybSBmcm9tICcuL0lucHV0Rm9ybSc7XG5pbXBvcnQgeyBQbHVzQ2lyY2xlLCBQYWxtdHJlZSwgUGxhbmUsIEhvbWUsIE1hcFBpbiB9IGZyb20gJ2x1Y2lkZS1yZWFjdCc7XG5pbXBvcnQgUmVjb21tZW5kYXRpb24gZnJvbSAnLi9SZWNvbW1lbmRhdGlvbic7XG5pbXBvcnQgeyBtb3Rpb24gfSBmcm9tICdmcmFtZXItbW90aW9uJztcbmltcG9ydCB7IEFjY29yZGlvbiwgQWNjb3JkaW9uQ29udGVudCwgQWNjb3JkaW9uSXRlbSwgQWNjb3JkaW9uVHJpZ2dlciB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9hY2NvcmRpb24nO1xuXG5jb25zdCBjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMgPSAoZGF0YTogQm9va0RhdGEgfCB1bmRlZmluZWQpOiBCb29rRm9ybVZhbHVlc1R5cGUgPT4ge1xuICByZXR1cm4ge1xuICAgIGlkOiBkYXRhPy5pZCxcbiAgICBhcnJpdmFsVGltZTogZGF0YT8uYXJyaXZhbFRpbWUgfHwgJycsXG4gICAgYWNjZXNzSW5zdHJ1Y3Rpb25zOiBkYXRhPy5hY2Nlc3NJbnN0cnVjdGlvbnMgfHwgJycsXG4gICAgYXJyaXZhbEFkZGl0aW9uYWxJbmZvOiBkYXRhPy5hcnJpdmFsQWRkaXRpb25hbEluZm8gfHwgJycsXG4gICAgZGVwYXJ0dXJlVGltZTogZGF0YT8uZGVwYXJ0dXJlVGltZSB8fCAnJyxcbiAgICBleGl0SW5zdHJ1Y3Rpb25zOiBkYXRhPy5leGl0SW5zdHJ1Y3Rpb25zIHx8ICcnLFxuICAgIGRlcGFydHVyZUFkZGl0aW9uYWxJbmZvOiBkYXRhPy5kZXBhcnR1cmVBZGRpdGlvbmFsSW5mbyB8fCAnJyxcbiAgICB3aWZpTmFtZTogZGF0YT8ud2lmaU5hbWUgfHwgJycsXG4gICAgd2lmaVBhc3N3b3JkOiBkYXRhPy53aWZpUGFzc3dvcmQgfHwgJycsXG4gICAgaG91c2VSdWxlczogZGF0YT8uaG91c2VSdWxlcyB8fCAnJyxcbiAgICBvd25lckNvbnRhY3Q6IGRhdGE/Lm93bmVyQ29udGFjdCB8fCAnJyxcbiAgICBvd25lck5hbWU6IGRhdGE/Lm93bmVyTmFtZSB8fCAnJyxcbiAgICBnZW5lcmFsSW5mbzogZGF0YT8uZ2VuZXJhbEluZm8gfHwgJycsXG4gICAgcmVjb21tZW5kYXRpb25zOiBkYXRhPy5yZWNvbW1lbmRhdGlvbnMgfHwgW10sXG4gIH07XG59O1xuXG5jb25zdCBjb252ZXJ0Rm9ybVZhbHVlc1RvQm9va0RhdGEgPSAodmFsdWVzOiBCb29rRm9ybVZhbHVlc1R5cGUpOiBCb29rRGF0YSA9PiB7XG4gIHJldHVybiB7XG4gICAgaWQ6IHZhbHVlcy5pZCxcbiAgICBhcnJpdmFsVGltZTogdmFsdWVzLmFycml2YWxUaW1lLFxuICAgIGFjY2Vzc0luc3RydWN0aW9uczogdmFsdWVzLmFjY2Vzc0luc3RydWN0aW9ucyxcbiAgICBhcnJpdmFsQWRkaXRpb25hbEluZm86IHZhbHVlcy5hcnJpdmFsQWRkaXRpb25hbEluZm8gfHwgJycsXG4gICAgZGVwYXJ0dXJlVGltZTogdmFsdWVzLmRlcGFydHVyZVRpbWUsXG4gICAgZXhpdEluc3RydWN0aW9uczogdmFsdWVzLmV4aXRJbnN0cnVjdGlvbnMsXG4gICAgZGVwYXJ0dXJlQWRkaXRpb25hbEluZm86IHZhbHVlcy5kZXBhcnR1cmVBZGRpdGlvbmFsSW5mbyB8fCAnJyxcbiAgICB3aWZpTmFtZTogdmFsdWVzLndpZmlOYW1lLFxuICAgIHdpZmlQYXNzd29yZDogdmFsdWVzLndpZmlQYXNzd29yZCxcbiAgICBob3VzZVJ1bGVzOiB2YWx1ZXMuaG91c2VSdWxlcyxcbiAgICBvd25lckNvbnRhY3Q6IHZhbHVlcy5vd25lckNvbnRhY3QsXG4gICAgb3duZXJOYW1lOiB2YWx1ZXMub3duZXJOYW1lLFxuICAgIGdlbmVyYWxJbmZvOiB2YWx1ZXMuZ2VuZXJhbEluZm8gfHwgJycsXG4gICAgcmVjb21tZW5kYXRpb25zOiB2YWx1ZXMucmVjb21tZW5kYXRpb25zIHx8IFtdLFxuICB9O1xufTtcblxuaW50ZXJmYWNlIEJvb2tFZGl0Rm9ybVByb3BzIHtcbiAgaW5pdGlhbERhdGE/OiBCb29rRGF0YTtcbiAgb25TdWJtaXQ/OiAoZGF0YTogQm9va0RhdGEpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBCb29rRWRpdEZvcm0oeyBpbml0aWFsRGF0YSwgb25TdWJtaXQgfTogQm9va0VkaXRGb3JtUHJvcHMpIHtcbiAgY29uc3QgW2lzU2F2aW5nLCBzZXRJc1NhdmluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3Qge1xuICAgIHJlZ2lzdGVyLFxuICAgIGhhbmRsZVN1Ym1pdCxcbiAgICBjb250cm9sLFxuICAgIGZvcm1TdGF0ZTogeyBlcnJvcnMgfSxcbiAgfSA9IHVzZUZvcm08Qm9va0Zvcm1WYWx1ZXNUeXBlPih7XG4gICAgcmVzb2x2ZXI6IHpvZFJlc29sdmVyKEJvb2tGb3JtU2NoZW1hKSBhcyBhbnksXG4gICAgZGVmYXVsdFZhbHVlczogY29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzKGluaXRpYWxEYXRhKSxcbiAgfSk7XG5cbiAgY29uc3QgeyBmaWVsZHMsIGFwcGVuZCwgcmVtb3ZlIH0gPSB1c2VGaWVsZEFycmF5KHtcbiAgICBjb250cm9sLFxuICAgIG5hbWU6IFwicmVjb21tZW5kYXRpb25zXCIsXG4gIH0pO1xuXG4gIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XG4gICAgc2V0SXNTYXZpbmcodHJ1ZSk7XG5cbiAgICBjb25zdCBib29rRGF0YSA9IGNvbnZlcnRGb3JtVmFsdWVzVG9Cb29rRGF0YShkYXRhKTtcblxuICAgIGlmIChvblN1Ym1pdCkge1xuICAgICAgb25TdWJtaXQoYm9va0RhdGEpO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKCdEb25uw6llcyBzb3VtaXNlczonLCBib29rRGF0YSk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHNldElzU2F2aW5nKGZhbHNlKTtcbiAgICB9LCAxMDAwKTtcbiAgfTtcbi4uLlxuUGF0aDogc3JjL2NvbXBvbmVudHMvc2NoZW1hcy9Cb29rRm9ybVNjaGVtYS50c1xuaW1wb3J0IHsgeiB9IGZyb20gXCJ6b2RcIjtcbmltcG9ydCB7IFJlY29tbWVuZGF0aW9uVHlwZSB9IGZyb20gXCJAL3R5cGVzL0Jvb2tEYXRhXCI7XG5cbi8vIFNjaMOpbWEgcG91ciBsZXMgcmVjb21tYW5kYXRpb25zXG5jb25zdCByZWNvbW1lbmRhdGlvblNjaGVtYSA9IHoub2JqZWN0KHtcbiAgaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgbmFtZTogei5zdHJpbmcoKS5taW4oMSwgXCJMZSBub20gZXN0IHJlcXVpc1wiKSxcbiAgYWRkcmVzczogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBkZXNjcmlwdGlvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICB0eXBlOiB6Lm5hdGl2ZUVudW0oUmVjb21tZW5kYXRpb25UeXBlKVxufSk7XG5cbi8vIFNjaMOpbWEgZGUgdmFsaWRhdGlvbiBwb3VyIGxlIGZvcm11bGFpcmVcbmV4cG9ydCBjb25zdCBCb29rRm9ybVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgXG4gIC8vIEFycml2w6llXG4gIGFycml2YWxUaW1lOiB6LnN0cmluZygpLm1pbigxLCBcIkwnaGV1cmUgZCdhcnJpdsOpZSBlc3QgcmVxdWlzZVwiKSxcbiAgYWNjZXNzSW5zdHJ1Y3Rpb25zOiB6LnN0cmluZygpLm1pbigxLCBcIkxlcyBpbnN0cnVjdGlvbnMgZCdhY2PDqHMgc29udCByZXF1aXNlc1wiKSxcbiAgYXJyaXZhbEFkZGl0aW9uYWxJbmZvOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIFxuICAvLyBEw6lwYXJ0XG4gIGRlcGFydHVyZVRpbWU6IHouc3RyaW5nKCkubWluKDEsIFwiTCdoZXVyZSBkZSBkw6lwYXJ0IGVzdCByZXF1aXNlXCIpLFxuICBleGl0SW5zdHJ1Y3Rpb25zOiB6LnN0cmluZygpLm1pbigxLCBcIkxlcyBpbnN0cnVjdGlvbnMgZGUgc29ydGllIHNvbnQgcmVxdWlzZXNcIiksXG4gIGRlcGFydHVyZUFkZGl0aW9uYWxJbmZvOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIFxuICAvLyBIw6liZXJnZW1lbnRcbiAgd2lmaU5hbWU6IHouc3RyaW5nKCkubWluKDEsIFwiTGUgbm9tIGR1IHLDqXNlYXUgV2lGaSBlc3QgcmVxdWlzXCIpLFxuICB3aWZpUGFzc3dvcmQ6IHouc3RyaW5nKCkubWluKDEsIFwiTGUgbW90IGRlIHBhc3NlIFdpRmkgZXN0IHJlcXVpc1wiKSxcbiAgaG91c2VSdWxlczogei5zdHJpbmcoKS5taW4oMSwgXCJMZXMgcsOoZ2xlcyBkZSBsYSBtYWlzb24gc29udCByZXF1aXNlc1wiKSxcbiAgb3duZXJDb250YWN0OiB6LnN0cmluZygpLm1pbigxLCBcIkxlIGNvbnRhY3QgZHUgcHJvcHJpw6l0YWlyZSBlc3QgcmVxdWlzXCIpLFxuICBvd25lck5hbWU6IHouc3RyaW5nKCkubWluKDEsIFwiTGUgbm9tIGR1IHByb3ByacOpdGFpcmUgZXN0IHJlcXVpc1wiKSxcbiAgZ2VuZXJhbEluZm86IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgXG4gIC8vIFJlY29tbWFuZGF0aW9uc1xuICByZWNvbW1lbmRhdGlvbnM6IHouYXJyYXkocmVjb21tZW5kYXRpb25TY2hlbWEpLm9wdGlvbmFsKCkuZGVmYXVsdChbXSlcbn0pO1xuXG5leHBvcnQgdHlwZSBCb29rRm9ybVZhbHVlc1R5cGUgPSB6LmluZmVyPHR5cGVvZiBCb29rRm9ybVNjaGVtYT47XG4uLi5cblBhdGg6IHNyYy9hcHAvd2VsY29tZS1ib29rL1tpZF0vcGFnZS50c3hcbid1c2UgY2xpZW50JztcblxuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJvb2tEYXRhIH0gZnJvbSAnQC90eXBlcy9Cb29rRGF0YSc7XG5pbXBvcnQgeyB1c2VQYXJhbXMgfSBmcm9tICduZXh0L25hdmlnYXRpb24nO1xuaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvaW5wdXQnO1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2J1dHRvbic7XG5pbXBvcnQgeyBMb2NrIH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcblxuZnVuY3Rpb24gQ2xpZW50Qm9vaygpIHtcbiAgY29uc3QgcGFyYW1zID0gdXNlUGFyYW1zKCk7XG4gIGNvbnN0IFtib29rRGF0YSwgc2V0Qm9va0RhdGFdID0gdXNlU3RhdGU8Qm9va0RhdGEgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW3Bhc3N3b3JkLCBzZXRQYXNzd29yZF0gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFtpc1Bhc3N3b3JkUmVxdWlyZWQsIHNldElzUGFzc3dvcmRSZXF1aXJlZF0gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgY29uc3QgW3Bhc3N3b3JkRXJyb3IsIHNldFBhc3N3b3JkRXJyb3JdID0gdXNlU3RhdGU8c3RyaW5nIHwgbnVsbD4obnVsbCk7XG5cbiAgY29uc3QgZmV0Y2hCb29rRGF0YSA9IGFzeW5jIChwd2Q6IHN0cmluZykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgICBzZXRFcnJvcihudWxsKTtcbiAgICAgIHNldFBhc3N3b3JkRXJyb3IobnVsbCk7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMS9hcGkvc3RheS8ke3BhcmFtcy5pZH0/cGFzc3dvcmQ9JHtwd2R9YCwge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcbiAgICAgICAgc2V0UGFzc3dvcmRFcnJvcignTW90IGRlIHBhc3NlIGluY29ycmVjdCcpO1xuICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJldXIgSFRUUDogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICBzZXRCb29rRGF0YShkYXRhKTtcbiAgICAgIHNldElzUGFzc3dvcmRSZXF1aXJlZChmYWxzZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBzZXRFcnJvcignSW1wb3NzaWJsZSBkZSByw6ljdXDDqXJlciBsZXMgZG9ubsOpZXMgZHUgbGl2cmV0LiBWZXVpbGxleiByw6llc3NheWVyIHBsdXMgdGFyZC4nKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgICBpZiAocGFyYW1zLmlkKSB7XG4gICAgICBmZXRjaEJvb2tEYXRhKCk7XG4gICAgfVxuICB9LCBbcGFyYW1zLmlkXSk7XG5cbiAgaWYgKGlzTG9hZGluZykge1xuICAgIHJldHVybiAoXG4gICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJoLXNjcmVlbiB3LXNjcmVlbiBiZy1iYWNrZ3JvdW5kIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXhsXCI+Q2hhcmdlbWVudCBkdSBsaXZyZXQgZCdow6liZXJnZW1lbnQuLi48L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9zZWN0aW9uPlxuICAgICk7XG4gIH1cblxuICBpZiAoZXJyb3IpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiaC1zY3JlZW4gdy1zY3JlZW4gYmctYmFja2dyb3VuZCBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlclwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtY2VudGVyIHRleHQtZGVzdHJ1Y3RpdmVcIj5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXhsXCI+e2Vycm9yfTwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgKTtcbiAgfVxuXG4gIGlmICghYm9va0RhdGEpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiaC1zY3JlZW4gdy1zY3JlZW4gYmctYmFja2dyb3VuZCBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlclwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtY2VudGVyIHRleHQtZGVzdHJ1Y3RpdmVcIj5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXhsXCI+TGl2cmV0IGQnaMOpYmVyZ2VtZW50IGludHJvdXZhYmxlLjwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgKTtcbiAgfVxuLi4uXG5cbiAgICAgICAgICB7LyogSW5mb3JtYXRpb25zIGQnYXJyaXbDqWUgKi99XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTRcIj5cbiAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtc2VtaWJvbGRcIj5BcnJpdsOpZTwvaDM+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyaWQgZ3JpZC1jb2xzLTEgbWQ6Z3JpZC1jb2xzLTIgZ2FwLTRcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTQgYmctbXV0ZWQvMjAgcm91bmRlZC1tZFwiPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImZvbnQtbWVkaXVtXCI+SGV1cmUgZCdhcnJpdsOpZTwvcD5cbiAgICAgICAgICAgICAgICA8cD57Ym9va0RhdGEuYXJyaXZhbFRpbWV9PC9wPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTQgYmctbXV0ZWQvMjAgcm91bmRlZC1tZFwiPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImZvbnQtbWVkaXVtXCI+SW5zdHJ1Y3Rpb25zIGQnYWNjw6hzPC9wPlxuICAgICAgICAgICAgICAgIDxwPntib29rRGF0YS5hY2Nlc3NJbnN0cnVjdGlvbnN9PC9wPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAge2Jvb2tEYXRhLmFycml2YWxBZGRpdGlvbmFsSW5mbyAmJiAoXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicC00IGJnLW11dGVkLzIwIHJvdW5kZWQtbWRcIj5cbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJmb250LW1lZGl1bVwiPkluZm9ybWF0aW9ucyBzdXBwbMOpbWVudGFpcmVzPC9wPlxuICAgICAgICAgICAgICAgIDxwPntib29rRGF0YS5hcnJpdmFsQWRkaXRpb25hbEluZm99PC9wPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICB7LyogSW5mb3JtYXRpb25zIGRlIGTDqXBhcnQgKi99XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTRcIj5cbiAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtc2VtaWJvbGRcIj5Ew6lwYXJ0PC9oMz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMSBtZDpncmlkLWNvbHMtMiBnYXAtNFwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInAtNCBiZy1tdXRlZC8yMCByb3VuZGVkLW1kXCI+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZm9udC1tZWRpdW1cIj5IZXVyZSBkZSBkw6lwYXJ0PC9wPlxuICAgICAgICAgICAgICAgIDxwPntib29rRGF0YS5kZXBhcnR1cmVUaW1lfTwvcD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicC00IGJnLW11dGVkLzIwIHJvdW5kZWQtbWRcIj5cbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJmb250LW1lZGl1bVwiPkluc3RydWN0aW9ucyBkZSBzb3J0aWU8L3A+XG4gICAgICAgICAgICAgICAgPHA+e2Jvb2tEYXRhLmV4aXRJbnN0cnVjdGlvbnN9PC9wPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAge2Jvb2tEYXRhLmRlcGFydHVyZUFkZGl0aW9uYWxJbmZvICYmIChcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTQgYmctbXV0ZWQvMjAgcm91bmRlZC1tZFwiPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImZvbnQtbWVkaXVtXCI+SW5mb3JtYXRpb25zIHN1cHBsw6ltZW50YWlyZXM8L3A+XG4gICAgICAgICAgICAgICAgPHA+e2Jvb2tEYXRhLmRlcGFydHVyZUFkZGl0aW9uYWxJbmZvfTwvcD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgey8qIEluZm9ybWF0aW9ucyBXaUZpICovfVxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS00XCI+XG4gICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwidGV4dC14bCBmb250LXNlbWlib2xkXCI+V2lGaTwvaDM+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyaWQgZ3JpZC1jb2xzLTEgbWQ6Z3JpZC1jb2xzLTIgZ2FwLTRcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTQgYmctbXV0ZWQvMjAgcm91bmRlZC1tZFwiPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImZvbnQtbWVkaXVtXCI+Tm9tIGR1IHLDqXNlYXU8L3A+XG4gICAgICAgICAgICAgICAgPHA+e2Jvb2tEYXRhLndpZmlOYW1lfTwvcD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicC00IGJnLW11dGVkLzIwIHJvdW5kZWQtbWRcIj5cbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJmb250LW1lZGl1bVwiPk1vdCBkZSBwYXNzZTwvcD5cbiAgICAgICAgICAgICAgICA8cD57Ym9va0RhdGEud2lmaVBhc3N3b3JkfTwvcD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIHsvKiBSw6hnbGVzIGRlIGxhIG1haXNvbiAqL31cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktNFwiPlxuICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQteGwgZm9udC1zZW1pYm9sZFwiPlLDqGdsZXMgZGUgbGEgbWFpc29uPC9oMz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicC00IGJnLW11dGVkLzIwIHJvdW5kZWQtbWRcIj5cbiAgICAgICAgICAgICAge2Jvb2tEYXRhLmhvdXNlUnVsZXMuc3BsaXQoJ1xcbicpLm1hcCgocnVsZSwgaW5kZXgpID0+IChcbiAgICAgICAgICAgICAgICA8ZGl2IGtleT17aW5kZXh9IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtc3RhcnQgbWItMlwiPlxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibXItMlwiPuKAojwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDxwPntydWxlfTwvcD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIHsvKiBSZWNvbW1hbmRhdGlvbnMgKi99XG4gICAgICAgICAge2Jvb2tEYXRhLnJlY29tbWVuZGF0aW9ucyAmJiBib29rRGF0YS5yZWNvbW1lbmRhdGlvbnMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktNFwiPlxuICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwidGV4dC14bCBmb250LXNlbWlib2xkXCI+UmVjb21tYW5kYXRpb25zPC9oMz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncmlkIGdyaWQtY29scy0xIG1kOmdyaWQtY29scy0yIGdhcC00XCI+XG4gICAgICAgICAgICAgICAge2Jvb2tEYXRhLnJlY29tbWVuZGF0aW9ucy5tYXAoKHJlYykgPT4gKFxuICAgICAgICAgICAgICAgICAgPGRpdiBrZXk9e3JlYy5pZH0gY2xhc3NOYW1lPVwicC00IGJnLW11dGVkLzIwIHJvdW5kZWQtbWRcIj5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZm9udC1tZWRpdW1cIj57cmVjLm5hbWV9PC9wPlxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIHRleHQtbXV0ZWQtZm9yZWdyb3VuZFwiPntyZWMudHlwZX08L3A+XG4gICAgICAgICAgICAgICAgICAgIHtyZWMuYWRkcmVzcyAmJiA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtXCI+e3JlYy5hZGRyZXNzfTwvcD59XG4gICAgICAgICAgICAgICAgICAgIHtyZWMuZGVzY3JpcHRpb24gJiYgPHAgY2xhc3NOYW1lPVwibXQtMlwiPntyZWMuZGVzY3JpcHRpb259PC9wPn1cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG5cbiAgICAgICAgICB7LyogQ29udGFjdCAqL31cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktNFwiPlxuICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQteGwgZm9udC1zZW1pYm9sZFwiPkNvbnRhY3Q8L2gzPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTQgYmctbXV0ZWQvMjAgcm91bmRlZC1tZFwiPlxuICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJmb250LW1lZGl1bVwiPntib29rRGF0YS5vd25lck5hbWV9PC9wPlxuICAgICAgICAgICAgICA8cD57Ym9va0RhdGEub3duZXJDb250YWN0fTwvcD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgey8qIEluZm9ybWF0aW9ucyBnw6luw6lyYWxlcyAqL31cbiAgICAgICAgICB7Ym9va0RhdGEuZ2VuZXJhbEluZm8gJiYgKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTRcIj5cbiAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQteGwgZm9udC1zZW1pYm9sZFwiPkluZm9ybWF0aW9ucyBnw6luw6lyYWxlczwvaDM+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicC00IGJnLW11dGVkLzIwIHJvdW5kZWQtbWRcIj5cbiAgICAgICAgICAgICAgICA8cD57Ym9va0RhdGEuZ2VuZXJhbEluZm99PC9wPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9zZWN0aW9uPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBDbGllbnRCb29rOy4uLlxuUGF0aDogcHJpc21hL3NjaGVtYS5wcmlzbWFcbmdlbmVyYXRvciBjbGllbnQge1xuICBwcm92aWRlciA9IFwicHJpc21hLWNsaWVudC1qc1wiXG59XG5cbmRhdGFzb3VyY2UgZGIge1xuICBwcm92aWRlciA9IFwic3FsaXRlXCJcbiAgdXJsICAgICAgPSBcImZpbGU6Li9kZXYuZGJcIlxufVxuXG5tb2RlbCBTdGF5SW5mbyB7XG4gIGlkIFN0cmluZyBAaWQgQGRlZmF1bHQodXVpZCgpKVxuXG4gIC8vIEFycml2YWxcbiAgYXJyaXZhbFRpbWUgICAgICAgICAgIFN0cmluZ1xuICBhY2Nlc3NJbnN0cnVjdGlvbnMgICAgU3RyaW5nXG4gIGFycml2YWxBZGRpdGlvbmFsSW5mbyBTdHJpbmdcblxuICAvLyBEZXBhcnR1cmVcbiAgZGVwYXJ0dXJlVGltZSAgICAgICAgICAgU3RyaW5nXG4gIGV4aXRJbnN0cnVjdGlvbnMgICAgICAgIFN0cmluZ1xuICBkZXBhcnR1cmVBZGRpdGlvbmFsSW5mbyBTdHJpbmdcblxuICAvLyBBY2NvbW1vZGF0aW9uXG4gIHdpZmlOYW1lICAgICBTdHJpbmdcbiAgd2lmaVBhc3N3b3JkIFN0cmluZ1xuICBob3VzZVJ1bGVzICAgU3RyaW5nXG4gIG93bmVyQ29udGFjdCBTdHJpbmdcbiAgb3duZXJOYW1lICAgIFN0cmluZ1xuICBnZW5lcmFsSW5mbyAgU3RyaW5nXG5cbiAgLy8gU2VjdXJpdHlcbiAgYWNjZXNzUGFzc3dvcmQgU3RyaW5nXG5cbiAgLy8gVW5pZmllZCBSZWNvbW1lbmRhdGlvbnNcbiAgcmVjb21tZW5kYXRpb25zIFJlY29tbWVuZGF0aW9uW11cbn1cblxubW9kZWwgUmVjb21tZW5kYXRpb24ge1xuICBpZCAgICAgICAgICBTdHJpbmcgICAgICAgICAgICAgQGlkIEBkZWZhdWx0KHV1aWQoKSlcbiAgbmFtZSAgICAgICAgU3RyaW5nXG4gIGFkZHJlc3MgICAgIFN0cmluZz9cbiAgZGVzY3JpcHRpb24gU3RyaW5nP1xuICB0eXBlICAgICAgICBSZWNvbW1lbmRhdGlvblR5cGVcbiAgc3RheUluZm8gICAgU3RheUluZm8gICAgICAgICAgIEByZWxhdGlvbihmaWVsZHM6IFtzdGF5SW5mb0lkXSwgcmVmZXJlbmNlczogW2lkXSlcbiAgc3RheUluZm9JZCAgU3RyaW5nXG59XG5cbmVudW0gUmVjb21tZW5kYXRpb25UeXBlIHtcbiAgUkVTVEFVUkFOVFxuICBBQ1RJVklUWVxuICBCQVJcbiAgVE9VUklTTVxuICBHUk9DRVJZXG59XG4uLi5cblBhdGg6IHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4XG4ndXNlIGNsaWVudCc7XG5cbmltcG9ydCB7IEJvb2tFZGl0Rm9ybSB9IGZyb20gJ0AvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0nO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJvb2tEYXRhIH0gZnJvbSAnQC90eXBlcy9Cb29rRGF0YSc7XG5pbXBvcnQgeyBtb3Rpb24gfSBmcm9tICdmcmFtZXItbW90aW9uJztcbmltcG9ydCB7IFBhbG10cmVlLCBCb29rLCBTdW4gfSBmcm9tICdsdWNpZGUtcmVhY3QnO1xuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9uYXZpZ2F0aW9uJztcbmltcG9ydCB7UGFzc3dvcmREaXNwbGF5fSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50cy9QYXNzd29yZERpc3BsYXlcIjtcblxuZnVuY3Rpb24gRWRpdEZvcm1Cb29rKCkge1xuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcbiAgY29uc3QgW2Jvb2tEYXRhLCBzZXRCb29rRGF0YV0gPSB1c2VTdGF0ZTxCb29rRGF0YSB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSk7XG5cbiAgY29uc3QgY29udGFpbmVyVmFyaWFudHMgPSB7XG4gICAgaGlkZGVuOiB7IG9wYWNpdHk6IDAgfSxcbiAgICB2aXNpYmxlOiB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgdHJhbnNpdGlvbjoge1xuICAgICAgICBzdGFnZ2VyQ2hpbGRyZW46IDAuMlxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCBpdGVtVmFyaWFudHMgPSB7XG4gICAgaGlkZGVuOiB7IHk6IDIwLCBvcGFjaXR5OiAwIH0sXG4gICAgdmlzaWJsZToge1xuICAgICAgeTogMCxcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICB0cmFuc2l0aW9uOiB7XG4gICAgICAgIHR5cGU6ICdzcHJpbmcnLFxuICAgICAgICBzdGlmZm5lc3M6IDEwMCxcbiAgICAgICAgZGFtcGluZzogMTJcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBzdG9yZWREYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2Jvb2tEYXRhJyk7XG4gICAgaWYgKHN0b3JlZERhdGEpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZERhdGEgPSBKU09OLnBhcnNlKHN0b3JlZERhdGEpO1xuICAgICAgICBzZXRCb29rRGF0YShwYXJzZWREYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBsb3JzIGRlIGxhIHLDqWN1cMOpcmF0aW9uIGRlcyBkb25uw6llczonLCBlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gIH0sIFtdKTtcbi4uLlxuXG4gICAgICAgICAge2lzTG9hZGluZyA/IChcbiAgICAgICAgICAgIDxtb3Rpb24uZGl2XG4gICAgICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRleHQtY2VudGVyIHB5LTEyIGZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHNwYWNlLXktNFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxCb29rIGNsYXNzTmFtZT1cImgtMTIgdy0xMiB0ZXh0LWFtYmVyLTQwMCBhbmltYXRlLXB1bHNlXCIgLz5cbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1sZyB0ZXh0LWdyYXktNjAwXCI+Q2hhcmdlbWVudCBkZSB2b3RyZSBsaXZyZXQuLi48L3A+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy02NCBoLTIgYmctZ3JheS0yMDAgcm91bmRlZC1mdWxsIG92ZXJmbG93LWhpZGRlblwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaC1mdWxsIGJnLWdyYWRpZW50LXRvLXIgZnJvbS1bI2YwNGMyM10gdG8tcGluay01MDAgYW5pbWF0ZS1bbG9hZGluZ18xLjVzX2Vhc2UtaW4tb3V0X2luZmluaXRlXVwiIHN0eWxlPXt7IHdpZHRoOiAnNzAlJyB9fT48L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDxtb3Rpb24uZGl2IHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9IGNsYXNzTmFtZT1cInNwYWNlLXktOFwiPlxuICAgICAgICAgICAgICB7LyogQWZmaWNoYWdlIGR1IG1vdCBkZSBwYXNzZSAqL31cbiAgICAgICAgICAgICAge2Jvb2tEYXRhPy5hY2Nlc3NQYXNzd29yZCAmJiBib29rRGF0YT8uaWQgJiYgKFxuICAgICAgICAgICAgICAgIDxtb3Rpb24uZGl2IHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9PlxuICAgICAgICAgICAgICAgICAgPFBhc3N3b3JkRGlzcGxheSBwYXNzd29yZD17Ym9va0RhdGEuYWNjZXNzUGFzc3dvcmR9IGJvb2tJZD17Ym9va0RhdGEuaWR9IC8+XG4gICAgICAgICAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgICAgICAgICAgICApfVxuXG4gICAgICAgICAgICAgIDxCb29rRWRpdEZvcm1cbiAgICAgICAgICAgICAgICBpbml0aWFsRGF0YT17Ym9va0RhdGEgfHwgdW5kZWZpbmVkfVxuICAgICAgICAgICAgICAgIG9uU3VibWl0PXsoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm7DqWVzIGR1IGZvcm11bGFpcmUgc291bWlzZXM6JywgZGF0YSk7XG4gICAgICAgICAgICAgICAgICBhbGVydCgnTW9kaWZpY2F0aW9ucyBlbnJlZ2lzdHLDqWVzIGF2ZWMgc3VjY8OocyEnKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvbW90aW9uLmRpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8c3R5bGUganN4IGdsb2JhbD57YFxuICAgICAgICBAa2V5ZnJhbWVzIGxvYWRpbmcge1xuICAgICAgICAgIDAlIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKTsgfVxuICAgICAgICAgIDUwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWCgzMCUpOyB9XG4gICAgICAgICAgMTAwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWCgxMDAlKTsgfVxuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9tb3Rpb24uc2VjdGlvbj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRWRpdEZvcm1Cb29rOy4uLlxuUGF0aDogc3JjL2NvbXBvbmVudHMvc2NoZW1hcy9NYWluRm9ybVNjaGVtYS50c1xuaW1wb3J0IHsgeiB9IGZyb20gXCJ6b2RcIjtcblxuZXhwb3J0IGNvbnN0IE1haW5Gb3JtU2NoZW1hID0gei5vYmplY3Qoe1xuICB1cmw6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgZmlsZTogei5hbnkoKVxuICAgIC5vcHRpb25hbCgpXG4gICAgLnRyYW5zZm9ybSh2YWwgPT4ge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9KVxuICAgIC5zdXBlclJlZmluZSgoZmlsZXMsIGN0eCkgPT4ge1xuXG4gICAgICBpZiAoZmlsZXMgJiYgZmlsZXMgaW5zdGFuY2VvZiBGaWxlTGlzdCAmJiBmaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGZpbGUgPSBmaWxlc1swXTtcbiAgICAgICAgY29uc29sZS5sb2coJ0ZpY2hpZXIgZMOpdGVjdMOpIGRhbnMgc3VwZXJSZWZpbmU6JywgZmlsZS5uYW1lLCBmaWxlLnR5cGUpO1xuXG4gICAgICAgIGlmIChmaWxlLnR5cGUgIT09ICdhcHBsaWNhdGlvbi9wZGYnKSB7XG4gICAgICAgICAgY3R4LmFkZElzc3VlKHtcbiAgICAgICAgICAgIGNvZGU6IHouWm9kSXNzdWVDb2RlLmN1c3RvbSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiTGUgZmljaGllciBkb2l0IMOqdHJlIGF1IGZvcm1hdCBQREZcIixcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG59KS5zdXBlclJlZmluZSgoZGF0YSwgY3R4KSA9PiB7XG4gIGNvbnN0IGhhc1VybCA9IGRhdGEudXJsICYmIGRhdGEudXJsLnRyaW0oKSAhPT0gJyc7XG4gIGNvbnN0IGhhc0ZpbGUgPSBkYXRhLmZpbGUgJiYgZGF0YS5maWxlIGluc3RhbmNlb2YgRmlsZUxpc3QgJiYgZGF0YS5maWxlLmxlbmd0aCA+IDA7XG4uLi5cblBhdGg6IHBhY2thZ2UuanNvblxue1xuICBcIm5hbWVcIjogXCJob3N0Qm9vay1iYWNrXCIsXG4gIFwicGFja2FnZU1hbmFnZXJcIjogXCJ5YXJuQDQuNC4xXCIsXG4gIFwic2NyaXB0c1wiOiB7XG4gICAgXCJkZXZcIjogXCJ0cy1ub2RlLWRldiAtLXJlc3Bhd24gLS10cmFuc3BpbGUtb25seSAuL3NyYy9pbmRleC50c1wiLFxuICAgIFwiYnVpbGRcIjogXCJ0c2NcIixcbiAgICBcInN0YXJ0XCI6IFwibm9kZSBkaXN0L2luZGV4LmpzXCJcbiAgfSxcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQHR5cGVzL211bHRlclwiOiBcIl4xLjQuMTJcIixcbiAgICBcImNvcnNcIjogXCJeMi44LjVcIixcbiAgICBcImRvdGVudlwiOiBcIl4xNi41LjBcIixcbiAgICBcImV4cHJlc3NcIjogXCJeNS4xLjBcIixcbiAgICBcImx1Y2lkZS1yZWFjdFwiOiBcIl4wLjQ4Ny4wXCIsXG4gICAgXCJtdWx0ZXJcIjogXCJeMS40LjUtbHRzLjJcIixcbiAgICBcIm9wZW5haVwiOiBcIl40LjkzLjBcIixcbiAgICBcInBkZi1wYXJzZVwiOiBcIl4xLjEuMVwiLFxuICAgIFwicHJpc21hXCI6IFwiXjYuNi4wXCIsXG4gICAgXCJzcWxpdGUzXCI6IFwiXjUuMS43XCJcbiAgfSxcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQHByaXNtYS9jbGllbnRcIjogXCJeNi42LjBcIixcbiAgICBcIkB0eXBlcy9jb3JzXCI6IFwiXjIuOC4xN1wiLFxuICAgIFwiQHR5cGVzL2V4cHJlc3NcIjogXCJeNS4wLjFcIixcbiAgICBcIkB0eXBlcy9ub2RlXCI6IFwiXjIyLjE0LjBcIixcbiAgICBcIkB0eXBlcy9wZGYtcGFyc2VcIjogXCJeMS4xLjVcIixcbiAgICBcImF4aW9zXCI6IFwiXjEuOC40XCIsXG4gICAgXCJmb3JtLWRhdGFcIjogXCJeNC4wLjJcIixcbiAgICBcInRzLW5vZGUtZGV2XCI6IFwiXjIuMC4wXCIsXG4gICAgXCJ0eXBlc2NyaXB0XCI6IFwiXjUuOC4zXCJcbiAgfVxufVxuLi4uXG5QYXRoOiBzcmMvY29tcG9uZW50cy9TaW1wbGVGb3JtLnRzeFxuXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZUZvcm0gfSBmcm9tIFwicmVhY3QtaG9vay1mb3JtXCI7XG5pbXBvcnQgeyB6b2RSZXNvbHZlciB9IGZyb20gXCJAaG9va2Zvcm0vcmVzb2x2ZXJzL3pvZFwiO1xuaW1wb3J0IHsgSW5wdXQgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL2lucHV0XCI7XG5pbXBvcnQgTGluayBmcm9tIFwibmV4dC9saW5rXCI7XG5pbXBvcnQgeyBNYWluRm9ybVNjaGVtYSwgTWFpbkZvcm1WYWx1ZXNUeXBlIH0gZnJvbSBcIi4vc2NoZW1hcy9NYWluRm9ybVNjaGVtYVwiO1xuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSBcIm5leHQvbmF2aWdhdGlvblwiO1xuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuaW1wb3J0IHsgQm9va0RhdGEgfSBmcm9tIFwiQC90eXBlcy9Cb29rRGF0YVwiO1xuaW1wb3J0IHsgbW90aW9uIH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIjtcbmltcG9ydCB7IEZpbGVVcCwgTGluazIsIFBhbG10cmVlLCBTdW4sIFVwbG9hZCB9IGZyb20gXCJsdWNpZGUtcmVhY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIFNpbXBsZUZvcm0oKSB7XG4gIGNvbnN0IFtpc1N1Ym1pdHRlZCwgc2V0SXNTdWJtaXR0ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbZmlsZU5hbWUsIHNldEZpbGVOYW1lXSA9IHVzZVN0YXRlPHN0cmluZz4oXCJcIik7XG4gIGNvbnN0IFtmaWxlSW5mbywgc2V0RmlsZUluZm9dID0gdXNlU3RhdGU8e1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgc2l6ZTogc3RyaW5nO1xuICB9IHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFtib29rRGF0YSwgc2V0Qm9va0RhdGFdID0gdXNlU3RhdGU8Qm9va0RhdGEgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG5cbiAgLy8gRMOpZmluaXIgbGVzIGFuaW1hdGlvbnNcbiAgY29uc3QgY29udGFpbmVyVmFyaWFudHMgPSB7XG4gICAgaGlkZGVuOiB7IG9wYWNpdHk6IDAgfSxcbiAgICB2aXNpYmxlOiB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgdHJhbnNpdGlvbjoge1xuICAgICAgICBzdGFnZ2VyQ2hpbGRyZW46IDAuMlxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCBpdGVtVmFyaWFudHMgPSB7XG4gICAgaGlkZGVuOiB7IHk6IDIwLCBvcGFjaXR5OiAwIH0sXG4gICAgdmlzaWJsZToge1xuICAgICAgeTogMCxcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICB0cmFuc2l0aW9uOiB7XG4gICAgICAgIHR5cGU6ICdzcHJpbmcnLFxuICAgICAgICBzdGlmZm5lc3M6IDEwMCxcbiAgICAgICAgZGFtcGluZzogMTJcbiAgICAgIH1cbiAgICB9XG4gIH07XG4uLi5cblBhdGg6IHlhcm4ubG9ja1xuLi4uXG5cblwiaG9zdEJvb2stYmFja0B3b3Jrc3BhY2U6LlwiOlxuICB2ZXJzaW9uOiAwLjAuMC11c2UubG9jYWxcbiAgcmVzb2x1dGlvbjogXCJob3N0Qm9vay1iYWNrQHdvcmtzcGFjZTouXCJcbiAgZGVwZW5kZW5jaWVzOlxuICAgIFwiQHByaXNtYS9jbGllbnRcIjogXCJucG06XjYuNi4wXCJcbiAgICBcIkB0eXBlcy9jb3JzXCI6IFwibnBtOl4yLjguMTdcIlxuICAgIFwiQHR5cGVzL2V4cHJlc3NcIjogXCJucG06XjUuMC4xXCJcbiAgICBcIkB0eXBlcy9tdWx0ZXJcIjogXCJucG06XjEuNC4xMlwiXG4gICAgXCJAdHlwZXMvbm9kZVwiOiBcIm5wbTpeMjIuMTQuMFwiXG4gICAgXCJAdHlwZXMvcGRmLXBhcnNlXCI6IFwibnBtOl4xLjEuNVwiXG4gICAgYXhpb3M6IFwibnBtOl4xLjguNFwiXG4gICAgY29yczogXCJucG06XjIuOC41XCJcbiAgICBkb3RlbnY6IFwibnBtOl4xNi41LjBcIlxuICAgIGV4cHJlc3M6IFwibnBtOl41LjEuMFwiXG4gICAgZm9ybS1kYXRhOiBcIm5wbTpeNC4wLjJcIlxuICAgIGx1Y2lkZS1yZWFjLi4uIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMTU4MlM5cENUSnNBWnJKd3pKTXRqRGIifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCIsImZvbGRlclJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjozLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In19fV0sInJlc3BvbnNlX3RleHQiOiJNYWludGVuYW50IHF1ZSBqJ2FpIHVuZSBib25uZSBjb21wcsOpaGVuc2lvbiBkZXMgZmljaGllcnMgY29uY2VybsOpcywgamUgdmFpcyDDqWxhYm9yZXIgdW4gcGxhbiBkw6l0YWlsbMOpIHBvdXIgaW1wbMOpbWVudGVyIGxlcyBtb2RpZmljYXRpb25zIGRlbWFuZMOpZXMuXG5cbiMjIFBsYW4gZCdhY3Rpb25cblxuMS4gKipNb2RpZmllciBsZSBjb21wb3NhbnQgQm9va0VkaXRGb3JtLnRzeCoqIHBvdXIgOlxuICAgLSBBam91dGVyIHVuIMOpdGF0IHBvdXIgc3VpdnJlIHNpIGRlcyBtb2RpZmljYXRpb25zIG9udCDDqXTDqSBlZmZlY3R1w6llc1xuICAgLSBDaGFuZ2VyIGxlIHRleHRlIGR1IGJvdXRvbiBlbiBmb25jdGlvbiBkZSBsJ8OpdGF0IGRlcyBtb2RpZmljYXRpb25zXG4gICAtIEltcGzDqW1lbnRlciBsYSBsb2dpcXVlIGRlIHJlZGlyZWN0aW9uIHZlcnMgbGEgcGFnZSBkJ2FjY3VlaWwgc2kgYXVjdW5lIG1vZGlmaWNhdGlvbiBuJ2Egw6l0w6kgZmFpdGVcbiAgIC0gSW1wbMOpbWVudGVyIGxhIHJlcXXDqnRlIFBVVCB2ZXJzIGwnQVBJIHBvdXIgbWV0dHJlIMOgIGpvdXIgbGVzIGRvbm7DqWVzXG5cbjIuICoqTW9kaWZpZXIgbGUgZmljaGllciBvd25lci1lZGl0LWJvb2svcGFnZS50c3gqKiBwb3VyIDpcbiAgIC0gTWV0dHJlIMOgIGpvdXIgbGUgc3RhdGUgYm9va0RhdGEgYXZlYyBsZXMgZG9ubsOpZXMgcsOpY3Vww6lyw6llcyBhcHLDqHMgbGEgbWlzZSDDoCBqb3VyXG5cblZvaWNpIGxlIHBsYW4gZMOpdGFpbGzDqSBkZXMgbW9kaWZpY2F0aW9ucyDDoCBhcHBvcnRlciA6XG5cbiMjIyAxLiBNb2RpZmljYXRpb24gZGUgc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeFxuLSBBam91dGVyIHVuIMOpdGF0IGBpc01vZGlmaWVkYCBwb3VyIHN1aXZyZSBzaSBkZXMgbW9kaWZpY2F0aW9ucyBvbnQgw6l0w6kgZWZmZWN0dcOpZXNcbi0gQWpvdXRlciB1biBob29rIGB1c2VSb3V0ZXJgIHBvdXIgZ8OpcmVyIGxhIHJlZGlyZWN0aW9uXG4tIE1vZGlmaWVyIGxhIGZvbmN0aW9uIGBoYW5kbGVGb3JtU3VibWl0YCBwb3VyIDpcbiAgLSBWw6lyaWZpZXIgc2kgZGVzIG1vZGlmaWNhdGlvbnMgb250IMOpdMOpIGVmZmVjdHXDqWVzXG4gIC0gUmVkaXJpZ2VyIHZlcnMgbGEgcGFnZSBkJ2FjY3VlaWwgc2kgYXVjdW5lIG1vZGlmaWNhdGlvbiBuJ2Egw6l0w6kgZmFpdGVcbiAgLSBFbnZveWVyIHVuZSByZXF1w6p0ZSBQVVQgw6AgbCdBUEkgc2kgZGVzIG1vZGlmaWNhdGlvbnMgb250IMOpdMOpIGVmZmVjdHXDqWVzXG4tIE1vZGlmaWVyIGxlIHRleHRlIGR1IGJvdXRvbiBlbiBmb25jdGlvbiBkZSBsJ8OpdGF0IGRlcyBtb2RpZmljYXRpb25zXG5cbiMjIyAyLiBNb2RpZmljYXRpb24gZGUgc3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3hcbi0gTW9kaWZpZXIgbGEgZm9uY3Rpb24gYG9uU3VibWl0YCBwb3VyIG1ldHRyZSDDoCBqb3VyIGxlIHN0YXRlIGBib29rRGF0YWAgYXZlYyBsZXMgZG9ubsOpZXMgcsOpY3Vww6lyw6llc1xuLSBTYXV2ZWdhcmRlciBsZXMgZG9ubsOpZXMgbWlzZXMgw6Agam91ciBkYW5zIGxlIGxvY2FsU3RvcmFnZVxuXG5Db21tZW7Dp29ucyBwYXIgaW1wbMOpbWVudGVyIGNlcyBtb2RpZmljYXRpb25zLlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImMwZmI2NGY2LWZhM2UtNGIyZC04NDM4LTY0OTg0OGY2Y2I3MCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFTVEpmYnE0eXBhS1lnZW9VVjc3d0hnIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJ2aWV3XCIsIFwicGF0aFwiOiBcInNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4XCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiIifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3g6XG4gICAgIDFcdCd1c2UgY2xpZW50JztcbiAgICAgMlx0XG4gICAgIDNcdGltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuICAgICA0XHRpbXBvcnQgeyB1c2VGb3JtLCB1c2VGaWVsZEFycmF5IH0gZnJvbSAncmVhY3QtaG9vay1mb3JtJztcbiAgICAgNVx0aW1wb3J0IHsgem9kUmVzb2x2ZXIgfSBmcm9tICdAaG9va2Zvcm0vcmVzb2x2ZXJzL3pvZCc7XG4gICAgIDZcdGltcG9ydCB7IEJvb2tEYXRhIH0gZnJvbSAnQC90eXBlcy9Cb29rRGF0YSc7XG4gICAgIDdcdGltcG9ydCB7IEJvb2tGb3JtU2NoZW1hLCBCb29rRm9ybVZhbHVlc1R5cGUgfSBmcm9tICcuL3NjaGVtYXMvQm9va0Zvcm1TY2hlbWEnO1xuICAgICA4XHRpbXBvcnQgSW5wdXRGb3JtIGZyb20gJy4vSW5wdXRGb3JtJztcbiAgICAgOVx0aW1wb3J0IHsgUGx1c0NpcmNsZSwgUGFsbXRyZWUsIFBsYW5lLCBIb21lLCBNYXBQaW4gfSBmcm9tICdsdWNpZGUtcmVhY3QnO1xuICAgIDEwXHRpbXBvcnQgUmVjb21tZW5kYXRpb24gZnJvbSAnLi9SZWNvbW1lbmRhdGlvbic7XG4gICAgMTFcdGltcG9ydCB7IG1vdGlvbiB9IGZyb20gJ2ZyYW1lci1tb3Rpb24nO1xuICAgIDEyXHRpbXBvcnQgeyBBY2NvcmRpb24sIEFjY29yZGlvbkNvbnRlbnQsIEFjY29yZGlvbkl0ZW0sIEFjY29yZGlvblRyaWdnZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvYWNjb3JkaW9uJztcbiAgICAxM1x0XG4gICAgMTRcdGNvbnN0IGNvbnZlcnRCb29rRGF0YVRvRm9ybVZhbHVlcyA9IChkYXRhOiBCb29rRGF0YSB8IHVuZGVmaW5lZCk6IEJvb2tGb3JtVmFsdWVzVHlwZSA9PiB7XG4gICAgMTVcdCAgcmV0dXJuIHtcbiAgICAxNlx0ICAgIGlkOiBkYXRhPy5pZCxcbiAgICAxN1x0ICAgIGFycml2YWxUaW1lOiBkYXRhPy5hcnJpdmFsVGltZSB8fCAnJyxcbiAgICAxOFx0ICAgIGFjY2Vzc0luc3RydWN0aW9uczogZGF0YT8uYWNjZXNzSW5zdHJ1Y3Rpb25zIHx8ICcnLFxuICAgIDE5XHQgICAgYXJyaXZhbEFkZGl0aW9uYWxJbmZvOiBkYXRhPy5hcnJpdmFsQWRkaXRpb25hbEluZm8gfHwgJycsXG4gICAgMjBcdCAgICBkZXBhcnR1cmVUaW1lOiBkYXRhPy5kZXBhcnR1cmVUaW1lIHx8ICcnLFxuICAgIDIxXHQgICAgZXhpdEluc3RydWN0aW9uczogZGF0YT8uZXhpdEluc3RydWN0aW9ucyB8fCAnJyxcbiAgICAyMlx0ICAgIGRlcGFydHVyZUFkZGl0aW9uYWxJbmZvOiBkYXRhPy5kZXBhcnR1cmVBZGRpdGlvbmFsSW5mbyB8fCAnJyxcbiAgICAyM1x0ICAgIHdpZmlOYW1lOiBkYXRhPy53aWZpTmFtZSB8fCAnJyxcbiAgICAyNFx0ICAgIHdpZmlQYXNzd29yZDogZGF0YT8ud2lmaVBhc3N3b3JkIHx8ICcnLFxuICAgIDI1XHQgICAgaG91c2VSdWxlczogZGF0YT8uaG91c2VSdWxlcyB8fCAnJyxcbiAgICAyNlx0ICAgIG93bmVyQ29udGFjdDogZGF0YT8ub3duZXJDb250YWN0IHx8ICcnLFxuICAgIDI3XHQgICAgb3duZXJOYW1lOiBkYXRhPy5vd25lck5hbWUgfHwgJycsXG4gICAgMjhcdCAgICBnZW5lcmFsSW5mbzogZGF0YT8uZ2VuZXJhbEluZm8gfHwgJycsXG4gICAgMjlcdCAgICByZWNvbW1lbmRhdGlvbnM6IGRhdGE/LnJlY29tbWVuZGF0aW9ucyB8fCBbXSxcbiAgICAzMFx0ICB9O1xuICAgIDMxXHR9O1xuICAgIDMyXHRcbiAgICAzM1x0Y29uc3QgY29udmVydEZvcm1WYWx1ZXNUb0Jvb2tEYXRhID0gKHZhbHVlczogQm9va0Zvcm1WYWx1ZXNUeXBlKTogQm9va0RhdGEgPT4ge1xuICAgIDM0XHQgIHJldHVybiB7XG4gICAgMzVcdCAgICBpZDogdmFsdWVzLmlkLFxuICAgIDM2XHQgICAgYXJyaXZhbFRpbWU6IHZhbHVlcy5hcnJpdmFsVGltZSxcbiAgICAzN1x0ICAgIGFjY2Vzc0luc3RydWN0aW9uczogdmFsdWVzLmFjY2Vzc0luc3RydWN0aW9ucyxcbiAgICAzOFx0ICAgIGFycml2YWxBZGRpdGlvbmFsSW5mbzogdmFsdWVzLmFycml2YWxBZGRpdGlvbmFsSW5mbyB8fCAnJyxcbiAgICAzOVx0ICAgIGRlcGFydHVyZVRpbWU6IHZhbHVlcy5kZXBhcnR1cmVUaW1lLFxuICAgIDQwXHQgICAgZXhpdEluc3RydWN0aW9uczogdmFsdWVzLmV4aXRJbnN0cnVjdGlvbnMsXG4gICAgNDFcdCAgICBkZXBhcnR1cmVBZGRpdGlvbmFsSW5mbzogdmFsdWVzLmRlcGFydHVyZUFkZGl0aW9uYWxJbmZvIHx8ICcnLFxuICAgIDQyXHQgICAgd2lmaU5hbWU6IHZhbHVlcy53aWZpTmFtZSxcbiAgICA0M1x0ICAgIHdpZmlQYXNzd29yZDogdmFsdWVzLndpZmlQYXNzd29yZCxcbiAgICA0NFx0ICAgIGhvdXNlUnVsZXM6IHZhbHVlcy5ob3VzZVJ1bGVzLFxuICAgIDQ1XHQgICAgb3duZXJDb250YWN0OiB2YWx1ZXMub3duZXJDb250YWN0LFxuICAgIDQ2XHQgICAgb3duZXJOYW1lOiB2YWx1ZXMub3duZXJOYW1lLFxuICAgIDQ3XHQgICAgZ2VuZXJhbEluZm86IHZhbHVlcy5nZW5lcmFsSW5mbyB8fCAnJyxcbiAgICA0OFx0ICAgIHJlY29tbWVuZGF0aW9uczogdmFsdWVzLnJlY29tbWVuZGF0aW9ucyB8fCBbXSxcbiAgICA0OVx0ICB9O1xuICAgIDUwXHR9O1xuICAgIDUxXHRcbiAgICA1Mlx0aW50ZXJmYWNlIEJvb2tFZGl0Rm9ybVByb3BzIHtcbiAgICA1M1x0ICBpbml0aWFsRGF0YT86IEJvb2tEYXRhO1xuICAgIDU0XHQgIG9uU3VibWl0PzogKGRhdGE6IEJvb2tEYXRhKSA9PiB2b2lkO1xuICAgIDU1XHR9XG4gICAgNTZcdFxuICAgIDU3XHRleHBvcnQgZnVuY3Rpb24gQm9va0VkaXRGb3JtKHsgaW5pdGlhbERhdGEsIG9uU3VibWl0IH06IEJvb2tFZGl0Rm9ybVByb3BzKSB7XG4gICAgNThcdCAgY29uc3QgW2lzU2F2aW5nLCBzZXRJc1NhdmluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgNTlcdFxuICAgIDYwXHQgIGNvbnN0IHtcbiAgICA2MVx0ICAgIHJlZ2lzdGVyLFxuICAgIDYyXHQgICAgaGFuZGxlU3VibWl0LFxuICAgIDYzXHQgICAgY29udHJvbCxcbiAgICA2NFx0ICAgIGZvcm1TdGF0ZTogeyBlcnJvcnMgfSxcbiAgICA2NVx0ICB9ID0gdXNlRm9ybTxCb29rRm9ybVZhbHVlc1R5cGU+KHtcbiAgICA2Nlx0ICAgIHJlc29sdmVyOiB6b2RSZXNvbHZlcihCb29rRm9ybVNjaGVtYSkgYXMgYW55LFxuICAgIDY3XHQgICAgZGVmYXVsdFZhbHVlczogY29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzKGluaXRpYWxEYXRhKSxcbiAgICA2OFx0ICB9KTtcbiAgICA2OVx0XG4gICAgNzBcdCAgY29uc3QgeyBmaWVsZHMsIGFwcGVuZCwgcmVtb3ZlIH0gPSB1c2VGaWVsZEFycmF5KHtcbiAgICA3MVx0ICAgIGNvbnRyb2wsXG4gICAgNzJcdCAgICBuYW1lOiBcInJlY29tbWVuZGF0aW9uc1wiLFxuICAgIDczXHQgIH0pO1xuICAgIDc0XHRcbiAgICA3NVx0ICBjb25zdCBoYW5kbGVGb3JtU3VibWl0ID0gKGRhdGE6IEJvb2tGb3JtVmFsdWVzVHlwZSkgPT4ge1xuICAgIDc2XHQgICAgc2V0SXNTYXZpbmcodHJ1ZSk7XG4gICAgNzdcdFxuICAgIDc4XHQgICAgY29uc3QgYm9va0RhdGEgPSBjb252ZXJ0Rm9ybVZhbHVlc1RvQm9va0RhdGEoZGF0YSk7XG4gICAgNzlcdFxuICAgIDgwXHQgICAgaWYgKG9uU3VibWl0KSB7XG4gICAgODFcdCAgICAgIG9uU3VibWl0KGJvb2tEYXRhKTtcbiAgICA4Mlx0ICAgIH1cbiAgICA4M1x0XG4gICAgODRcdCAgICBjb25zb2xlLmxvZygnRG9ubsOpZXMgc291bWlzZXM6JywgYm9va0RhdGEpO1xuICAgIDg1XHRcbiAgICA4Nlx0ICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIDg3XHQgICAgICBzZXRJc1NhdmluZyhmYWxzZSk7XG4gICAgODhcdCAgICB9LCAxMDAwKTtcbiAgICA4OVx0ICB9O1xuICAgIDkwXHRcbiAgICA5MVx0ICBjb25zdCBjb250YWluZXJWYXJpYW50cyA9IHtcbiAgICA5Mlx0ICAgIGhpZGRlbjogeyBvcGFjaXR5OiAwIH0sXG4gICAgOTNcdCAgICB2aXNpYmxlOiB7XG4gICAgOTRcdCAgICAgIG9wYWNpdHk6IDEsXG4gICAgOTVcdCAgICAgIHRyYW5zaXRpb246IHtcbiAgICA5Nlx0ICAgICAgICBzdGFnZ2VyQ2hpbGRyZW46IDAuMlxuICAgIDk3XHQgICAgICB9XG4gICAgOThcdCAgICB9XG4gICAgOTlcdCAgfTtcbiAgIDEwMFx0XG4gICAxMDFcdCAgY29uc3QgaXRlbVZhcmlhbnRzID0ge1xuICAgMTAyXHQgICAgaGlkZGVuOiB7IHk6IDIwLCBvcGFjaXR5OiAwIH0sXG4gICAxMDNcdCAgICB2aXNpYmxlOiB7XG4gICAxMDRcdCAgICAgIHk6IDAsXG4gICAxMDVcdCAgICAgIG9wYWNpdHk6IDEsXG4gICAxMDZcdCAgICAgIHRyYW5zaXRpb246IHtcbiAgIDEwN1x0ICAgICAgICB0eXBlOiAnc3ByaW5nJyxcbiAgIDEwOFx0ICAgICAgICBzdGlmZm5lc3M6IDEwMCxcbiAgIDEwOVx0ICAgICAgICBkYW1waW5nOiAxMlxuICAgMTEwXHQgICAgICB9XG4gICAxMTFcdCAgICB9XG4gICAxMTJcdCAgfTtcbiAgIDExM1x0XG4gICAxMTRcdCAgcmV0dXJuIChcbiAgIDExNVx0ICAgIDxtb3Rpb24uZm9ybVxuICAgMTE2XHQgICAgICBpbml0aWFsPVwiaGlkZGVuXCJcbiAgIDExN1x0ICAgICAgYW5pbWF0ZT1cInZpc2libGVcIlxuICAgMTE4XHQgICAgICB2YXJpYW50cz17Y29udGFpbmVyVmFyaWFudHN9XG4gICAxMTlcdCAgICAgIG9uU3VibWl0PXtoYW5kbGVTdWJtaXQoaGFuZGxlRm9ybVN1Ym1pdCBhcyBhbnkpfVxuICAgMTIwXHQgICAgICBjbGFzc05hbWU9XCJzcGFjZS15LTggcm91bmRlZC14bCBiZy1ncmFkaWVudC10by1iciBmcm9tLW9yYW5nZS01MCB0by1hbWJlci01MCBwLTggc2hhZG93LWxnIGJvcmRlciBib3JkZXItYW1iZXItMTAwXCJcbiAgIDEyMVx0ICAgID5cbiAgIDEyMlx0ICAgICAgPEFjY29yZGlvbiB0eXBlPVwic2luZ2xlXCIgY29sbGFwc2libGUgIGNsYXNzTmFtZT1cInctZnVsbCBzcGFjZS15LTRcIj5cbiAgIDEyM1x0ICAgICAgPEFjY29yZGlvbkl0ZW0gdmFsdWU9XCJhcnJpdmFsXCIgY2xhc3NOYW1lPVwiYm9yZGVyLW5vbmVcIiA+XG4gICAxMjRcdCAgICAgICAgPG1vdGlvbi5kaXZcbiAgIDEyNVx0ICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAxMjZcdCAgICAgICAgICBjbGFzc05hbWU9XCJiZy13aGl0ZS84MCByb3VuZGVkLWxnIHNoYWRvdy1zbSBib3JkZXItbC00IGJvcmRlci1bI2YwNGMyM10gb3ZlcmZsb3ctaGlkZGVuXCJcbiAgIDEyN1x0ICAgICAgICA+XG4gICAxMjhcdCAgICAgICAgICA8QWNjb3JkaW9uVHJpZ2dlciBjbGFzc05hbWU9XCJweC02IHB5LTQgaG92ZXI6bm8tdW5kZXJsaW5lIGhvdmVyOmJnLW9yYW5nZS01MC81MCB0cmFuc2l0aW9uLWFsbFwiPlxuICAgMTI5XHQgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtc2VtaWJvbGQgdGV4dC1bI2YwNGMyM10gZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgIDEzMFx0ICAgICAgICAgICAgICA8UGxhbmUgY2xhc3NOYW1lPVwiaC01IHctNVwiIC8+IEFycml2w6llXG4gICAxMzFcdCAgICAgICAgICAgIDwvc3Bhbj5cbiAgIDEzMlx0ICAgICAgICAgIDwvQWNjb3JkaW9uVHJpZ2dlcj5cbiAgIDEzM1x0ICAgICAgICAgIDxBY2NvcmRpb25Db250ZW50IGNsYXNzTmFtZT1cInB4LTYgc3BhY2UteS00XCI+XG4gICAxMzRcdFxuICAgMTM1XHQgICAgICAgIDxJbnB1dEZvcm1cbiAgIDEzNlx0ICAgICAgICAgIGxhYmVsPVwiSGV1cmUgZCdhcnJpdsOpZVwiXG4gICAxMzdcdCAgICAgICAgICBuYW1lPVwiYXJyaXZhbFRpbWVcIlxuICAgMTM4XHQgICAgICAgICAgcGxhY2Vob2xkZXI9XCJFeDogMTU6MDBcIlxuICAgMTM5XHQgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgMTQwXHQgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAxNDFcdCAgICAgICAgLz5cbiAgIDE0Mlx0XG4gICAxNDNcdCAgICAgICAgPElucHV0Rm9ybVxuICAgMTQ0XHQgICAgICAgICAgbGFiZWw9XCJJbnN0cnVjdGlvbnMgZCdhY2PDqHNcIlxuICAgMTQ1XHQgICAgICAgICAgbmFtZT1cImFjY2Vzc0luc3RydWN0aW9uc1wiXG4gICAxNDZcdCAgICAgICAgICBwbGFjZWhvbGRlcj1cIkNvbW1lbnQgYWNjw6lkZXIgYXUgbG9nZW1lbnRcIlxuICAgMTQ3XHQgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgMTQ4XHQgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAxNDlcdCAgICAgICAgLz5cbiAgIDE1MFx0XG4gICAxNTFcdCAgICAgICAgPElucHV0Rm9ybVxuICAgMTUyXHQgICAgICAgICAgbGFiZWw9XCJJbmZvcm1hdGlvbnMgc3VwcGzDqW1lbnRhaXJlc1wiXG4gICAxNTNcdCAgICAgICAgICBuYW1lPVwiYXJyaXZhbEFkZGl0aW9uYWxJbmZvXCJcbiAgIDE1NFx0ICAgICAgICAgIHBsYWNlaG9sZGVyPVwiQXV0cmVzIGluZm9ybWF0aW9ucyB1dGlsZXMgcG91ciBsJ2Fycml2w6llXCJcbiAgIDE1NVx0ICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgIDE1Nlx0ICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgMTU3XHQgICAgICAgIC8+XG4gICAxNThcdCAgICAgICAgICA8L0FjY29yZGlvbkNvbnRlbnQ+XG4gICAxNTlcdCAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMTYwXHQgICAgICA8L0FjY29yZGlvbkl0ZW0+XG4gICAxNjFcdFxuICAgMTYyXHQgICAgICA8QWNjb3JkaW9uSXRlbSB2YWx1ZT1cImRlcGFydHVyZVwiIGNsYXNzTmFtZT1cImJvcmRlci1ub25lXCI+XG4gICAxNjNcdCAgICAgICAgPG1vdGlvbi5kaXZcbiAgIDE2NFx0ICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAxNjVcdCAgICAgICAgICBjbGFzc05hbWU9XCJiZy13aGl0ZS84MCByb3VuZGVkLWxnIHNoYWRvdy1zbSBib3JkZXItbC00IGJvcmRlci1waW5rLTQwMCBvdmVyZmxvdy1oaWRkZW5cIlxuICAgMTY2XHQgICAgICAgID5cbiAgIDE2N1x0ICAgICAgICAgIDxBY2NvcmRpb25UcmlnZ2VyIGNsYXNzTmFtZT1cInB4LTYgcHktNCBob3Zlcjpuby11bmRlcmxpbmUgaG92ZXI6YmctcGluay01MC81MCB0cmFuc2l0aW9uLWFsbFwiPlxuICAgMTY4XHQgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtc2VtaWJvbGQgdGV4dC1waW5rLTUwMCBmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgMTY5XHQgICAgICAgICAgICAgIDxQbGFuZSBjbGFzc05hbWU9XCJoLTUgdy01IHJvdGF0ZS0xODBcIiAvPiBEw6lwYXJ0XG4gICAxNzBcdCAgICAgICAgICAgIDwvc3Bhbj5cbiAgIDE3MVx0ICAgICAgICAgIDwvQWNjb3JkaW9uVHJpZ2dlcj5cbiAgIDE3Mlx0ICAgICAgICAgIDxBY2NvcmRpb25Db250ZW50IGNsYXNzTmFtZT1cInB4LTYgc3BhY2UteS00XCI+XG4gICAxNzNcdFxuICAgMTc0XHQgICAgICAgIDxJbnB1dEZvcm1cbiAgIDE3NVx0ICAgICAgICAgIGxhYmVsPVwiSGV1cmUgZGUgZMOpcGFydFwiXG4gICAxNzZcdCAgICAgICAgICBuYW1lPVwiZGVwYXJ0dXJlVGltZVwiXG4gICAxNzdcdCAgICAgICAgICBwbGFjZWhvbGRlcj1cIkV4OiAxMTowMFwiXG4gICAxNzhcdCAgICAgICAgICByZWdpc3Rlcj17cmVnaXN0ZXJ9XG4gICAxNzlcdCAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgIDE4MFx0ICAgICAgICAvPlxuICAgMTgxXHRcbiAgIDE4Mlx0ICAgICAgICA8SW5wdXRGb3JtXG4gICAxODNcdCAgICAgICAgICBsYWJlbD1cIkluc3RydWN0aW9ucyBkZSBzb3J0aWVcIlxuICAgMTg0XHQgICAgICAgICAgbmFtZT1cImV4aXRJbnN0cnVjdGlvbnNcIlxuICAgMTg1XHQgICAgICAgICAgcGxhY2Vob2xkZXI9XCJDb21tZW50IHF1aXR0ZXIgbGUgbG9nZW1lbnRcIlxuICAgMTg2XHQgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgMTg3XHQgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAxODhcdCAgICAgICAgLz5cbiAgIDE4OVx0XG4gICAxOTBcdCAgICAgICAgPElucHV0Rm9ybVxuICAgMTkxXHQgICAgICAgICAgbGFiZWw9XCJJbmZvcm1hdGlvbnMgc3VwcGzDqW1lbnRhaXJlc1wiXG4gICAxOTJcdCAgICAgICAgICBuYW1lPVwiZGVwYXJ0dXJlQWRkaXRpb25hbEluZm9cIlxuICAgMTkzXHQgICAgICAgICAgcGxhY2Vob2xkZXI9XCJBdXRyZXMgaW5mb3JtYXRpb25zIHV0aWxlcyBwb3VyIGxlIGTDqXBhcnRcIlxuICAgMTk0XHQgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgMTk1XHQgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAxOTZcdCAgICAgICAgLz5cbiAgIDE5N1x0ICAgICAgICAgIDwvQWNjb3JkaW9uQ29udGVudD5cbiAgIDE5OFx0ICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAxOTlcdCAgICAgIDwvQWNjb3JkaW9uSXRlbT5cbiAgIDIwMFx0XG4gICAyMDFcdCAgICAgIDxBY2NvcmRpb25JdGVtIHZhbHVlPVwiYWNjb21tb2RhdGlvblwiIGNsYXNzTmFtZT1cImJvcmRlci1ub25lXCI+XG4gICAyMDJcdCAgICAgICAgPG1vdGlvbi5kaXZcbiAgIDIwM1x0ICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAyMDRcdCAgICAgICAgICBjbGFzc05hbWU9XCJiZy13aGl0ZS84MCByb3VuZGVkLWxnIHNoYWRvdy1zbSBib3JkZXItbC00IGJvcmRlci1hbWJlci00MDAgb3ZlcmZsb3ctaGlkZGVuXCJcbiAgIDIwNVx0ICAgICAgICA+XG4gICAyMDZcdCAgICAgICAgICA8QWNjb3JkaW9uVHJpZ2dlciBjbGFzc05hbWU9XCJweC02IHB5LTQgaG92ZXI6bm8tdW5kZXJsaW5lIGhvdmVyOmJnLWFtYmVyLTUwLzUwIHRyYW5zaXRpb24tYWxsXCI+XG4gICAyMDdcdCAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQteGwgZm9udC1zZW1pYm9sZCB0ZXh0LWFtYmVyLTUwMCBmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgMjA4XHQgICAgICAgICAgICAgIDxIb21lIGNsYXNzTmFtZT1cImgtNSB3LTVcIiAvPiBIw6liZXJnZW1lbnRcbiAgIDIwOVx0ICAgICAgICAgICAgPC9zcGFuPlxuICAgMjEwXHQgICAgICAgICAgPC9BY2NvcmRpb25UcmlnZ2VyPlxuICAgMjExXHQgICAgICAgICAgPEFjY29yZGlvbkNvbnRlbnQgY2xhc3NOYW1lPVwicHgtNiBzcGFjZS15LTRcIj5cbiAgIDIxMlx0XG4gICAyMTNcdCAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncmlkIGdyaWQtY29scy0yIGdhcC00XCI+XG4gICAyMTRcdCAgICAgICAgICA8SW5wdXRGb3JtXG4gICAyMTVcdCAgICAgICAgICAgIGxhYmVsPVwiTm9tIGR1IHLDqXNlYXUgV2lmaVwiXG4gICAyMTZcdCAgICAgICAgICAgIG5hbWU9XCJ3aWZpTmFtZVwiXG4gICAyMTdcdCAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiTm9tIGR1IHLDqXNlYXUgV2lmaVwiXG4gICAyMThcdCAgICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgIDIxOVx0ICAgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAyMjBcdCAgICAgICAgICAvPlxuICAgMjIxXHRcbiAgIDIyMlx0ICAgICAgICAgIDxJbnB1dEZvcm1cbiAgIDIyM1x0ICAgICAgICAgICAgbGFiZWw9XCJNb3QgZGUgcGFzc2UgV2lmaVwiXG4gICAyMjRcdCAgICAgICAgICAgIG5hbWU9XCJ3aWZpUGFzc3dvcmRcIlxuICAgMjI1XHQgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIk1vdCBkZSBwYXNzZSBXaWZpXCJcbiAgIDIyNlx0ICAgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgMjI3XHQgICAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgIDIyOFx0ICAgICAgICAgIC8+XG4gICAyMjlcdCAgICAgICAgPC9kaXY+XG4gICAyMzBcdFxuICAgMjMxXHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS0yXCI+XG4gICAyMzJcdCAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImhvdXNlUnVsZXNcIiBjbGFzc05hbWU9XCJ0ZXh0LXNtIGZvbnQtbWVkaXVtXCI+XG4gICAyMzNcdCAgICAgICAgICAgIFLDqGdsZXMgZGUgbGEgbWFpc29uXG4gICAyMzRcdCAgICAgICAgICA8L2xhYmVsPlxuICAgMjM1XHQgICAgICAgICAgPHRleHRhcmVhXG4gICAyMzZcdCAgICAgICAgICAgIGlkPVwiaG91c2VSdWxlc1wiXG4gICAyMzdcdCAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRW50cmV6IGNoYXF1ZSByw6hnbGUgc3VyIHVuZSBub3V2ZWxsZSBsaWduZVwiXG4gICAyMzhcdCAgICAgICAgICAgIHsuLi5yZWdpc3RlcignaG91c2VSdWxlcycpfVxuICAgMjM5XHQgICAgICAgICAgICBjbGFzc05hbWU9e2B3LWZ1bGwgbWluLWgtWzEwMHB4XSByb3VuZGVkLW1kIGJvcmRlciAke2Vycm9ycy5ob3VzZVJ1bGVzID8gJ2JvcmRlci1kZXN0cnVjdGl2ZScgOiAnYm9yZGVyLWlucHV0J30gYmctdHJhbnNwYXJlbnQgcHgtMyBweS0yIHRleHQtc20gc2hhZG93LXNtYH1cbiAgIDI0MFx0ICAgICAgICAgIC8+XG4gICAyNDFcdCAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXhzIHRleHQtbXV0ZWQtZm9yZWdyb3VuZFwiPkVudHJleiBjaGFxdWUgcsOoZ2xlIHN1ciB1bmUgbm91dmVsbGUgbGlnbmU8L3A+XG4gICAyNDJcdCAgICAgICAgICB7ZXJyb3JzLmhvdXNlUnVsZXMgJiYgKFxuICAgMjQzXHQgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIHRleHQtZGVzdHJ1Y3RpdmVcIj57ZXJyb3JzLmhvdXNlUnVsZXMubWVzc2FnZT8udG9TdHJpbmcoKX08L3A+XG4gICAyNDRcdCAgICAgICAgICApfVxuICAgMjQ1XHQgICAgICAgIDwvZGl2PlxuICAgMjQ2XHRcbiAgIDI0N1x0ICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyaWQgZ3JpZC1jb2xzLTIgZ2FwLTRcIj5cbiAgIDI0OFx0ICAgICAgICAgIDxJbnB1dEZvcm1cbiAgIDI0OVx0ICAgICAgICAgICAgbGFiZWw9XCJOb20gZHUgcHJvcHJpw6l0YWlyZVwiXG4gICAyNTBcdCAgICAgICAgICAgIG5hbWU9XCJvd25lck5hbWVcIlxuICAgMjUxXHQgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlZvdHJlIG5vbVwiXG4gICAyNTJcdCAgICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgIDI1M1x0ICAgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAyNTRcdCAgICAgICAgICAvPlxuICAgMjU1XHRcbiAgIDI1Nlx0ICAgICAgICAgIDxJbnB1dEZvcm1cbiAgIDI1N1x0ICAgICAgICAgICAgbGFiZWw9XCJDb250YWN0IGR1IHByb3ByacOpdGFpcmVcIlxuICAgMjU4XHQgICAgICAgICAgICBuYW1lPVwib3duZXJDb250YWN0XCJcbiAgIDI1OVx0ICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJWb3RyZSBudW3DqXJvIGRlIHTDqWzDqXBob25lXCJcbiAgIDI2MFx0ICAgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgMjYxXHQgICAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgIDI2Mlx0ICAgICAgICAgIC8+XG4gICAyNjNcdCAgICAgICAgPC9kaXY+XG4gICAyNjRcdFxuICAgMjY1XHQgICAgICAgIDxJbnB1dEZvcm1cbiAgIDI2Nlx0ICAgICAgICAgIGxhYmVsPVwiSW5mb3JtYXRpb25zIGfDqW7DqXJhbGVzXCJcbiAgIDI2N1x0ICAgICAgICAgIG5hbWU9XCJnZW5lcmFsSW5mb1wiXG4gICAyNjhcdCAgICAgICAgICBwbGFjZWhvbGRlcj1cIkF1dHJlcyBpbmZvcm1hdGlvbnMgdXRpbGVzIHN1ciBsZSBsb2dlbWVudFwiXG4gICAyNjlcdCAgICAgICAgICByZWdpc3Rlcj17cmVnaXN0ZXJ9XG4gICAyNzBcdCAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgIDI3MVx0ICAgICAgICAvPlxuICAgMjcyXHQgICAgICAgICAgPC9BY2NvcmRpb25Db250ZW50PlxuICAgMjczXHQgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDI3NFx0ICAgICAgPC9BY2NvcmRpb25JdGVtPlxuICAgMjc1XHRcbiAgIDI3Nlx0ICAgICAgPEFjY29yZGlvbkl0ZW0gdmFsdWU9XCJyZWNvbW1lbmRhdGlvbnNcIiBjbGFzc05hbWU9XCJib3JkZXItbm9uZVwiPlxuICAgMjc3XHQgICAgICAgIDxtb3Rpb24uZGl2XG4gICAyNzhcdCAgICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxuICAgMjc5XHQgICAgICAgICAgY2xhc3NOYW1lPVwiYmctd2hpdGUvODAgcm91bmRlZC1sZyBzaGFkb3ctc20gYm9yZGVyLWwtNCBib3JkZXItdGVhbC00MDAgb3ZlcmZsb3ctaGlkZGVuXCJcbiAgIDI4MFx0ICAgICAgICA+XG4gICAyODFcdCAgICAgICAgICA8QWNjb3JkaW9uVHJpZ2dlciBjbGFzc05hbWU9XCJweC02IHB5LTQgaG92ZXI6bm8tdW5kZXJsaW5lIGhvdmVyOmJnLXRlYWwtNTAvNTAgdHJhbnNpdGlvbi1hbGxcIj5cbiAgIDI4Mlx0ICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC14bCBmb250LXNlbWlib2xkIHRleHQtdGVhbC02MDAgZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgIDI4M1x0ICAgICAgICAgICAgICA8TWFwUGluIGNsYXNzTmFtZT1cImgtNSB3LTVcIiAvPiBSZWNvbW1hbmRhdGlvbnNcbiAgIDI4NFx0ICAgICAgICAgICAgPC9zcGFuPlxuICAgMjg1XHQgICAgICAgICAgPC9BY2NvcmRpb25UcmlnZ2VyPlxuICAgMjg2XHQgICAgICAgICAgPEFjY29yZGlvbkNvbnRlbnQgY2xhc3NOYW1lPVwicHgtNiBzcGFjZS15LTRcIj5cbiAgIDI4N1x0ICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LXRlYWwtNzAwLzcwXCI+QWpvdXRleiBkZXMgcmVjb21tYW5kYXRpb25zIHBvdXIgdm9zIGludml0w6lzIChyZXN0YXVyYW50cywgYWN0aXZpdMOpcywgYmFycywgZXRjLik8L3A+XG4gICAyODhcdFxuICAgMjg5XHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS00XCI+XG4gICAyOTBcdCAgICAgICAgICB7ZmllbGRzLm1hcCgoZmllbGQsIGluZGV4KSA9PiAoXG4gICAyOTFcdCAgICAgICAgICAgIDxSZWNvbW1lbmRhdGlvblxuICAgMjkyXHQgICAgICAgICAgICAgIGtleT17ZmllbGQuaWR9XG4gICAyOTNcdCAgICAgICAgICAgICAgZmllbGQ9e2ZpZWxkfVxuICAgMjk0XHQgICAgICAgICAgICAgIGluZGV4PXtpbmRleH1cbiAgIDI5NVx0ICAgICAgICAgICAgICByZWdpc3Rlcj17cmVnaXN0ZXJ9XG4gICAyOTZcdCAgICAgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAyOTdcdCAgICAgICAgICAgICAgcmVtb3ZlPXtyZW1vdmV9XG4gICAyOThcdCAgICAgICAgICAgIC8+XG4gICAyOTlcdCAgICAgICAgICApKX1cbiAgIDMwMFx0XG4gICAzMDFcdCAgICAgICAgICA8bW90aW9uLmJ1dHRvblxuICAgMzAyXHQgICAgICAgICAgICB3aGlsZUhvdmVyPXt7IHNjYWxlOiAxLjAyIH19XG4gICAzMDNcdCAgICAgICAgICAgIHdoaWxlVGFwPXt7IHNjYWxlOiAwLjk4IH19XG4gICAzMDRcdCAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgMzA1XHQgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBhcHBlbmQoeyBuYW1lOiAnJywgdHlwZTogJycgYXMgYW55LCBhZGRyZXNzOiAnJywgZGVzY3JpcHRpb246ICcnIH0pfVxuICAgMzA2XHQgICAgICAgICAgICBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciB3LWZ1bGwgcHktMyBweC00IGJvcmRlciBib3JkZXItZGFzaGVkIHJvdW5kZWQtbWQgYmctZ3JhZGllbnQtdG8tciBmcm9tLXRlYWwtNDAwIHRvLXRlYWwtMzAwIHRleHQtd2hpdGUgaG92ZXI6ZnJvbS10ZWFsLTUwMCBob3Zlcjp0by10ZWFsLTQwMCB0cmFuc2l0aW9uLWFsbCBzaGFkb3ctc20gY3Vyc29yLXBvaW50ZXJcIlxuICAgMzA3XHQgICAgICAgICAgPlxuICAgMzA4XHQgICAgICAgICAgICA8UGx1c0NpcmNsZSBzaXplPXsxOH0gY2xhc3NOYW1lPVwibXItMlwiIC8+XG4gICAzMDlcdCAgICAgICAgICAgIEFqb3V0ZXIgdW5lIHJlY29tbWFuZGF0aW9uXG4gICAzMTBcdCAgICAgICAgICA8L21vdGlvbi5idXR0b24+XG4gICAzMTFcdCAgICAgICAgPC9kaXY+XG4gICAzMTJcdCAgICAgICAgICA8L0FjY29yZGlvbkNvbnRlbnQ+XG4gICAzMTNcdCAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMzE0XHQgICAgICA8L0FjY29yZGlvbkl0ZW0+XG4gICAzMTVcdCAgICAgIDwvQWNjb3JkaW9uPlxuICAgMzE2XHRcbiAgIDMxN1x0ICAgICAgPG1vdGlvbi5kaXZcbiAgIDMxOFx0ICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxuICAgMzE5XHQgICAgICAgIGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1lbmQgbXQtOFwiXG4gICAzMjBcdCAgICAgID5cbiAgIDMyMVx0ICAgICAgICA8bW90aW9uLmJ1dHRvblxuICAgMzIyXHQgICAgICAgICAgd2hpbGVIb3Zlcj17eyBzY2FsZTogMS4wNSB9fVxuICAgMzIzXHQgICAgICAgICAgd2hpbGVUYXA9e3sgc2NhbGU6IDAuOTUgfX1cbiAgIDMyNFx0ICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgMzI1XHQgICAgICAgICAgZGlzYWJsZWQ9e2lzU2F2aW5nfVxuICAgMzI2XHQgICAgICAgICAgY2xhc3NOYW1lPVwicHgtNiBweS0zIGJnLWdyYWRpZW50LXRvLXIgZnJvbS1bI2YwNGMyM10gdG8tcGluay01MDAgdGV4dC13aGl0ZSByb3VuZGVkLW1kIGhvdmVyOmZyb20tWyNmMDRjMjNdIGhvdmVyOnRvLXBpbmstNDAwIHRyYW5zaXRpb24tYWxsIHNoYWRvdy1tZCBkaXNhYmxlZDpvcGFjaXR5LTUwIGZvbnQtbWVkaXVtXCJcbiAgIDMyN1x0ICAgICAgICA+XG4gICAzMjhcdCAgICAgICAgICB7aXNTYXZpbmcgPyAnQ3LDqWF0aW9uIGVuIGNvdXJzLi4uJyA6ICdDcsOpZXIgbW9uIGxpdnJldCd9XG4gICAzMjlcdCAgICAgICAgPC9tb3Rpb24uYnV0dG9uPlxuICAgMzMwXHQgICAgICA8L21vdGlvbi5kaXY+XG4gICAzMzFcdCAgICA8L21vdGlvbi5mb3JtPlxuICAgMzMyXHQgICk7XG4gICAzMzNcdH1cbiAgIDMzNFx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAzMzRcbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDFHelVWTUppRU01bXV3WUZ1QmZxWjRzIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQiLCJmb2xkZXJSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MywiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjYzZTlmZjM3LWMyNWEtNDU2Mi04ODFlLWU5YTJjOTBjODRlMCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFQZHFQYVZMVkxiekZMdzd5emNyTUtwIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4XCIsIFwic3RyX3JlcGxhY2VfZW50cmllc1wiOiBbe1wib2xkX3N0clwiOiBcIid1c2UgY2xpZW50JztcXG5cXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcXG5pbXBvcnQgeyB1c2VGb3JtLCB1c2VGaWVsZEFycmF5IH0gZnJvbSAncmVhY3QtaG9vay1mb3JtJztcXG5pbXBvcnQgeyB6b2RSZXNvbHZlciB9IGZyb20gJ0Bob29rZm9ybS9yZXNvbHZlcnMvem9kJztcXG5pbXBvcnQgeyBCb29rRGF0YSB9IGZyb20gJ0AvdHlwZXMvQm9va0RhdGEnO1xcbmltcG9ydCB7IEJvb2tGb3JtU2NoZW1hLCBCb29rRm9ybVZhbHVlc1R5cGUgfSBmcm9tICcuL3NjaGVtYXMvQm9va0Zvcm1TY2hlbWEnO1xcbmltcG9ydCBJbnB1dEZvcm0gZnJvbSAnLi9JbnB1dEZvcm0nO1xcbmltcG9ydCB7IFBsdXNDaXJjbGUsIFBhbG10cmVlLCBQbGFuZSwgSG9tZSwgTWFwUGluIH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcXG5pbXBvcnQgUmVjb21tZW5kYXRpb24gZnJvbSAnLi9SZWNvbW1lbmRhdGlvbic7XFxuaW1wb3J0IHsgbW90aW9uIH0gZnJvbSAnZnJhbWVyLW1vdGlvbic7XFxuaW1wb3J0IHsgQWNjb3JkaW9uLCBBY2NvcmRpb25Db250ZW50LCBBY2NvcmRpb25JdGVtLCBBY2NvcmRpb25UcmlnZ2VyIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2FjY29yZGlvbic7XCIsIFwibmV3X3N0clwiOiBcIid1c2UgY2xpZW50JztcXG5cXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xcbmltcG9ydCB7IHVzZUZvcm0sIHVzZUZpZWxkQXJyYXkgfSBmcm9tICdyZWFjdC1ob29rLWZvcm0nO1xcbmltcG9ydCB7IHpvZFJlc29sdmVyIH0gZnJvbSAnQGhvb2tmb3JtL3Jlc29sdmVycy96b2QnO1xcbmltcG9ydCB7IEJvb2tEYXRhIH0gZnJvbSAnQC90eXBlcy9Cb29rRGF0YSc7XFxuaW1wb3J0IHsgQm9va0Zvcm1TY2hlbWEsIEJvb2tGb3JtVmFsdWVzVHlwZSB9IGZyb20gJy4vc2NoZW1hcy9Cb29rRm9ybVNjaGVtYSc7XFxuaW1wb3J0IElucHV0Rm9ybSBmcm9tICcuL0lucHV0Rm9ybSc7XFxuaW1wb3J0IHsgUGx1c0NpcmNsZSwgUGFsbXRyZWUsIFBsYW5lLCBIb21lLCBNYXBQaW4sIEFycm93TGVmdCB9IGZyb20gJ2x1Y2lkZS1yZWFjdCc7XFxuaW1wb3J0IFJlY29tbWVuZGF0aW9uIGZyb20gJy4vUmVjb21tZW5kYXRpb24nO1xcbmltcG9ydCB7IG1vdGlvbiB9IGZyb20gJ2ZyYW1lci1tb3Rpb24nO1xcbmltcG9ydCB7IEFjY29yZGlvbiwgQWNjb3JkaW9uQ29udGVudCwgQWNjb3JkaW9uSXRlbSwgQWNjb3JkaW9uVHJpZ2dlciB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9hY2NvcmRpb24nO1xcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ25leHQvbmF2aWdhdGlvbic7XFxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXCI6IDEsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJcIjogMTJ9LCB7XCJvbGRfc3RyXCI6IFwiZXhwb3J0IGZ1bmN0aW9uIEJvb2tFZGl0Rm9ybSh7IGluaXRpYWxEYXRhLCBvblN1Ym1pdCB9OiBCb29rRWRpdEZvcm1Qcm9wcykge1xcbiAgY29uc3QgW2lzU2F2aW5nLCBzZXRJc1NhdmluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XFxuXFxuICBjb25zdCB7XFxuICAgIHJlZ2lzdGVyLFxcbiAgICBoYW5kbGVTdWJtaXQsXFxuICAgIGNvbnRyb2wsXFxuICAgIGZvcm1TdGF0ZTogeyBlcnJvcnMgfSxcXG4gIH0gPSB1c2VGb3JtPEJvb2tGb3JtVmFsdWVzVHlwZT4oe1xcbiAgICByZXNvbHZlcjogem9kUmVzb2x2ZXIoQm9va0Zvcm1TY2hlbWEpIGFzIGFueSxcXG4gICAgZGVmYXVsdFZhbHVlczogY29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzKGluaXRpYWxEYXRhKSxcXG4gIH0pO1xcblxcbiAgY29uc3QgeyBmaWVsZHMsIGFwcGVuZCwgcmVtb3ZlIH0gPSB1c2VGaWVsZEFycmF5KHtcXG4gICAgY29udHJvbCxcXG4gICAgbmFtZTogXFxcInJlY29tbWVuZGF0aW9uc1xcXCIsXFxuICB9KTtcXG5cXG4gIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XFxuICAgIHNldElzU2F2aW5nKHRydWUpO1xcblxcbiAgICBjb25zdCBib29rRGF0YSA9IGNvbnZlcnRGb3JtVmFsdWVzVG9Cb29rRGF0YShkYXRhKTtcXG5cXG4gICAgaWYgKG9uU3VibWl0KSB7XFxuICAgICAgb25TdWJtaXQoYm9va0RhdGEpO1xcbiAgICB9XFxuXFxuICAgIGNvbnNvbGUubG9nKCdEb25uXFx1MDBlOWVzIHNvdW1pc2VzOicsIGJvb2tEYXRhKTtcXG5cXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XFxuICAgICAgc2V0SXNTYXZpbmcoZmFsc2UpO1xcbiAgICB9LCAxMDAwKTtcXG4gIH07XCIsIFwibmV3X3N0clwiOiBcImV4cG9ydCBmdW5jdGlvbiBCb29rRWRpdEZvcm0oeyBpbml0aWFsRGF0YSwgb25TdWJtaXQgfTogQm9va0VkaXRGb3JtUHJvcHMpIHtcXG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xcbiAgY29uc3QgW2lzU2F2aW5nLCBzZXRJc1NhdmluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XFxuICBjb25zdCBbaXNNb2RpZmllZCwgc2V0SXNNb2RpZmllZF0gPSB1c2VTdGF0ZShmYWxzZSk7XFxuICBjb25zdCBbb3JpZ2luYWxWYWx1ZXMsIHNldE9yaWdpbmFsVmFsdWVzXSA9IHVzZVN0YXRlPHN0cmluZz4oJycpO1xcblxcbiAgY29uc3Qge1xcbiAgICByZWdpc3RlcixcXG4gICAgaGFuZGxlU3VibWl0LFxcbiAgICBjb250cm9sLFxcbiAgICB3YXRjaCxcXG4gICAgZm9ybVN0YXRlOiB7IGVycm9ycywgaXNEaXJ0eSB9LFxcbiAgfSA9IHVzZUZvcm08Qm9va0Zvcm1WYWx1ZXNUeXBlPih7XFxuICAgIHJlc29sdmVyOiB6b2RSZXNvbHZlcihCb29rRm9ybVNjaGVtYSkgYXMgYW55LFxcbiAgICBkZWZhdWx0VmFsdWVzOiBjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMoaW5pdGlhbERhdGEpLFxcbiAgfSk7XFxuXFxuICBjb25zdCB7IGZpZWxkcywgYXBwZW5kLCByZW1vdmUgfSA9IHVzZUZpZWxkQXJyYXkoe1xcbiAgICBjb250cm9sLFxcbiAgICBuYW1lOiBcXFwicmVjb21tZW5kYXRpb25zXFxcIixcXG4gIH0pO1xcblxcbiAgLy8gU3VydmVpbGxlciBsZXMgY2hhbmdlbWVudHMgZGFucyBsZSBmb3JtdWxhaXJlXFxuICBjb25zdCBmb3JtVmFsdWVzID0gd2F0Y2goKTtcXG4gIFxcbiAgdXNlRWZmZWN0KCgpID0+IHtcXG4gICAgLy8gU2F1dmVnYXJkZXIgbGVzIHZhbGV1cnMgaW5pdGlhbGVzIHBvdXIgY29tcGFyYWlzb25cXG4gICAgaWYgKCFvcmlnaW5hbFZhbHVlcykge1xcbiAgICAgIHNldE9yaWdpbmFsVmFsdWVzKEpTT04uc3RyaW5naWZ5KGNvbnZlcnRCb29rRGF0YVRvRm9ybVZhbHVlcyhpbml0aWFsRGF0YSkpKTtcXG4gICAgfVxcbiAgICBcXG4gICAgLy8gVlxcdTAwZTlyaWZpZXIgc2kgZGVzIG1vZGlmaWNhdGlvbnMgb250IFxcdTAwZTl0XFx1MDBlOSBhcHBvcnRcXHUwMGU5ZXNcXG4gICAgY29uc3QgY3VycmVudFZhbHVlcyA9IEpTT04uc3RyaW5naWZ5KGZvcm1WYWx1ZXMpO1xcbiAgICBzZXRJc01vZGlmaWVkKGN1cnJlbnRWYWx1ZXMgIT09IG9yaWdpbmFsVmFsdWVzKTtcXG4gIH0sIFtmb3JtVmFsdWVzLCBvcmlnaW5hbFZhbHVlcywgaW5pdGlhbERhdGFdKTtcXG5cXG4gIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSBhc3luYyAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XFxuICAgIC8vIFNpIGF1Y3VuZSBtb2RpZmljYXRpb24sIHJlZGlyaWdlciB2ZXJzIGxhIHBhZ2UgZCdhY2N1ZWlsXFxuICAgIGlmICghaXNNb2RpZmllZCkge1xcbiAgICAgIHJvdXRlci5wdXNoKCcvJyk7XFxuICAgICAgcmV0dXJuO1xcbiAgICB9XFxuICAgIFxcbiAgICBzZXRJc1NhdmluZyh0cnVlKTtcXG4gICAgY29uc3QgYm9va0RhdGEgPSBjb252ZXJ0Rm9ybVZhbHVlc1RvQm9va0RhdGEoZGF0YSk7XFxuICAgIFxcbiAgICB0cnkge1xcbiAgICAgIGlmIChib29rRGF0YS5pZCkge1xcbiAgICAgICAgLy8gRW52b3llciB1bmUgcmVxdVxcdTAwZWF0ZSBQVVQgcG91ciBtZXR0cmUgXFx1MDBlMCBqb3VyIGxlcyBkb25uXFx1MDBlOWVzXFxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnB1dChgaHR0cDovL2xvY2FsaG9zdDozMDAxL2FwaS9zdGF5LyR7Ym9va0RhdGEuaWR9YCwgYm9va0RhdGEpO1xcbiAgICAgICAgXFxuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcXG4gICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm5cXHUwMGU5ZXMgbWlzZXMgXFx1MDBlMCBqb3VyIGF2ZWMgc3VjY1xcdTAwZThzOicsIHJlc3BvbnNlLmRhdGEpO1xcbiAgICAgICAgICBcXG4gICAgICAgICAgaWYgKG9uU3VibWl0KSB7XFxuICAgICAgICAgICAgb25TdWJtaXQocmVzcG9uc2UuZGF0YSk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgLy8gUGFzIGQnSUQsIGRvbmMgb24gdXRpbGlzZSBsZSBjYWxsYmFjayBvblN1Ym1pdCBzdGFuZGFyZFxcbiAgICAgICAgaWYgKG9uU3VibWl0KSB7XFxuICAgICAgICAgIG9uU3VibWl0KGJvb2tEYXRhKTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XFxuICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgbWlzZSBcXHUwMGUwIGpvdXIgZGVzIGRvbm5cXHUwMGU5ZXM6JywgZXJyb3IpO1xcbiAgICAgIGFsZXJ0KCdVbmUgZXJyZXVyIGVzdCBzdXJ2ZW51ZSBsb3JzIGRlIGxhIG1pc2UgXFx1MDBlMCBqb3VyIGRlcyBkb25uXFx1MDBlOWVzLicpO1xcbiAgICB9IGZpbmFsbHkge1xcbiAgICAgIHNldElzU2F2aW5nKGZhbHNlKTtcXG4gICAgfVxcbiAgfTtcXG4gIFxcbiAgY29uc3QgaGFuZGxlUmV0dXJuSG9tZSA9ICgpID0+IHtcXG4gICAgcm91dGVyLnB1c2goJy8nKTtcXG4gIH07XCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlclwiOiA1NywgXCJvbGRfc3RyX2VuZF9saW5lX251bWJlclwiOiA4OX0sIHtcIm9sZF9zdHJcIjogXCIgICAgICA8bW90aW9uLmRpdlxcbiAgICAgICAgdmFyaWFudHM9e2l0ZW1WYXJpYW50c31cXG4gICAgICAgIGNsYXNzTmFtZT1cXFwiZmxleCBqdXN0aWZ5LWVuZCBtdC04XFxcIlxcbiAgICAgID5cXG4gICAgICAgIDxtb3Rpb24uYnV0dG9uXFxuICAgICAgICAgIHdoaWxlSG92ZXI9e3sgc2NhbGU6IDEuMDUgfX1cXG4gICAgICAgICAgd2hpbGVUYXA9e3sgc2NhbGU6IDAuOTUgfX1cXG4gICAgICAgICAgdHlwZT1cXFwic3VibWl0XFxcIlxcbiAgICAgICAgICBkaXNhYmxlZD17aXNTYXZpbmd9XFxuICAgICAgICAgIGNsYXNzTmFtZT1cXFwicHgtNiBweS0zIGJnLWdyYWRpZW50LXRvLXIgZnJvbS1bI2YwNGMyM10gdG8tcGluay01MDAgdGV4dC13aGl0ZSByb3VuZGVkLW1kIGhvdmVyOmZyb20tWyNmMDRjMjNdIGhvdmVyOnRvLXBpbmstNDAwIHRyYW5zaXRpb24tYWxsIHNoYWRvdy1tZCBkaXNhYmxlZDpvcGFjaXR5LTUwIGZvbnQtbWVkaXVtXFxcIlxcbiAgICAgICAgPlxcbiAgICAgICAgICB7aXNTYXZpbmcgPyAnQ3JcXHUwMGU5YXRpb24gZW4gY291cnMuLi4nIDogJ0NyXFx1MDBlOWVyIG1vbiBsaXZyZXQnfVxcbiAgICAgICAgPC9tb3Rpb24uYnV0dG9uPlxcbiAgICAgIDwvbW90aW9uLmRpdj5cIiwgXCJuZXdfc3RyXCI6IFwiICAgICAgPG1vdGlvbi5kaXZcXG4gICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XFxuICAgICAgICBjbGFzc05hbWU9XFxcImZsZXgganVzdGlmeS1iZXR3ZWVuIG10LThcXFwiXFxuICAgICAgPlxcbiAgICAgICAgeyFpc01vZGlmaWVkICYmIChcXG4gICAgICAgICAgPG1vdGlvbi5idXR0b25cXG4gICAgICAgICAgICB3aGlsZUhvdmVyPXt7IHNjYWxlOiAxLjA1IH19XFxuICAgICAgICAgICAgd2hpbGVUYXA9e3sgc2NhbGU6IDAuOTUgfX1cXG4gICAgICAgICAgICB0eXBlPVxcXCJidXR0b25cXFwiXFxuICAgICAgICAgICAgb25DbGljaz17aGFuZGxlUmV0dXJuSG9tZX1cXG4gICAgICAgICAgICBjbGFzc05hbWU9XFxcInB4LTYgcHktMyBiZy1ncmFkaWVudC10by1yIGZyb20tZ3JheS00MDAgdG8tZ3JheS01MDAgdGV4dC13aGl0ZSByb3VuZGVkLW1kIGhvdmVyOmZyb20tZ3JheS01MDAgaG92ZXI6dG8tZ3JheS02MDAgdHJhbnNpdGlvbi1hbGwgc2hhZG93LW1kIGZvbnQtbWVkaXVtIGZsZXggaXRlbXMtY2VudGVyXFxcIlxcbiAgICAgICAgICA+XFxuICAgICAgICAgICAgPEFycm93TGVmdCBzaXplPXsxOH0gY2xhc3NOYW1lPVxcXCJtci0yXFxcIiAvPlxcbiAgICAgICAgICAgIFJldG91ciBcXHUwMGUwIGwnYWNjdWVpbFxcbiAgICAgICAgICA8L21vdGlvbi5idXR0b24+XFxuICAgICAgICApfVxcbiAgICAgICAgPG1vdGlvbi5idXR0b25cXG4gICAgICAgICAgd2hpbGVIb3Zlcj17eyBzY2FsZTogMS4wNSB9fVxcbiAgICAgICAgICB3aGlsZVRhcD17eyBzY2FsZTogMC45NSB9fVxcbiAgICAgICAgICB0eXBlPVxcXCJzdWJtaXRcXFwiXFxuICAgICAgICAgIGRpc2FibGVkPXtpc1NhdmluZ31cXG4gICAgICAgICAgY2xhc3NOYW1lPVxcXCJweC02IHB5LTMgYmctZ3JhZGllbnQtdG8tciBmcm9tLVsjZjA0YzIzXSB0by1waW5rLTUwMCB0ZXh0LXdoaXRlIHJvdW5kZWQtbWQgaG92ZXI6ZnJvbS1bI2YwNGMyM10gaG92ZXI6dG8tcGluay00MDAgdHJhbnNpdGlvbi1hbGwgc2hhZG93LW1kIGRpc2FibGVkOm9wYWNpdHktNTAgZm9udC1tZWRpdW1cXFwiXFxuICAgICAgICA+XFxuICAgICAgICAgIHtpc1NhdmluZyA/ICdFbnJlZ2lzdHJlbWVudCBlbiBjb3Vycy4uLicgOiBpc01vZGlmaWVkID8gJ0VucmVnaXN0cmVyIGxlcyBtb2RpZmljYXRpb25zJyA6ICdSZXRvdXIgXFx1MDBlMCBsXFxcXCdhY2N1ZWlsJ31cXG4gICAgICAgIDwvbW90aW9uLmJ1dHRvbj5cXG4gICAgICA8L21vdGlvbi5kaXY+XCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlclwiOiAzMTcsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJcIjogMzMwfV19In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJNYWludGVuYW50LCBqZSB2YWlzIG1vZGlmaWVyIGxlcyBmaWNoaWVycyBzZWxvbiBsZSBwbGFuIMOpdGFibGkuIENvbW1lbsOnb25zIHBhciBsZSBjb21wb3NhbnQgQm9va0VkaXRGb3JtLnRzeCA6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4OlxuICAgICAxXHQndXNlIGNsaWVudCc7XG4gICAgIDJcdFxuICAgICAzXHRpbXBvcnQgeyBCb29rRWRpdEZvcm0gfSBmcm9tICdAL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtJztcbiAgICAgNFx0aW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbiAgICAgNVx0aW1wb3J0IHsgQm9va0RhdGEgfSBmcm9tICdAL3R5cGVzL0Jvb2tEYXRhJztcbiAgICAgNlx0aW1wb3J0IHsgbW90aW9uIH0gZnJvbSAnZnJhbWVyLW1vdGlvbic7XG4gICAgIDdcdGltcG9ydCB7IFBhbG10cmVlLCBCb29rLCBTdW4gfSBmcm9tICdsdWNpZGUtcmVhY3QnO1xuICAgICA4XHRpbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tICduZXh0L25hdmlnYXRpb24nO1xuICAgICA5XHRpbXBvcnQge1Bhc3N3b3JkRGlzcGxheX0gZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHMvUGFzc3dvcmREaXNwbGF5XCI7XG4gICAgMTBcdFxuICAgIDExXHRmdW5jdGlvbiBFZGl0Rm9ybUJvb2soKSB7XG4gICAgMTJcdCAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG4gICAgMTNcdCAgY29uc3QgW2Jvb2tEYXRhLCBzZXRCb29rRGF0YV0gPSB1c2VTdGF0ZTxCb29rRGF0YSB8IG51bGw+KG51bGwpO1xuICAgIDE0XHQgIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgICAxNVx0XG4gICAgMTZcdCAgY29uc3QgY29udGFpbmVyVmFyaWFudHMgPSB7XG4gICAgMTdcdCAgICBoaWRkZW46IHsgb3BhY2l0eTogMCB9LFxuICAgIDE4XHQgICAgdmlzaWJsZToge1xuICAgIDE5XHQgICAgICBvcGFjaXR5OiAxLFxuICAgIDIwXHQgICAgICB0cmFuc2l0aW9uOiB7XG4gICAgMjFcdCAgICAgICAgc3RhZ2dlckNoaWxkcmVuOiAwLjJcbiAgICAyMlx0ICAgICAgfVxuICAgIDIzXHQgICAgfVxuICAgIDI0XHQgIH07XG4gICAgMjVcdFxuICAgIDI2XHQgIGNvbnN0IGl0ZW1WYXJpYW50cyA9IHtcbiAgICAyN1x0ICAgIGhpZGRlbjogeyB5OiAyMCwgb3BhY2l0eTogMCB9LFxuICAgIDI4XHQgICAgdmlzaWJsZToge1xuICAgIDI5XHQgICAgICB5OiAwLFxuICAgIDMwXHQgICAgICBvcGFjaXR5OiAxLFxuICAgIDMxXHQgICAgICB0cmFuc2l0aW9uOiB7XG4gICAgMzJcdCAgICAgICAgdHlwZTogJ3NwcmluZycsXG4gICAgMzNcdCAgICAgICAgc3RpZmZuZXNzOiAxMDAsXG4gICAgMzRcdCAgICAgICAgZGFtcGluZzogMTJcbiAgICAzNVx0ICAgICAgfVxuICAgIDM2XHQgICAgfVxuICAgIDM3XHQgIH07XG4gICAgMzhcdFxuICAgIDM5XHQgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgNDBcdCAgICBjb25zdCBzdG9yZWREYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2Jvb2tEYXRhJyk7XG4gICAgNDFcdCAgICBpZiAoc3RvcmVkRGF0YSkge1xuICAgIDQyXHQgICAgICB0cnkge1xuICAgIDQzXHQgICAgICAgIGNvbnN0IHBhcnNlZERhdGEgPSBKU09OLnBhcnNlKHN0b3JlZERhdGEpO1xuICAgIDQ0XHQgICAgICAgIHNldEJvb2tEYXRhKHBhcnNlZERhdGEpO1xuICAgIDQ1XHQgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgIDQ2XHQgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBsb3JzIGRlIGxhIHLDqWN1cMOpcmF0aW9uIGRlcyBkb25uw6llczonLCBlcnJvcik7XG4gICAgNDdcdCAgICAgIH1cbiAgICA0OFx0ICAgIH1cbiAgICA0OVx0ICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgNTBcdCAgfSwgW10pO1xuICAgIDUxXHRcbiAgICA1Mlx0ICByZXR1cm4gKFxuICAgIDUzXHQgICAgPG1vdGlvbi5zZWN0aW9uXG4gICAgNTRcdCAgICAgIGluaXRpYWw9XCJoaWRkZW5cIlxuICAgIDU1XHQgICAgICBhbmltYXRlPVwidmlzaWJsZVwiXG4gICAgNTZcdCAgICAgIHZhcmlhbnRzPXtjb250YWluZXJWYXJpYW50c31cbiAgICA1N1x0ICAgICAgY2xhc3NOYW1lPVwibWluLWgtc2NyZWVuIHctZnVsbCBiZy1ncmFkaWVudC10by1iIGZyb20tb3JhbmdlLTUwIHRvLWFtYmVyLTEwMCBweS0xMlwiXG4gICAgNThcdCAgICA+XG4gICAgNTlcdCAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyIG14LWF1dG8gcHgtNFwiPlxuICAgIDYwXHQgICAgICAgIDxtb3Rpb24uZGl2XG4gICAgNjFcdCAgICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxuICAgIDYyXHQgICAgICAgICAgY2xhc3NOYW1lPVwidy1mdWxsIG1heC13LTR4bCBteC1hdXRvIHAtOCBzcGFjZS15LTggYmctZ3JhZGllbnQtdG8tYiBmcm9tLXdoaXRlIHRvLWFtYmVyLTUwIHJvdW5kZWQteGwgc2hhZG93LWxnIGJvcmRlciBib3JkZXItYW1iZXItMTAwXCJcbiAgICA2M1x0ICAgICAgICA+XG4gICAgNjRcdCAgICAgICAgICA8bW90aW9uLmRpdlxuICAgIDY1XHQgICAgICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxuICAgIDY2XHQgICAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlciBzcGFjZS15LTJcIlxuICAgIDY3XHQgICAgICAgICAgPlxuICAgIDY4XHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGdhcC0zIG1iLTRcIj5cbiAgICA2OVx0ICAgICAgICAgICAgICA8UGFsbXRyZWUgY2xhc3NOYW1lPVwiaC04IHctOCB0ZXh0LVsjZjA0YzIzXVwiIC8+XG4gICAgNzBcdCAgICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQtM3hsIGZvbnQtYm9sZCBiZy1ncmFkaWVudC10by1yIGZyb20tWyNmMDRjMjNdIHRvLXBpbmstNTAwIGJnLWNsaXAtdGV4dCB0ZXh0LXRyYW5zcGFyZW50XCI+XG4gICAgNzFcdCAgICAgICAgICAgICAgICBWb3RyZSBMaXZyZXQgZCdBY2N1ZWlsXG4gICAgNzJcdCAgICAgICAgICAgICAgPC9oMj5cbiAgICA3M1x0ICAgICAgICAgICAgICA8U3VuIGNsYXNzTmFtZT1cImgtOCB3LTggdGV4dC1hbWJlci00MDBcIiAvPlxuICAgIDc0XHQgICAgICAgICAgICA8L2Rpdj5cbiAgICA3NVx0ICAgICAgICAgICAgPG1vdGlvbi5wXG4gICAgNzZcdCAgICAgICAgICAgICAgdmFyaWFudHM9e2l0ZW1WYXJpYW50c31cbiAgICA3N1x0ICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlciB0ZXh0LWxnIHRleHQtZ3JheS03MDBcIlxuICAgIDc4XHQgICAgICAgICAgICA+XG4gICAgNzlcdCAgICAgICAgICAgICAgVm9pY2kgY2UgcXVlIG5vdXMgYXZvbnMgcHUgZ8OpbsOpcmVyIHBvdXIgdm90cmUgbGl2cmV0LlxuICAgIDgwXHQgICAgICAgICAgICA8L21vdGlvbi5wPlxuICAgIDgxXHQgICAgICAgICAgICA8bW90aW9uLnBcbiAgICA4Mlx0ICAgICAgICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxuICAgIDgzXHQgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRleHQtY2VudGVyIHRleHQtZ3JheS02MDBcIlxuICAgIDg0XHQgICAgICAgICAgICA+XG4gICAgODVcdCAgICAgICAgICAgICAgTidow6lzaXRleiBwYXMgw6AgcmVsaXJlIGxlcyBpbmZvcm1hdGlvbnMsIGV0IMOgIGxlcyBtb2RpZmllciBzaSBuw6ljZXNzYWlyZS5cbiAgICA4Nlx0ICAgICAgICAgICAgPC9tb3Rpb24ucD5cbiAgICA4N1x0ICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgICA4OFx0XG4gICAgODlcdCAgICAgICAgICB7aXNMb2FkaW5nID8gKFxuICAgIDkwXHQgICAgICAgICAgICA8bW90aW9uLmRpdlxuICAgIDkxXHQgICAgICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAgOTJcdCAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXIgcHktMTIgZmxleCBmbGV4LWNvbCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgc3BhY2UteS00XCJcbiAgICA5M1x0ICAgICAgICAgICAgPlxuICAgIDk0XHQgICAgICAgICAgICAgIDxCb29rIGNsYXNzTmFtZT1cImgtMTIgdy0xMiB0ZXh0LWFtYmVyLTQwMCBhbmltYXRlLXB1bHNlXCIgLz5cbiAgICA5NVx0ICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LWxnIHRleHQtZ3JheS02MDBcIj5DaGFyZ2VtZW50IGRlIHZvdHJlIGxpdnJldC4uLjwvcD5cbiAgICA5Nlx0ICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctNjQgaC0yIGJnLWdyYXktMjAwIHJvdW5kZWQtZnVsbCBvdmVyZmxvdy1oaWRkZW5cIj5cbiAgICA5N1x0ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaC1mdWxsIGJnLWdyYWRpZW50LXRvLXIgZnJvbS1bI2YwNGMyM10gdG8tcGluay01MDAgYW5pbWF0ZS1bbG9hZGluZ18xLjVzX2Vhc2UtaW4tb3V0X2luZmluaXRlXVwiIHN0eWxlPXt7IHdpZHRoOiAnNzAlJyB9fT48L2Rpdj5cbiAgICA5OFx0ICAgICAgICAgICAgICA8L2Rpdj5cbiAgICA5OVx0ICAgICAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMTAwXHQgICAgICAgICAgKSA6IChcbiAgIDEwMVx0ICAgICAgICAgICAgPG1vdGlvbi5kaXYgdmFyaWFudHM9e2l0ZW1WYXJpYW50c30gY2xhc3NOYW1lPVwic3BhY2UteS04XCI+XG4gICAxMDJcdCAgICAgICAgICAgICAgey8qIEFmZmljaGFnZSBkdSBtb3QgZGUgcGFzc2UgKi99XG4gICAxMDNcdCAgICAgICAgICAgICAge2Jvb2tEYXRhPy5hY2Nlc3NQYXNzd29yZCAmJiBib29rRGF0YT8uaWQgJiYgKFxuICAgMTA0XHQgICAgICAgICAgICAgICAgPG1vdGlvbi5kaXYgdmFyaWFudHM9e2l0ZW1WYXJpYW50c30+XG4gICAxMDVcdCAgICAgICAgICAgICAgICAgIDxQYXNzd29yZERpc3BsYXkgcGFzc3dvcmQ9e2Jvb2tEYXRhLmFjY2Vzc1Bhc3N3b3JkfSBib29rSWQ9e2Jvb2tEYXRhLmlkfSAvPlxuICAgMTA2XHQgICAgICAgICAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMTA3XHQgICAgICAgICAgICAgICl9XG4gICAxMDhcdFxuICAgMTA5XHQgICAgICAgICAgICAgIDxCb29rRWRpdEZvcm1cbiAgIDExMFx0ICAgICAgICAgICAgICAgIGluaXRpYWxEYXRhPXtib29rRGF0YSB8fCB1bmRlZmluZWR9XG4gICAxMTFcdCAgICAgICAgICAgICAgICBvblN1Ym1pdD17KGRhdGEpID0+IHtcbiAgIDExMlx0ICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm7DqWVzIGR1IGZvcm11bGFpcmUgc291bWlzZXM6JywgZGF0YSk7XG4gICAxMTNcdCAgICAgICAgICAgICAgICAgIGFsZXJ0KCdNb2RpZmljYXRpb25zIGVucmVnaXN0csOpZXMgYXZlYyBzdWNjw6hzIScpO1xuICAgMTE0XHQgICAgICAgICAgICAgICAgfX1cbiAgIDExNVx0ICAgICAgICAgICAgICAvPlxuICAgMTE2XHQgICAgICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAxMTdcdCAgICAgICAgICApfVxuICAgMTE4XHQgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDExOVx0ICAgICAgPC9kaXY+XG4gICAxMjBcdFxuICAgMTIxXHQgICAgICA8c3R5bGUganN4IGdsb2JhbD57YFxuICAgMTIyXHQgICAgICAgIEBrZXlmcmFtZXMgbG9hZGluZyB7XG4gICAxMjNcdCAgICAgICAgICAwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTAwJSk7IH1cbiAgIDEyNFx0ICAgICAgICAgIDUwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWCgzMCUpOyB9XG4gICAxMjVcdCAgICAgICAgICAxMDAlIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDEwMCUpOyB9XG4gICAxMjZcdCAgICAgICAgfVxuICAgMTI3XHQgICAgICBgfTwvc3R5bGU+XG4gICAxMjhcdCAgICA8L21vdGlvbi5zZWN0aW9uPlxuICAgMTI5XHQgICk7XG4gICAxMzBcdH1cbiAgIDEzMVx0XG4gICAxMzJcdGV4cG9ydCBkZWZhdWx0IEVkaXRGb3JtQm9vaztcblRvdGFsIGxpbmVzIGluIGZpbGU6IDEzMlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMVNUSmZicTR5cGFLWWdlb1VWNzd3SGcifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCIsImZvbGRlclJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjozLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In19fV0sInJlc3BvbnNlX3RleHQiOiJNYWludGVuYW50LCBqZSB2YWlzIG1vZGlmaWVyIGxlcyBmaWNoaWVycyBzZWxvbiBsZSBwbGFuIMOpdGFibGkuIENvbW1lbsOnb25zIHBhciBsZSBjb21wb3NhbnQgQm9va0VkaXRGb3JtLnRzeCA6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZmFjNmFjNmYtOTRmYy00MmZlLWIyMmYtODFkN2NjMDFkZTE5IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMUo3Q1FnV045Z1kyR3lXNWZpYzg5cFIiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInN0cl9yZXBsYWNlXCIsIFwicGF0aFwiOiBcInNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4XCIsIFwic3RyX3JlcGxhY2VfZW50cmllc1wiOiBbe1wib2xkX3N0clwiOiBcIiAgICAgICAgICAgICAgPEJvb2tFZGl0Rm9ybVxcbiAgICAgICAgICAgICAgICBpbml0aWFsRGF0YT17Ym9va0RhdGEgfHwgdW5kZWZpbmVkfVxcbiAgICAgICAgICAgICAgICBvblN1Ym1pdD17KGRhdGEpID0+IHtcXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRG9ublxcdTAwZTllcyBkdSBmb3JtdWxhaXJlIHNvdW1pc2VzOicsIGRhdGEpO1xcbiAgICAgICAgICAgICAgICAgIGFsZXJ0KCdNb2RpZmljYXRpb25zIGVucmVnaXN0clxcdTAwZTllcyBhdmVjIHN1Y2NcXHUwMGU4cyEnKTtcXG4gICAgICAgICAgICAgICAgfX1cXG4gICAgICAgICAgICAgIC8+XCIsIFwibmV3X3N0clwiOiBcIiAgICAgICAgICAgICAgPEJvb2tFZGl0Rm9ybVxcbiAgICAgICAgICAgICAgICBpbml0aWFsRGF0YT17Ym9va0RhdGEgfHwgdW5kZWZpbmVkfVxcbiAgICAgICAgICAgICAgICBvblN1Ym1pdD17KGRhdGEpID0+IHtcXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRG9ublxcdTAwZTllcyBkdSBmb3JtdWxhaXJlIHNvdW1pc2VzOicsIGRhdGEpO1xcbiAgICAgICAgICAgICAgICAgIC8vIE1ldHRyZSBcXHUwMGUwIGpvdXIgbGUgc3RhdGUgYm9va0RhdGEgYXZlYyBsZXMgZG9ublxcdTAwZTllcyByXFx1MDBlOWN1cFxcdTAwZTlyXFx1MDBlOWVzXFxuICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEoZGF0YSk7XFxuICAgICAgICAgICAgICAgICAgXFxuICAgICAgICAgICAgICAgICAgLy8gU2F1dmVnYXJkZXIgbGVzIGRvbm5cXHUwMGU5ZXMgbWlzZXMgXFx1MDBlMCBqb3VyIGRhbnMgbGUgbG9jYWxTdG9yYWdlXFxuICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xcbiAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgIGFsZXJ0KCdNb2RpZmljYXRpb25zIGVucmVnaXN0clxcdTAwZTllcyBhdmVjIHN1Y2NcXHUwMGU4cyEnKTtcXG4gICAgICAgICAgICAgICAgfX1cXG4gICAgICAgICAgICAgIC8+XCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlclwiOiAxMDksIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJcIjogMTE1fV19In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJNYWludGVuYW50LCBtb2RpZmlvbnMgbGUgZmljaGllciBvd25lci1lZGl0LWJvb2svcGFnZS50c3ggcG91ciBtZXR0cmUgw6Agam91ciBsZSBzdGF0ZSBib29rRGF0YSBhdmVjIGxlcyBkb25uw6llcyByw6ljdXDDqXLDqWVzIGFwcsOocyBsYSBtaXNlIMOgIGpvdXIgOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgIDFcdCd1c2UgY2xpZW50JztcbiAgICAgMlx0XG4gICAgIDNcdGltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG4gICAgIDRcdGltcG9ydCB7IHVzZUZvcm0sIHVzZUZpZWxkQXJyYXkgfSBmcm9tICdyZWFjdC1ob29rLWZvcm0nO1xuICAgICA1XHRpbXBvcnQgeyB6b2RSZXNvbHZlciB9IGZyb20gJ0Bob29rZm9ybS9yZXNvbHZlcnMvem9kJztcbiAgICAgNlx0aW1wb3J0IHsgQm9va0RhdGEgfSBmcm9tICdAL3R5cGVzL0Jvb2tEYXRhJztcbiAgICAgN1x0aW1wb3J0IHsgQm9va0Zvcm1TY2hlbWEsIEJvb2tGb3JtVmFsdWVzVHlwZSB9IGZyb20gJy4vc2NoZW1hcy9Cb29rRm9ybVNjaGVtYSc7XG4gICAgIDhcdGltcG9ydCBJbnB1dEZvcm0gZnJvbSAnLi9JbnB1dEZvcm0nO1xuICAgICA5XHRpbXBvcnQgeyBQbHVzQ2lyY2xlLCBQYWxtdHJlZSwgUGxhbmUsIEhvbWUsIE1hcFBpbiwgQXJyb3dMZWZ0IH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcbiAgICAxMFx0aW1wb3J0IFJlY29tbWVuZGF0aW9uIGZyb20gJy4vUmVjb21tZW5kYXRpb24nO1xuICAgIDExXHRpbXBvcnQgeyBtb3Rpb24gfSBmcm9tICdmcmFtZXItbW90aW9uJztcbiAgICAxMlx0aW1wb3J0IHsgQWNjb3JkaW9uLCBBY2NvcmRpb25Db250ZW50LCBBY2NvcmRpb25JdGVtLCBBY2NvcmRpb25UcmlnZ2VyIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2FjY29yZGlvbic7XG4gICAgMTNcdGltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ25leHQvbmF2aWdhdGlvbic7XG4gICAgMTRcdGltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG4gICAgMTVcdFxuICAgIDE2XHRjb25zdCBjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMgPSAoZGF0YTogQm9va0RhdGEgfCB1bmRlZmluZWQpOiBCb29rRm9ybVZhbHVlc1R5cGUgPT4ge1xuICAgIDE3XHQgIHJldHVybiB7XG4gICAgMThcdCAgICBpZDogZGF0YT8uaWQsXG5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1sxXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgIDU1XHQgIGluaXRpYWxEYXRhPzogQm9va0RhdGE7XG4gICAgNTZcdCAgb25TdWJtaXQ/OiAoZGF0YTogQm9va0RhdGEpID0+IHZvaWQ7XG4gICAgNTdcdH1cbiAgICA1OFx0XG4gICAgNTlcdGV4cG9ydCBmdW5jdGlvbiBCb29rRWRpdEZvcm0oeyBpbml0aWFsRGF0YSwgb25TdWJtaXQgfTogQm9va0VkaXRGb3JtUHJvcHMpIHtcbiAgICA2MFx0ICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcbiAgICA2MVx0ICBjb25zdCBbaXNTYXZpbmcsIHNldElzU2F2aW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICA2Mlx0ICBjb25zdCBbaXNNb2RpZmllZCwgc2V0SXNNb2RpZmllZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgNjNcdCAgY29uc3QgW29yaWdpbmFsVmFsdWVzLCBzZXRPcmlnaW5hbFZhbHVlc10gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcbiAgICA2NFx0XG4gICAgNjVcdCAgY29uc3Qge1xuICAgIDY2XHQgICAgcmVnaXN0ZXIsXG4gICAgNjdcdCAgICBoYW5kbGVTdWJtaXQsXG4gICAgNjhcdCAgICBjb250cm9sLFxuICAgIDY5XHQgICAgd2F0Y2gsXG4gICAgNzBcdCAgICBmb3JtU3RhdGU6IHsgZXJyb3JzLCBpc0RpcnR5IH0sXG4gICAgNzFcdCAgfSA9IHVzZUZvcm08Qm9va0Zvcm1WYWx1ZXNUeXBlPih7XG4gICAgNzJcdCAgICByZXNvbHZlcjogem9kUmVzb2x2ZXIoQm9va0Zvcm1TY2hlbWEpIGFzIGFueSxcbiAgICA3M1x0ICAgIGRlZmF1bHRWYWx1ZXM6IGNvbnZlcnRCb29rRGF0YVRvRm9ybVZhbHVlcyhpbml0aWFsRGF0YSksXG4gICAgNzRcdCAgfSk7XG4gICAgNzVcdFxuICAgIDc2XHQgIGNvbnN0IHsgZmllbGRzLCBhcHBlbmQsIHJlbW92ZSB9ID0gdXNlRmllbGRBcnJheSh7XG4gICAgNzdcdCAgICBjb250cm9sLFxuICAgIDc4XHQgICAgbmFtZTogXCJyZWNvbW1lbmRhdGlvbnNcIixcbiAgICA3OVx0ICB9KTtcbiAgICA4MFx0XG4gICAgODFcdCAgLy8gU3VydmVpbGxlciBsZXMgY2hhbmdlbWVudHMgZGFucyBsZSBmb3JtdWxhaXJlXG4gICAgODJcdCAgY29uc3QgZm9ybVZhbHVlcyA9IHdhdGNoKCk7XG4gICAgODNcdFxuICAgIDg0XHQgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgODVcdCAgICAvLyBTYXV2ZWdhcmRlciBsZXMgdmFsZXVycyBpbml0aWFsZXMgcG91ciBjb21wYXJhaXNvblxuICAgIDg2XHQgICAgaWYgKCFvcmlnaW5hbFZhbHVlcykge1xuICAgIDg3XHQgICAgICBzZXRPcmlnaW5hbFZhbHVlcyhKU09OLnN0cmluZ2lmeShjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMoaW5pdGlhbERhdGEpKSk7XG4gICAgODhcdCAgICB9XG4gICAgODlcdFxuICAgIDkwXHQgICAgLy8gVsOpcmlmaWVyIHNpIGRlcyBtb2RpZmljYXRpb25zIG9udCDDqXTDqSBhcHBvcnTDqWVzXG4gICAgOTFcdCAgICBjb25zdCBjdXJyZW50VmFsdWVzID0gSlNPTi5zdHJpbmdpZnkoZm9ybVZhbHVlcyk7XG4gICAgOTJcdCAgICBzZXRJc01vZGlmaWVkKGN1cnJlbnRWYWx1ZXMgIT09IG9yaWdpbmFsVmFsdWVzKTtcbiAgICA5M1x0ICB9LCBbZm9ybVZhbHVlcywgb3JpZ2luYWxWYWx1ZXMsIGluaXRpYWxEYXRhXSk7XG4gICAgOTRcdFxuICAgIDk1XHQgIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSBhc3luYyAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XG4gICAgOTZcdCAgICAvLyBTaSBhdWN1bmUgbW9kaWZpY2F0aW9uLCByZWRpcmlnZXIgdmVycyBsYSBwYWdlIGQnYWNjdWVpbFxuICAgIDk3XHQgICAgaWYgKCFpc01vZGlmaWVkKSB7XG4gICAgOThcdCAgICAgIHJvdXRlci5wdXNoKCcvJyk7XG4gICAgOTlcdCAgICAgIHJldHVybjtcbiAgIDEwMFx0ICAgIH1cbiAgIDEwMVx0XG4gICAxMDJcdCAgICBzZXRJc1NhdmluZyh0cnVlKTtcbiAgIDEwM1x0ICAgIGNvbnN0IGJvb2tEYXRhID0gY29udmVydEZvcm1WYWx1ZXNUb0Jvb2tEYXRhKGRhdGEpO1xuICAgMTA0XHRcbiAgIDEwNVx0ICAgIHRyeSB7XG4gICAxMDZcdCAgICAgIGlmIChib29rRGF0YS5pZCkge1xuICAgMTA3XHQgICAgICAgIC8vIEVudm95ZXIgdW5lIHJlcXXDqnRlIFBVVCBwb3VyIG1ldHRyZSDDoCBqb3VyIGxlcyBkb25uw6llc1xuICAgMTA4XHQgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucHV0KGBodHRwOi8vbG9jYWxob3N0OjMwMDEvYXBpL3N0YXkvJHtib29rRGF0YS5pZH1gLCBib29rRGF0YSk7XG4gICAxMDlcdFxuICAgMTEwXHQgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgMTExXHQgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm7DqWVzIG1pc2VzIMOgIGpvdXIgYXZlYyBzdWNjw6hzOicsIHJlc3BvbnNlLmRhdGEpO1xuICAgMTEyXHRcbiAgIDExM1x0ICAgICAgICAgIGlmIChvblN1Ym1pdCkge1xuICAgMTE0XHQgICAgICAgICAgICBvblN1Ym1pdChyZXNwb25zZS5kYXRhKTtcbiAgIDExNVx0ICAgICAgICAgIH1cbiAgIDExNlx0ICAgICAgICB9XG4gICAxMTdcdCAgICAgIH0gZWxzZSB7XG4gICAxMThcdCAgICAgICAgLy8gUGFzIGQnSUQsIGRvbmMgb24gdXRpbGlzZSBsZSBjYWxsYmFjayBvblN1Ym1pdCBzdGFuZGFyZFxuICAgMTE5XHQgICAgICAgIGlmIChvblN1Ym1pdCkge1xuICAgMTIwXHQgICAgICAgICAgb25TdWJtaXQoYm9va0RhdGEpO1xuICAgMTIxXHQgICAgICAgIH1cbiAgIDEyMlx0ICAgICAgfVxuICAgMTIzXHQgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgIDEyNFx0ICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgbWlzZSDDoCBqb3VyIGRlcyBkb25uw6llczonLCBlcnJvcik7XG4gICAxMjVcdCAgICAgIGFsZXJ0KCdVbmUgZXJyZXVyIGVzdCBzdXJ2ZW51ZSBsb3JzIGRlIGxhIG1pc2Ugw6Agam91ciBkZXMgZG9ubsOpZXMuJyk7XG4gICAxMjZcdCAgICB9IGZpbmFsbHkge1xuICAgMTI3XHQgICAgICBzZXRJc1NhdmluZyhmYWxzZSk7XG4gICAxMjhcdCAgICB9XG4gICAxMjlcdCAgfTtcbiAgIDEzMFx0XG4gICAxMzFcdCAgY29uc3QgaGFuZGxlUmV0dXJuSG9tZSA9ICgpID0+IHtcbiAgIDEzMlx0ICAgIHJvdXRlci5wdXNoKCcvJyk7XG4gICAxMzNcdCAgfTtcbiAgIDEzNFx0XG4gICAxMzVcdCAgY29uc3QgY29udGFpbmVyVmFyaWFudHMgPSB7XG4gICAxMzZcdCAgICBoaWRkZW46IHsgb3BhY2l0eTogMCB9LFxuICAgMTM3XHQgICAgdmlzaWJsZToge1xuXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlX2VudHJpZXNbMl06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgIDM1N1x0ICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAzNThcdCAgICAgIDwvQWNjb3JkaW9uSXRlbT5cbiAgIDM1OVx0ICAgICAgPC9BY2NvcmRpb24+XG4gICAzNjBcdFxuICAgMzYxXHQgICAgICA8bW90aW9uLmRpdlxuICAgMzYyXHQgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAzNjNcdCAgICAgICAgY2xhc3NOYW1lPVwiZmxleCBqdXN0aWZ5LWJldHdlZW4gbXQtOFwiXG4gICAzNjRcdCAgICAgID5cbiAgIDM2NVx0ICAgICAgICB7IWlzTW9kaWZpZWQgJiYgKFxuICAgMzY2XHQgICAgICAgICAgPG1vdGlvbi5idXR0b25cbiAgIDM2N1x0ICAgICAgICAgICAgd2hpbGVIb3Zlcj17eyBzY2FsZTogMS4wNSB9fVxuICAgMzY4XHQgICAgICAgICAgICB3aGlsZVRhcD17eyBzY2FsZTogMC45NSB9fVxuICAgMzY5XHQgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgIDM3MFx0ICAgICAgICAgICAgb25DbGljaz17aGFuZGxlUmV0dXJuSG9tZX1cbiAgIDM3MVx0ICAgICAgICAgICAgY2xhc3NOYW1lPVwicHgtNiBweS0zIGJnLWdyYWRpZW50LXRvLXIgZnJvbS1ncmF5LTQwMCB0by1ncmF5LTUwMCB0ZXh0LXdoaXRlIHJvdW5kZWQtbWQgaG92ZXI6ZnJvbS1ncmF5LTUwMCBob3Zlcjp0by1ncmF5LTYwMCB0cmFuc2l0aW9uLWFsbCBzaGFkb3ctbWQgZm9udC1tZWRpdW0gZmxleCBpdGVtcy1jZW50ZXJcIlxuICAgMzcyXHQgICAgICAgICAgPlxuICAgMzczXHQgICAgICAgICAgICA8QXJyb3dMZWZ0IHNpemU9ezE4fSBjbGFzc05hbWU9XCJtci0yXCIgLz5cbiAgIDM3NFx0ICAgICAgICAgICAgUmV0b3VyIMOgIGwnYWNjdWVpbFxuICAgMzc1XHQgICAgICAgICAgPC9tb3Rpb24uYnV0dG9uPlxuICAgMzc2XHQgICAgICAgICl9XG4gICAzNzdcdCAgICAgICAgPG1vdGlvbi5idXR0b25cbiAgIDM3OFx0ICAgICAgICAgIHdoaWxlSG92ZXI9e3sgc2NhbGU6IDEuMDUgfX1cbiAgIDM3OVx0ICAgICAgICAgIHdoaWxlVGFwPXt7IHNjYWxlOiAwLjk1IH19XG4gICAzODBcdCAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgIDM4MVx0ICAgICAgICAgIGRpc2FibGVkPXtpc1NhdmluZ31cbiAgIDM4Mlx0ICAgICAgICAgIGNsYXNzTmFtZT1cInB4LTYgcHktMyBiZy1ncmFkaWVudC10by1yIGZyb20tWyNmMDRjMjNdIHRvLXBpbmstNTAwIHRleHQtd2hpdGUgcm91bmRlZC1tZCBob3Zlcjpmcm9tLVsjZjA0YzIzXSBob3Zlcjp0by1waW5rLTQwMCB0cmFuc2l0aW9uLWFsbCBzaGFkb3ctbWQgZGlzYWJsZWQ6b3BhY2l0eS01MCBmb250LW1lZGl1bVwiXG4gICAzODNcdCAgICAgICAgPlxuICAgMzg0XHQgICAgICAgICAge2lzU2F2aW5nID8gJ0VucmVnaXN0cmVtZW50IGVuIGNvdXJzLi4uJyA6IGlzTW9kaWZpZWQgPyAnRW5yZWdpc3RyZXIgbGVzIG1vZGlmaWNhdGlvbnMnIDogJ1JldG91ciDDoCBsXFwnYWNjdWVpbCd9XG4gICAzODVcdCAgICAgICAgPC9tb3Rpb24uYnV0dG9uPlxuICAgMzg2XHQgICAgICA8L21vdGlvbi5kaXY+XG4gICAzODdcdCAgICA8L21vdGlvbi5mb3JtPlxuICAgMzg4XHQgICk7XG4gICAzODlcdH1cbiAgIDM5MFx0XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDFQZHFQYVZMVkxiekZMdzd5emNyTUtwIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQiLCJmb2xkZXJSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MywiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiTWFpbnRlbmFudCwgbW9kaWZpb25zIGxlIGZpY2hpZXIgb3duZXItZWRpdC1ib29rL3BhZ2UudHN4IHBvdXIgbWV0dHJlIMOgIGpvdXIgbGUgc3RhdGUgYm9va0RhdGEgYXZlYyBsZXMgZG9ubsOpZXMgcsOpY3Vww6lyw6llcyBhcHLDqHMgbGEgbWlzZSDDoCBqb3VyIDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI4YTZkZjQzYy00OTI1LTQ2ZWMtOTQ1NC0yYmI2ODBhYWE0MzUiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJQYXJmYWl0ICEgTGVzIG1vZGlmaWNhdGlvbnMgb250IMOpdMOpIGVmZmVjdHXDqWVzIGF2ZWMgc3VjY8Oocy4gVm9pY2kgdW4gcsOpc3Vtw6kgZGVzIGNoYW5nZW1lbnRzIGFwcG9ydMOpcyA6XG5cbiMjIyAxLiBEYW5zIGxlIGZpY2hpZXIgYHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3hgIDpcblxuMS4gQWpvdXQgZGVzIGltcG9ydHMgbsOpY2Vzc2FpcmVzIDpcbiAgIC0gYHVzZUVmZmVjdGAgcG91ciBzdXJ2ZWlsbGVyIGxlcyBjaGFuZ2VtZW50cyBkYW5zIGxlIGZvcm11bGFpcmVcbiAgIC0gYHVzZVJvdXRlcmAgcG91ciBnw6lyZXIgbGEgcmVkaXJlY3Rpb25cbiAgIC0gYGF4aW9zYCBwb3VyIGVmZmVjdHVlciBsZXMgcmVxdcOqdGVzIEhUVFBcbiAgIC0gYEFycm93TGVmdGAgZGUgbHVjaWRlLXJlYWN0IHBvdXIgbCdpY8O0bmUgZHUgYm91dG9uIGRlIHJldG91clxuXG4yLiBBam91dCBkZXMgw6l0YXRzIDpcbiAgIC0gYGlzTW9kaWZpZWRgIHBvdXIgc3VpdnJlIHNpIGRlcyBtb2RpZmljYXRpb25zIG9udCDDqXTDqSBlZmZlY3R1w6llc1xuICAgLSBgb3JpZ2luYWxWYWx1ZXNgIHBvdXIgc3RvY2tlciBsZXMgdmFsZXVycyBpbml0aWFsZXMgZHUgZm9ybXVsYWlyZVxuXG4zLiBBam91dCBkJ3VuIGVmZmV0IHBvdXIgc3VydmVpbGxlciBsZXMgY2hhbmdlbWVudHMgZGFucyBsZSBmb3JtdWxhaXJlIGV0IG1ldHRyZSDDoCBqb3VyIGwnw6l0YXQgYGlzTW9kaWZpZWRgXG5cbjQuIE1vZGlmaWNhdGlvbiBkZSBsYSBmb25jdGlvbiBgaGFuZGxlRm9ybVN1Ym1pdGAgcG91ciA6XG4gICAtIFJlZGlyaWdlciB2ZXJzIGxhIHBhZ2UgZCdhY2N1ZWlsIHNpIGF1Y3VuZSBtb2RpZmljYXRpb24gbidhIMOpdMOpIGVmZmVjdHXDqWVcbiAgIC0gRW52b3llciB1bmUgcmVxdcOqdGUgUFVUIMOgIGwnQVBJIHNpIGRlcyBtb2RpZmljYXRpb25zIG9udCDDqXTDqSBlZmZlY3R1w6llc1xuICAgLSBHw6lyZXIgbGVzIGVycmV1cnMgcG90ZW50aWVsbGVzXG5cbjUuIEFqb3V0IGQndW5lIGZvbmN0aW9uIGBoYW5kbGVSZXR1cm5Ib21lYCBwb3VyIHJlZGlyaWdlciB2ZXJzIGxhIHBhZ2UgZCdhY2N1ZWlsXG5cbjYuIE1vZGlmaWNhdGlvbiBkZSBsJ2ludGVyZmFjZSB1dGlsaXNhdGV1ciA6XG4gICAtIEFqb3V0IGQndW4gYm91dG9uIGRlIHJldG91ciDDoCBsJ2FjY3VlaWwgc2kgYXVjdW5lIG1vZGlmaWNhdGlvbiBuJ2Egw6l0w6kgZWZmZWN0dcOpZVxuICAgLSBNb2RpZmljYXRpb24gZHUgdGV4dGUgZHUgYm91dG9uIGRlIHNvdW1pc3Npb24gZW4gZm9uY3Rpb24gZGUgbCfDqXRhdCBkZXMgbW9kaWZpY2F0aW9uc1xuXG4jIyMgMi4gRGFucyBsZSBmaWNoaWVyIGBzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeGAgOlxuXG4xLiBNb2RpZmljYXRpb24gZGUgbGEgZm9uY3Rpb24gYG9uU3VibWl0YCBwb3VyIDpcbiAgIC0gTWV0dHJlIMOgIGpvdXIgbGUgc3RhdGUgYGJvb2tEYXRhYCBhdmVjIGxlcyBkb25uw6llcyByw6ljdXDDqXLDqWVzXG4gICAtIFNhdXZlZ2FyZGVyIGxlcyBkb25uw6llcyBtaXNlcyDDoCBqb3VyIGRhbnMgbGUgbG9jYWxTdG9yYWdlXG5cbkNlcyBtb2RpZmljYXRpb25zIHBlcm1ldHRlbnQgbWFpbnRlbmFudCBkZSA6XG4xLiBEw6l0ZWN0ZXIgc2kgZGVzIG1vZGlmaWNhdGlvbnMgb250IMOpdMOpIGVmZmVjdHXDqWVzIGRhbnMgbGUgZm9ybXVsYWlyZVxuMi4gQWZmaWNoZXIgdW4gYm91dG9uIFwiRW5yZWdpc3RyZXIgbGVzIG1vZGlmaWNhdGlvbnNcIiBzaSBkZXMgbW9kaWZpY2F0aW9ucyBvbnQgw6l0w6kgZWZmZWN0dcOpZXMsIG91IFwiUmV0b3VyIMOgIGwnYWNjdWVpbFwiIHNpIGF1Y3VuZSBtb2RpZmljYXRpb24gbidhIMOpdMOpIGVmZmVjdHXDqWVcbjMuIEVudm95ZXIgdW5lIHJlcXXDqnRlIFBVVCDDoCBsJ0FQSSBwb3VyIG1ldHRyZSDDoCBqb3VyIGxlcyBkb25uw6llcyBzaSBkZXMgbW9kaWZpY2F0aW9ucyBvbnQgw6l0w6kgZWZmZWN0dcOpZXNcbjQuIE1ldHRyZSDDoCBqb3VyIGxlIHN0YXRlIGBib29rRGF0YWAgYXZlYyBsZXMgZG9ubsOpZXMgcsOpY3Vww6lyw6llcyBhcHLDqHMgbGEgbWlzZSDDoCBqb3VyXG41LiBTYXV2ZWdhcmRlciBsZXMgZG9ubsOpZXMgbWlzZXMgw6Agam91ciBkYW5zIGxlIGxvY2FsU3RvcmFnZVxuXG5Wb3VsZXotdm91cyBxdWUgaidhcHBvcnRlIGQnYXV0cmVzIG1vZGlmaWNhdGlvbnMgb3UgY2xhcmlmaWNhdGlvbnMgw6AgbCdpbXBsw6ltZW50YXRpb24gP1xuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeC5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgMTA1XHQgICAgICAgICAgICAgICAgICA8UGFzc3dvcmREaXNwbGF5IHBhc3N3b3JkPXtib29rRGF0YS5hY2Nlc3NQYXNzd29yZH0gYm9va0lkPXtib29rRGF0YS5pZH0gLz5cbiAgIDEwNlx0ICAgICAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDEwN1x0ICAgICAgICAgICAgICApfVxuICAgMTA4XHRcbiAgIDEwOVx0ICAgICAgICAgICAgICA8Qm9va0VkaXRGb3JtXG4gICAxMTBcdCAgICAgICAgICAgICAgICBpbml0aWFsRGF0YT17Ym9va0RhdGEgfHwgdW5kZWZpbmVkfVxuICAgMTExXHQgICAgICAgICAgICAgICAgb25TdWJtaXQ9eyhkYXRhKSA9PiB7XG4gICAxMTJcdCAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEb25uw6llcyBkdSBmb3JtdWxhaXJlIHNvdW1pc2VzOicsIGRhdGEpO1xuICAgMTEzXHQgICAgICAgICAgICAgICAgICAvLyBNZXR0cmUgw6Agam91ciBsZSBzdGF0ZSBib29rRGF0YSBhdmVjIGxlcyBkb25uw6llcyByw6ljdXDDqXLDqWVzXG4gICAxMTRcdCAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xuICAgMTE1XHRcbiAgIDExNlx0ICAgICAgICAgICAgICAgICAgLy8gU2F1dmVnYXJkZXIgbGVzIGRvbm7DqWVzIG1pc2VzIMOgIGpvdXIgZGFucyBsZSBsb2NhbFN0b3JhZ2VcbiAgIDExN1x0ICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgMTE4XHRcbiAgIDExOVx0ICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3Ryw6llcyBhdmVjIHN1Y2PDqHMhJyk7XG4gICAxMjBcdCAgICAgICAgICAgICAgICB9fVxuICAgMTIxXHQgICAgICAgICAgICAgIC8+XG4gICAxMjJcdCAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDEyM1x0ICAgICAgICAgICl9XG4gICAxMjRcdCAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMTI1XHQgICAgICA8L2Rpdj5cblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMUo3Q1FnV045Z1kyR3lXNWZpYzg5cFIifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCIsImZvbGRlclJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjozLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In19fV0sInJlc3BvbnNlX3RleHQiOiJQYXJmYWl0ICEgTGVzIG1vZGlmaWNhdGlvbnMgb250IMOpdMOpIGVmZmVjdHXDqWVzIGF2ZWMgc3VjY8Oocy4gVm9pY2kgdW4gcsOpc3Vtw6kgZGVzIGNoYW5nZW1lbnRzIGFwcG9ydMOpcyA6XG5cbiMjIyAxLiBEYW5zIGxlIGZpY2hpZXIgYHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3hgIDpcblxuMS4gQWpvdXQgZGVzIGltcG9ydHMgbsOpY2Vzc2FpcmVzIDpcbiAgIC0gYHVzZUVmZmVjdGAgcG91ciBzdXJ2ZWlsbGVyIGxlcyBjaGFuZ2VtZW50cyBkYW5zIGxlIGZvcm11bGFpcmVcbiAgIC0gYHVzZVJvdXRlcmAgcG91ciBnw6lyZXIgbGEgcmVkaXJlY3Rpb25cbiAgIC0gYGF4aW9zYCBwb3VyIGVmZmVjdHVlciBsZXMgcmVxdcOqdGVzIEhUVFBcbiAgIC0gYEFycm93TGVmdGAgZGUgbHVjaWRlLXJlYWN0IHBvdXIgbCdpY8O0bmUgZHUgYm91dG9uIGRlIHJldG91clxuXG4yLiBBam91dCBkZXMgw6l0YXRzIDpcbiAgIC0gYGlzTW9kaWZpZWRgIHBvdXIgc3VpdnJlIHNpIGRlcyBtb2RpZmljYXRpb25zIG9udCDDqXTDqSBlZmZlY3R1w6llc1xuICAgLSBgb3JpZ2luYWxWYWx1ZXNgIHBvdXIgc3RvY2tlciBsZXMgdmFsZXVycyBpbml0aWFsZXMgZHUgZm9ybXVsYWlyZVxuXG4zLiBBam91dCBkJ3VuIGVmZmV0IHBvdXIgc3VydmVpbGxlciBsZXMgY2hhbmdlbWVudHMgZGFucyBsZSBmb3JtdWxhaXJlIGV0IG1ldHRyZSDDoCBqb3VyIGwnw6l0YXQgYGlzTW9kaWZpZWRgXG5cbjQuIE1vZGlmaWNhdGlvbiBkZSBsYSBmb25jdGlvbiBgaGFuZGxlRm9ybVN1Ym1pdGAgcG91ciA6XG4gICAtIFJlZGlyaWdlciB2ZXJzIGxhIHBhZ2UgZCdhY2N1ZWlsIHNpIGF1Y3VuZSBtb2RpZmljYXRpb24gbidhIMOpdMOpIGVmZmVjdHXDqWVcbiAgIC0gRW52b3llciB1bmUgcmVxdcOqdGUgUFVUIMOgIGwnQVBJIHNpIGRlcyBtb2RpZmljYXRpb25zIG9udCDDqXTDqSBlZmZlY3R1w6llc1xuICAgLSBHw6lyZXIgbGVzIGVycmV1cnMgcG90ZW50aWVsbGVzXG5cbjUuIEFqb3V0IGQndW5lIGZvbmN0aW9uIGBoYW5kbGVSZXR1cm5Ib21lYCBwb3VyIHJlZGlyaWdlciB2ZXJzIGxhIHBhZ2UgZCdhY2N1ZWlsXG5cbjYuIE1vZGlmaWNhdGlvbiBkZSBsJ2ludGVyZmFjZSB1dGlsaXNhdGV1ciA6XG4gICAtIEFqb3V0IGQndW4gYm91dG9uIGRlIHJldG91ciDDoCBsJ2FjY3VlaWwgc2kgYXVjdW5lIG1vZGlmaWNhdGlvbiBuJ2Egw6l0w6kgZWZmZWN0dcOpZVxuICAgLSBNb2RpZmljYXRpb24gZHUgdGV4dGUgZHUgYm91dG9uIGRlIHNvdW1pc3Npb24gZW4gZm9uY3Rpb24gZGUgbCfDqXRhdCBkZXMgbW9kaWZpY2F0aW9uc1xuXG4jIyMgMi4gRGFucyBsZSBmaWNoaWVyIGBzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeGAgOlxuXG4xLiBNb2RpZmljYXRpb24gZGUgbGEgZm9uY3Rpb24gYG9uU3VibWl0YCBwb3VyIDpcbiAgIC0gTWV0dHJlIMOgIGpvdXIgbGUgc3RhdGUgYGJvb2tEYXRhYCBhdmVjIGxlcyBkb25uw6llcyByw6ljdXDDqXLDqWVzXG4gICAtIFNhdXZlZ2FyZGVyIGxlcyBkb25uw6llcyBtaXNlcyDDoCBqb3VyIGRhbnMgbGUgbG9jYWxTdG9yYWdlXG5cbkNlcyBtb2RpZmljYXRpb25zIHBlcm1ldHRlbnQgbWFpbnRlbmFudCBkZSA6XG4xLiBEw6l0ZWN0ZXIgc2kgZGVzIG1vZGlmaWNhdGlvbnMgb250IMOpdMOpIGVmZmVjdHXDqWVzIGRhbnMgbGUgZm9ybXVsYWlyZVxuMi4gQWZmaWNoZXIgdW4gYm91dG9uIFwiRW5yZWdpc3RyZXIgbGVzIG1vZGlmaWNhdGlvbnNcIiBzaSBkZXMgbW9kaWZpY2F0aW9ucyBvbnQgw6l0w6kgZWZmZWN0dcOpZXMsIG91IFwiUmV0b3VyIMOgIGwnYWNjdWVpbFwiIHNpIGF1Y3VuZSBtb2RpZmljYXRpb24gbidhIMOpdMOpIGVmZmVjdHXDqWVcbjMuIEVudm95ZXIgdW5lIHJlcXXDqnRlIFBVVCDDoCBsJ0FQSSBwb3VyIG1ldHRyZSDDoCBqb3VyIGxlcyBkb25uw6llcyBzaSBkZXMgbW9kaWZpY2F0aW9ucyBvbnQgw6l0w6kgZWZmZWN0dcOpZXNcbjQuIE1ldHRyZSDDoCBqb3VyIGxlIHN0YXRlIGBib29rRGF0YWAgYXZlYyBsZXMgZG9ubsOpZXMgcsOpY3Vww6lyw6llcyBhcHLDqHMgbGEgbWlzZSDDoCBqb3VyXG41LiBTYXV2ZWdhcmRlciBsZXMgZG9ubsOpZXMgbWlzZXMgw6Agam91ciBkYW5zIGxlIGxvY2FsU3RvcmFnZVxuXG5Wb3VsZXotdm91cyBxdWUgaidhcHBvcnRlIGQnYXV0cmVzIG1vZGlmaWNhdGlvbnMgb3UgY2xhcmlmaWNhdGlvbnMgw6AgbCdpbXBsw6ltZW50YXRpb24gP1xuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJyZXF1ZXN0X2lkIjoiOGFkNzljMjktYWMxNS00NDU1LWExMzUtYTBjZTRlNGM5ZmE2IiwidXVpZCI6ImYxZjA5ZWYyLTlkMjctNGU1Ny05NDk4LWY5YmY2Yzk5MGEzMyIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtY2hlY2twb2ludC1kZWxpbWl0ZXIiLCJzdGF0dXMiOiJzdWNjZXNzIiwiZnJvbVRpbWVzdGFtcCI6MCwidG9UaW1lc3RhbXAiOjE3NDQzNjc5MDU1MjAsInNlZW5fc3RhdGUiOiJzZWVuIn0seyJyZXF1ZXN0X2lkIjoiYTAzMWZkYzctMTQyZC00MTY4LTliMGUtZjUwZDVlOWMwYmIyIiwic3RhdHVzIjoiY2FuY2VsbGVkIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy10dXJuLWRlbGltaXRlciJ9LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI4NGRhNjhlNS1hMjAzLTRhMGQtOWJmNS05NjRhYjcxZWE0NTciLCJyZXF1ZXN0X21lc3NhZ2UiOiJKZSB2ZXV4IG1ldHRyZSBhIGpvdXIgbGUgb25TdWJtaXQgZGUgQHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4ICwgamUgbmUgdmV1eCBwYXMgbWV0dHJlIGxlIHB1dCBkYW5zIGhhbmRsZUZvcm1TdWJtaXQgZGUgQHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3ggIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkplIHZldXggbWV0dHJlIGEgam91ciBsZSBvblN1Ym1pdCBkZSAifSx7InR5cGUiOiJtZW50aW9uIiwiYXR0cnMiOnsiaWQiOiIvc3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3giLCJsYWJlbCI6InBhZ2UudHN4IiwiZGF0YSI6eyJsYWJlbCI6InBhZ2UudHN4IiwibmFtZSI6InNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4IiwiaWQiOiIvc3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3giLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeCJ9LCJ0eXBlIjoiaXRlbSJ9fX0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgLCBqZSBuZSB2ZXV4IHBhcyBtZXR0cmUgbGUgcHV0IGRhbnMgaGFuZGxlRm9ybVN1Ym1pdCBkZSAifSx7InR5cGUiOiJtZW50aW9uIiwiYXR0cnMiOnsiaWQiOiIvc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeCIsImxhYmVsIjoiQm9va0VkaXRGb3JtLnRzeCIsImRhdGEiOnsibGFiZWwiOiJCb29rRWRpdEZvcm0udHN4IiwibmFtZSI6InNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3giLCJpZCI6Ii9zcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeCJ9LCJ0eXBlIjoiaXRlbSJ9fX0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgIn1dfV19LCJtZW50aW9uZWRfaXRlbXMiOlt7ImxhYmVsIjoicGFnZS50c3giLCJuYW1lIjoic3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3giLCJpZCI6Ii9zcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4In0sInR5cGUiOiJpdGVtIn0seyJsYWJlbCI6IkJvb2tFZGl0Rm9ybS50c3giLCJuYW1lIjoic3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeCIsImlkIjoiL3NyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3giLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4In0sInR5cGUiOiJpdGVtIn1dLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxU2pMcDlOZzlMRDZ5V3JxV05zbkV0UiIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwic3RyX3JlcGxhY2VcIiwgXCJwYXRoXCI6IFwic3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeFwiLCBcInN0cl9yZXBsYWNlX2VudHJpZXNcIjogW3tcIm9sZF9zdHJcIjogXCJleHBvcnQgZnVuY3Rpb24gQm9va0VkaXRGb3JtKHsgaW5pdGlhbERhdGEsIG9uU3VibWl0IH06IEJvb2tFZGl0Rm9ybVByb3BzKSB7XFxuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcXG4gIGNvbnN0IFtpc1NhdmluZywgc2V0SXNTYXZpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xcbiAgY29uc3QgW2lzTW9kaWZpZWQsIHNldElzTW9kaWZpZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xcbiAgY29uc3QgW29yaWdpbmFsVmFsdWVzLCBzZXRPcmlnaW5hbFZhbHVlc10gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcXG5cXG4gIGNvbnN0IHtcXG4gICAgcmVnaXN0ZXIsXFxuICAgIGhhbmRsZVN1Ym1pdCxcXG4gICAgY29udHJvbCxcXG4gICAgd2F0Y2gsXFxuICAgIGZvcm1TdGF0ZTogeyBlcnJvcnMsIGlzRGlydHkgfSxcXG4gIH0gPSB1c2VGb3JtPEJvb2tGb3JtVmFsdWVzVHlwZT4oe1xcbiAgICByZXNvbHZlcjogem9kUmVzb2x2ZXIoQm9va0Zvcm1TY2hlbWEpIGFzIGFueSxcXG4gICAgZGVmYXVsdFZhbHVlczogY29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzKGluaXRpYWxEYXRhKSxcXG4gIH0pO1xcblxcbiAgY29uc3QgeyBmaWVsZHMsIGFwcGVuZCwgcmVtb3ZlIH0gPSB1c2VGaWVsZEFycmF5KHtcXG4gICAgY29udHJvbCxcXG4gICAgbmFtZTogXFxcInJlY29tbWVuZGF0aW9uc1xcXCIsXFxuICB9KTtcXG5cXG4gIC8vIFN1cnZlaWxsZXIgbGVzIGNoYW5nZW1lbnRzIGRhbnMgbGUgZm9ybXVsYWlyZVxcbiAgY29uc3QgZm9ybVZhbHVlcyA9IHdhdGNoKCk7XFxuICBcXG4gIHVzZUVmZmVjdCgoKSA9PiB7XFxuICAgIC8vIFNhdXZlZ2FyZGVyIGxlcyB2YWxldXJzIGluaXRpYWxlcyBwb3VyIGNvbXBhcmFpc29uXFxuICAgIGlmICghb3JpZ2luYWxWYWx1ZXMpIHtcXG4gICAgICBzZXRPcmlnaW5hbFZhbHVlcyhKU09OLnN0cmluZ2lmeShjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMoaW5pdGlhbERhdGEpKSk7XFxuICAgIH1cXG4gICAgXFxuICAgIC8vIFZcXHUwMGU5cmlmaWVyIHNpIGRlcyBtb2RpZmljYXRpb25zIG9udCBcXHUwMGU5dFxcdTAwZTkgYXBwb3J0XFx1MDBlOWVzXFxuICAgIGNvbnN0IGN1cnJlbnRWYWx1ZXMgPSBKU09OLnN0cmluZ2lmeShmb3JtVmFsdWVzKTtcXG4gICAgc2V0SXNNb2RpZmllZChjdXJyZW50VmFsdWVzICE9PSBvcmlnaW5hbFZhbHVlcyk7XFxuICB9LCBbZm9ybVZhbHVlcywgb3JpZ2luYWxWYWx1ZXMsIGluaXRpYWxEYXRhXSk7XFxuXFxuICBjb25zdCBoYW5kbGVGb3JtU3VibWl0ID0gYXN5bmMgKGRhdGE6IEJvb2tGb3JtVmFsdWVzVHlwZSkgPT4ge1xcbiAgICAvLyBTaSBhdWN1bmUgbW9kaWZpY2F0aW9uLCByZWRpcmlnZXIgdmVycyBsYSBwYWdlIGQnYWNjdWVpbFxcbiAgICBpZiAoIWlzTW9kaWZpZWQpIHtcXG4gICAgICByb3V0ZXIucHVzaCgnLycpO1xcbiAgICAgIHJldHVybjtcXG4gICAgfVxcbiAgICBcXG4gICAgc2V0SXNTYXZpbmcodHJ1ZSk7XFxuICAgIGNvbnN0IGJvb2tEYXRhID0gY29udmVydEZvcm1WYWx1ZXNUb0Jvb2tEYXRhKGRhdGEpO1xcbiAgICBcXG4gICAgdHJ5IHtcXG4gICAgICBpZiAoYm9va0RhdGEuaWQpIHtcXG4gICAgICAgIC8vIEVudm95ZXIgdW5lIHJlcXVcXHUwMGVhdGUgUFVUIHBvdXIgbWV0dHJlIFxcdTAwZTAgam91ciBsZXMgZG9ublxcdTAwZTllc1xcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wdXQoYGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMS9hcGkvc3RheS8ke2Jvb2tEYXRhLmlkfWAsIGJvb2tEYXRhKTtcXG4gICAgICAgIFxcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XFxuICAgICAgICAgIGNvbnNvbGUubG9nKCdEb25uXFx1MDBlOWVzIG1pc2VzIFxcdTAwZTAgam91ciBhdmVjIHN1Y2NcXHUwMGU4czonLCByZXNwb25zZS5kYXRhKTtcXG4gICAgICAgICAgXFxuICAgICAgICAgIGlmIChvblN1Ym1pdCkge1xcbiAgICAgICAgICAgIG9uU3VibWl0KHJlc3BvbnNlLmRhdGEpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIC8vIFBhcyBkJ0lELCBkb25jIG9uIHV0aWxpc2UgbGUgY2FsbGJhY2sgb25TdWJtaXQgc3RhbmRhcmRcXG4gICAgICAgIGlmIChvblN1Ym1pdCkge1xcbiAgICAgICAgICBvblN1Ym1pdChib29rRGF0YSk7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9IGNhdGNoIChlcnJvcikge1xcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBsb3JzIGRlIGxhIG1pc2UgXFx1MDBlMCBqb3VyIGRlcyBkb25uXFx1MDBlOWVzOicsIGVycm9yKTtcXG4gICAgICBhbGVydCgnVW5lIGVycmV1ciBlc3Qgc3VydmVudWUgbG9ycyBkZSBsYSBtaXNlIFxcdTAwZTAgam91ciBkZXMgZG9ublxcdTAwZTllcy4nKTtcXG4gICAgfSBmaW5hbGx5IHtcXG4gICAgICBzZXRJc1NhdmluZyhmYWxzZSk7XFxuICAgIH1cXG4gIH07XFxuICBcXG4gIGNvbnN0IGhhbmRsZVJldHVybkhvbWUgPSAoKSA9PiB7XFxuICAgIHJvdXRlci5wdXNoKCcvJyk7XFxuICB9O1wiLCBcIm5ld19zdHJcIjogXCJleHBvcnQgZnVuY3Rpb24gQm9va0VkaXRGb3JtKHsgaW5pdGlhbERhdGEsIG9uU3VibWl0IH06IEJvb2tFZGl0Rm9ybVByb3BzKSB7XFxuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcXG4gIGNvbnN0IFtpc1NhdmluZywgc2V0SXNTYXZpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xcbiAgY29uc3QgW2lzTW9kaWZpZWQsIHNldElzTW9kaWZpZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xcbiAgY29uc3QgW29yaWdpbmFsVmFsdWVzLCBzZXRPcmlnaW5hbFZhbHVlc10gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcXG5cXG4gIGNvbnN0IHtcXG4gICAgcmVnaXN0ZXIsXFxuICAgIGhhbmRsZVN1Ym1pdCxcXG4gICAgY29udHJvbCxcXG4gICAgd2F0Y2gsXFxuICAgIGZvcm1TdGF0ZTogeyBlcnJvcnMsIGlzRGlydHkgfSxcXG4gIH0gPSB1c2VGb3JtPEJvb2tGb3JtVmFsdWVzVHlwZT4oe1xcbiAgICByZXNvbHZlcjogem9kUmVzb2x2ZXIoQm9va0Zvcm1TY2hlbWEpIGFzIGFueSxcXG4gICAgZGVmYXVsdFZhbHVlczogY29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzKGluaXRpYWxEYXRhKSxcXG4gIH0pO1xcblxcbiAgY29uc3QgeyBmaWVsZHMsIGFwcGVuZCwgcmVtb3ZlIH0gPSB1c2VGaWVsZEFycmF5KHtcXG4gICAgY29udHJvbCxcXG4gICAgbmFtZTogXFxcInJlY29tbWVuZGF0aW9uc1xcXCIsXFxuICB9KTtcXG5cXG4gIC8vIFN1cnZlaWxsZXIgbGVzIGNoYW5nZW1lbnRzIGRhbnMgbGUgZm9ybXVsYWlyZVxcbiAgY29uc3QgZm9ybVZhbHVlcyA9IHdhdGNoKCk7XFxuICBcXG4gIHVzZUVmZmVjdCgoKSA9PiB7XFxuICAgIC8vIFNhdXZlZ2FyZGVyIGxlcyB2YWxldXJzIGluaXRpYWxlcyBwb3VyIGNvbXBhcmFpc29uXFxuICAgIGlmICghb3JpZ2luYWxWYWx1ZXMpIHtcXG4gICAgICBzZXRPcmlnaW5hbFZhbHVlcyhKU09OLnN0cmluZ2lmeShjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMoaW5pdGlhbERhdGEpKSk7XFxuICAgIH1cXG4gICAgXFxuICAgIC8vIFZcXHUwMGU5cmlmaWVyIHNpIGRlcyBtb2RpZmljYXRpb25zIG9udCBcXHUwMGU5dFxcdTAwZTkgYXBwb3J0XFx1MDBlOWVzXFxuICAgIGNvbnN0IGN1cnJlbnRWYWx1ZXMgPSBKU09OLnN0cmluZ2lmeShmb3JtVmFsdWVzKTtcXG4gICAgc2V0SXNNb2RpZmllZChjdXJyZW50VmFsdWVzICE9PSBvcmlnaW5hbFZhbHVlcyk7XFxuICB9LCBbZm9ybVZhbHVlcywgb3JpZ2luYWxWYWx1ZXMsIGluaXRpYWxEYXRhXSk7XFxuXFxuICBjb25zdCBoYW5kbGVGb3JtU3VibWl0ID0gKGRhdGE6IEJvb2tGb3JtVmFsdWVzVHlwZSkgPT4ge1xcbiAgICAvLyBTaSBhdWN1bmUgbW9kaWZpY2F0aW9uLCByZWRpcmlnZXIgdmVycyBsYSBwYWdlIGQnYWNjdWVpbFxcbiAgICBpZiAoIWlzTW9kaWZpZWQpIHtcXG4gICAgICByb3V0ZXIucHVzaCgnLycpO1xcbiAgICAgIHJldHVybjtcXG4gICAgfVxcbiAgICBcXG4gICAgc2V0SXNTYXZpbmcodHJ1ZSk7XFxuICAgIGNvbnN0IGJvb2tEYXRhID0gY29udmVydEZvcm1WYWx1ZXNUb0Jvb2tEYXRhKGRhdGEpO1xcbiAgICBcXG4gICAgaWYgKG9uU3VibWl0KSB7XFxuICAgICAgLy8gUGFzc2VyIGxlcyBkb25uXFx1MDBlOWVzIGF1IGNvbXBvc2FudCBwYXJlbnQgcXVpIGdcXHUwMGU4cmVyYSBsYSByZXF1XFx1MDBlYXRlIFBVVFxcbiAgICAgIG9uU3VibWl0KGJvb2tEYXRhKTtcXG4gICAgfVxcbiAgICBcXG4gICAgLy8gUlxcdTAwZTlpbml0aWFsaXNlciBsJ1xcdTAwZTl0YXQgZGUgc2F1dmVnYXJkZSBhcHJcXHUwMGU4cyB1biBjb3VydCBkXFx1MDBlOWxhaVxcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcXG4gICAgICBzZXRJc1NhdmluZyhmYWxzZSk7XFxuICAgIH0sIDEwMDApO1xcbiAgfTtcXG4gIFxcbiAgY29uc3QgaGFuZGxlUmV0dXJuSG9tZSA9ICgpID0+IHtcXG4gICAgcm91dGVyLnB1c2goJy8nKTtcXG4gIH07XCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlclwiOiA1OSwgXCJvbGRfc3RyX2VuZF9saW5lX251bWJlclwiOiAxMzN9XX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkplIGNvbXByZW5kcyB2b3RyZSBwcsOpZsOpcmVuY2UuIFZvdXMgc291aGFpdGV6IHF1ZSBsYSByZXF1w6p0ZSBQVVQgc29pdCBnw6lyw6llIGRhbnMgbGUgY29tcG9zYW50IHBhcmVudCAoYG93bmVyLWVkaXQtYm9vay9wYWdlLnRzeGApIHBsdXTDtHQgcXVlIGRhbnMgbGUgY29tcG9zYW50IGBCb29rRWRpdEZvcm0udHN4YC4gQydlc3QgdW5lIGFwcHJvY2hlIHBsdXMgcHJvcHJlIHF1aSByZXNwZWN0ZSBtaWV1eCBsYSBzw6lwYXJhdGlvbiBkZXMgcmVzcG9uc2FiaWxpdMOpcy5cblxuTW9kaWZpb25zIGxlcyBmaWNoaWVycyBwb3VyIGTDqXBsYWNlciBsYSBsb2dpcXVlIGRlIG1pc2Ugw6Agam91ciB2ZXJzIGxlIGNvbXBvc2FudCBwYXJlbnQuXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjowLCJ0ZXh0X25vZGUiOnsiY29udGVudCI6IkplIHZldXggbWV0dHJlIGEgam91ciBsZSBvblN1Ym1pdCBkZSBAc3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3ggLCBqZSBuZSB2ZXV4IHBhcyBtZXR0cmUgbGUgcHV0IGRhbnMgaGFuZGxlRm9ybVN1Ym1pdCBkZSBAc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeCAifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCIsImZvbGRlclJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjozLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In19fV0sInJlc3BvbnNlX3RleHQiOiJKZSBjb21wcmVuZHMgdm90cmUgcHLDqWbDqXJlbmNlLiBWb3VzIHNvdWhhaXRleiBxdWUgbGEgcmVxdcOqdGUgUFVUIHNvaXQgZ8OpcsOpZSBkYW5zIGxlIGNvbXBvc2FudCBwYXJlbnQgKGBvd25lci1lZGl0LWJvb2svcGFnZS50c3hgKSBwbHV0w7R0IHF1ZSBkYW5zIGxlIGNvbXBvc2FudCBgQm9va0VkaXRGb3JtLnRzeGAuIEMnZXN0IHVuZSBhcHByb2NoZSBwbHVzIHByb3ByZSBxdWkgcmVzcGVjdGUgbWlldXggbGEgc8OpcGFyYXRpb24gZGVzIHJlc3BvbnNhYmlsaXTDqXMuXG5cbk1vZGlmaW9ucyBsZXMgZmljaGllcnMgcG91ciBkw6lwbGFjZXIgbGEgbG9naXF1ZSBkZSBtaXNlIMOgIGpvdXIgdmVycyBsZSBjb21wb3NhbnQgcGFyZW50LlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjdiNjFjNzk3LWQ0NWEtNGZmMS05ZTkyLTdlNTJkMGZjMDViNSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDE0M1NyaUxNVGd0Nmg3WDhxM25OY05oIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeFwiLCBcInN0cl9yZXBsYWNlX2VudHJpZXNcIjogW3tcIm9sZF9zdHJcIjogXCIndXNlIGNsaWVudCc7XFxuXFxuaW1wb3J0IHsgQm9va0VkaXRGb3JtIH0gZnJvbSAnQC9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybSc7XFxuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcXG5pbXBvcnQgeyBCb29rRGF0YSB9IGZyb20gJ0AvdHlwZXMvQm9va0RhdGEnO1xcbmltcG9ydCB7IG1vdGlvbiB9IGZyb20gJ2ZyYW1lci1tb3Rpb24nO1xcbmltcG9ydCB7IFBhbG10cmVlLCBCb29rLCBTdW4gfSBmcm9tICdsdWNpZGUtcmVhY3QnO1xcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ25leHQvbmF2aWdhdGlvbic7XFxuaW1wb3J0IHtQYXNzd29yZERpc3BsYXl9IGZyb20gXFxcIi4uLy4uLy4uL2NvbXBvbmVudHMvUGFzc3dvcmREaXNwbGF5XFxcIjtcIiwgXCJuZXdfc3RyXCI6IFwiJ3VzZSBjbGllbnQnO1xcblxcbmltcG9ydCB7IEJvb2tFZGl0Rm9ybSB9IGZyb20gJ0AvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0nO1xcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XFxuaW1wb3J0IHsgQm9va0RhdGEgfSBmcm9tICdAL3R5cGVzL0Jvb2tEYXRhJztcXG5pbXBvcnQgeyBtb3Rpb24gfSBmcm9tICdmcmFtZXItbW90aW9uJztcXG5pbXBvcnQgeyBQYWxtdHJlZSwgQm9vaywgU3VuIH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcXG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tICduZXh0L25hdmlnYXRpb24nO1xcbmltcG9ydCB7UGFzc3dvcmREaXNwbGF5fSBmcm9tIFxcXCIuLi8uLi8uLi9jb21wb25lbnRzL1Bhc3N3b3JkRGlzcGxheVxcXCI7XFxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXCI6IDEsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJcIjogOX0sIHtcIm9sZF9zdHJcIjogXCIgICAgICAgICAgICAgIDxCb29rRWRpdEZvcm1cXG4gICAgICAgICAgICAgICAgaW5pdGlhbERhdGE9e2Jvb2tEYXRhIHx8IHVuZGVmaW5lZH1cXG4gICAgICAgICAgICAgICAgb25TdWJtaXQ9eyhkYXRhKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm5cXHUwMGU5ZXMgZHUgZm9ybXVsYWlyZSBzb3VtaXNlczonLCBkYXRhKTtcXG4gICAgICAgICAgICAgICAgICAvLyBNZXR0cmUgXFx1MDBlMCBqb3VyIGxlIHN0YXRlIGJvb2tEYXRhIGF2ZWMgbGVzIGRvbm5cXHUwMGU5ZXMgclxcdTAwZTljdXBcXHUwMGU5clxcdTAwZTllc1xcbiAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xcbiAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgIC8vIFNhdXZlZ2FyZGVyIGxlcyBkb25uXFx1MDBlOWVzIG1pc2VzIFxcdTAwZTAgam91ciBkYW5zIGxlIGxvY2FsU3RvcmFnZVxcbiAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdib29rRGF0YScsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcXG4gICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICBhbGVydCgnTW9kaWZpY2F0aW9ucyBlbnJlZ2lzdHJcXHUwMGU5ZXMgYXZlYyBzdWNjXFx1MDBlOHMhJyk7XFxuICAgICAgICAgICAgICAgIH19XFxuICAgICAgICAgICAgICAvPlwiLCBcIm5ld19zdHJcIjogXCIgICAgICAgICAgICAgIDxCb29rRWRpdEZvcm1cXG4gICAgICAgICAgICAgICAgaW5pdGlhbERhdGE9e2Jvb2tEYXRhIHx8IHVuZGVmaW5lZH1cXG4gICAgICAgICAgICAgICAgb25TdWJtaXQ9e2FzeW5jIChkYXRhKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm5cXHUwMGU5ZXMgZHUgZm9ybXVsYWlyZSBzb3VtaXNlczonLCBkYXRhKTtcXG4gICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICB0cnkge1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaWQpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgLy8gRW52b3llciB1bmUgcmVxdVxcdTAwZWF0ZSBQVVQgcG91ciBtZXR0cmUgXFx1MDBlMCBqb3VyIGxlcyBkb25uXFx1MDBlOWVzXFxuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucHV0KGBodHRwOi8vbG9jYWxob3N0OjMwMDEvYXBpL3N0YXkvJHtkYXRhLmlkfWAsIGRhdGEpO1xcbiAgICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm5cXHUwMGU5ZXMgbWlzZXMgXFx1MDBlMCBqb3VyIGF2ZWMgc3VjY1xcdTAwZThzOicsIHJlc3BvbnNlLmRhdGEpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ldHRyZSBcXHUwMGUwIGpvdXIgbGUgc3RhdGUgYm9va0RhdGEgYXZlYyBsZXMgZG9ublxcdTAwZTllcyByXFx1MDBlOWN1cFxcdTAwZTlyXFx1MDBlOWVzXFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEocmVzcG9uc2UuZGF0YSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2F1dmVnYXJkZXIgbGVzIGRvbm5cXHUwMGU5ZXMgbWlzZXMgXFx1MDBlMCBqb3VyIGRhbnMgbGUgbG9jYWxTdG9yYWdlXFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuZGF0YSkpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdNb2RpZmljYXRpb25zIGVucmVnaXN0clxcdTAwZTllcyBhdmVjIHN1Y2NcXHUwMGU4cyEnKTtcXG4gICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgLy8gUGFzIGQnSUQsIGRvbmMgb24gbWV0IHNpbXBsZW1lbnQgXFx1MDBlMCBqb3VyIGxlIHN0YXRlXFxuICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xcbiAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XFxuICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdNb2RpZmljYXRpb25zIGVucmVnaXN0clxcdTAwZTllcyBhdmVjIHN1Y2NcXHUwMGU4cyEnKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgbWlzZSBcXHUwMGUwIGpvdXIgZGVzIGRvbm5cXHUwMGU5ZXM6JywgZXJyb3IpO1xcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1VuZSBlcnJldXIgZXN0IHN1cnZlbnVlIGxvcnMgZGUgbGEgbWlzZSBcXHUwMGUwIGpvdXIgZGVzIGRvbm5cXHUwMGU5ZXMuJyk7XFxuICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9fVxcbiAgICAgICAgICAgICAgLz5cIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXCI6IDEwOSwgXCJvbGRfc3RyX2VuZF9saW5lX251bWJlclwiOiAxMjF9XX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6Ik1haW50ZW5hbnQsIG1vZGlmaW9ucyBsZSBmaWNoaWVyIG93bmVyLWVkaXQtYm9vay9wYWdlLnRzeCBwb3VyIHkgYWpvdXRlciBsYSBsb2dpcXVlIGRlIG1pc2Ugw6Agam91ciBhdmVjIGxhIHJlcXXDqnRlIFBVVCA6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3guXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlX2VudHJpZXNbMF06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICA1NVx0ICBpbml0aWFsRGF0YT86IEJvb2tEYXRhO1xuICAgIDU2XHQgIG9uU3VibWl0PzogKGRhdGE6IEJvb2tEYXRhKSA9PiB2b2lkO1xuICAgIDU3XHR9XG4gICAgNThcdFxuICAgIDU5XHRleHBvcnQgZnVuY3Rpb24gQm9va0VkaXRGb3JtKHsgaW5pdGlhbERhdGEsIG9uU3VibWl0IH06IEJvb2tFZGl0Rm9ybVByb3BzKSB7XG4gICAgNjBcdCAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG4gICAgNjFcdCAgY29uc3QgW2lzU2F2aW5nLCBzZXRJc1NhdmluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgNjJcdCAgY29uc3QgW2lzTW9kaWZpZWQsIHNldElzTW9kaWZpZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIDYzXHQgIGNvbnN0IFtvcmlnaW5hbFZhbHVlcywgc2V0T3JpZ2luYWxWYWx1ZXNdID0gdXNlU3RhdGU8c3RyaW5nPignJyk7XG4gICAgNjRcdFxuICAgIDY1XHQgIGNvbnN0IHtcbiAgICA2Nlx0ICAgIHJlZ2lzdGVyLFxuICAgIDY3XHQgICAgaGFuZGxlU3VibWl0LFxuICAgIDY4XHQgICAgY29udHJvbCxcbiAgICA2OVx0ICAgIHdhdGNoLFxuICAgIDcwXHQgICAgZm9ybVN0YXRlOiB7IGVycm9ycywgaXNEaXJ0eSB9LFxuICAgIDcxXHQgIH0gPSB1c2VGb3JtPEJvb2tGb3JtVmFsdWVzVHlwZT4oe1xuICAgIDcyXHQgICAgcmVzb2x2ZXI6IHpvZFJlc29sdmVyKEJvb2tGb3JtU2NoZW1hKSBhcyBhbnksXG4gICAgNzNcdCAgICBkZWZhdWx0VmFsdWVzOiBjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMoaW5pdGlhbERhdGEpLFxuICAgIDc0XHQgIH0pO1xuICAgIDc1XHRcbiAgICA3Nlx0ICBjb25zdCB7IGZpZWxkcywgYXBwZW5kLCByZW1vdmUgfSA9IHVzZUZpZWxkQXJyYXkoe1xuICAgIDc3XHQgICAgY29udHJvbCxcbiAgICA3OFx0ICAgIG5hbWU6IFwicmVjb21tZW5kYXRpb25zXCIsXG4gICAgNzlcdCAgfSk7XG4gICAgODBcdFxuICAgIDgxXHQgIC8vIFN1cnZlaWxsZXIgbGVzIGNoYW5nZW1lbnRzIGRhbnMgbGUgZm9ybXVsYWlyZVxuICAgIDgyXHQgIGNvbnN0IGZvcm1WYWx1ZXMgPSB3YXRjaCgpO1xuICAgIDgzXHRcbiAgICA4NFx0ICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIDg1XHQgICAgLy8gU2F1dmVnYXJkZXIgbGVzIHZhbGV1cnMgaW5pdGlhbGVzIHBvdXIgY29tcGFyYWlzb25cbiAgICA4Nlx0ICAgIGlmICghb3JpZ2luYWxWYWx1ZXMpIHtcbiAgICA4N1x0ICAgICAgc2V0T3JpZ2luYWxWYWx1ZXMoSlNPTi5zdHJpbmdpZnkoY29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzKGluaXRpYWxEYXRhKSkpO1xuICAgIDg4XHQgICAgfVxuICAgIDg5XHRcbiAgICA5MFx0ICAgIC8vIFbDqXJpZmllciBzaSBkZXMgbW9kaWZpY2F0aW9ucyBvbnQgw6l0w6kgYXBwb3J0w6llc1xuICAgIDkxXHQgICAgY29uc3QgY3VycmVudFZhbHVlcyA9IEpTT04uc3RyaW5naWZ5KGZvcm1WYWx1ZXMpO1xuICAgIDkyXHQgICAgc2V0SXNNb2RpZmllZChjdXJyZW50VmFsdWVzICE9PSBvcmlnaW5hbFZhbHVlcyk7XG4gICAgOTNcdCAgfSwgW2Zvcm1WYWx1ZXMsIG9yaWdpbmFsVmFsdWVzLCBpbml0aWFsRGF0YV0pO1xuICAgIDk0XHRcbiAgICA5NVx0ICBjb25zdCBoYW5kbGVGb3JtU3VibWl0ID0gKGRhdGE6IEJvb2tGb3JtVmFsdWVzVHlwZSkgPT4ge1xuICAgIDk2XHQgICAgLy8gU2kgYXVjdW5lIG1vZGlmaWNhdGlvbiwgcmVkaXJpZ2VyIHZlcnMgbGEgcGFnZSBkJ2FjY3VlaWxcbiAgICA5N1x0ICAgIGlmICghaXNNb2RpZmllZCkge1xuICAgIDk4XHQgICAgICByb3V0ZXIucHVzaCgnLycpO1xuICAgIDk5XHQgICAgICByZXR1cm47XG4gICAxMDBcdCAgICB9XG4gICAxMDFcdFxuICAgMTAyXHQgICAgc2V0SXNTYXZpbmcodHJ1ZSk7XG4gICAxMDNcdCAgICBjb25zdCBib29rRGF0YSA9IGNvbnZlcnRGb3JtVmFsdWVzVG9Cb29rRGF0YShkYXRhKTtcbiAgIDEwNFx0XG4gICAxMDVcdCAgICBpZiAob25TdWJtaXQpIHtcbiAgIDEwNlx0ICAgICAgLy8gUGFzc2VyIGxlcyBkb25uw6llcyBhdSBjb21wb3NhbnQgcGFyZW50IHF1aSBnw6hyZXJhIGxhIHJlcXXDqnRlIFBVVFxuICAgMTA3XHQgICAgICBvblN1Ym1pdChib29rRGF0YSk7XG4gICAxMDhcdCAgICB9XG4gICAxMDlcdFxuICAgMTEwXHQgICAgLy8gUsOpaW5pdGlhbGlzZXIgbCfDqXRhdCBkZSBzYXV2ZWdhcmRlIGFwcsOocyB1biBjb3VydCBkw6lsYWlcbiAgIDExMVx0ICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgMTEyXHQgICAgICBzZXRJc1NhdmluZyhmYWxzZSk7XG4gICAxMTNcdCAgICB9LCAxMDAwKTtcbiAgIDExNFx0ICB9O1xuICAgMTE1XHRcbiAgIDExNlx0ICBjb25zdCBoYW5kbGVSZXR1cm5Ib21lID0gKCkgPT4ge1xuICAgMTE3XHQgICAgcm91dGVyLnB1c2goJy8nKTtcbiAgIDExOFx0ICB9O1xuICAgMTE5XHRcbiAgIDEyMFx0ICBjb25zdCBjb250YWluZXJWYXJpYW50cyA9IHtcbiAgIDEyMVx0ICAgIGhpZGRlbjogeyBvcGFjaXR5OiAwIH0sXG4gICAxMjJcdCAgICB2aXNpYmxlOiB7XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDFTakxwOU5nOUxENnlXcnFXTnNuRXRSIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQiLCJmb2xkZXJSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MywiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiTWFpbnRlbmFudCwgbW9kaWZpb25zIGxlIGZpY2hpZXIgb3duZXItZWRpdC1ib29rL3BhZ2UudHN4IHBvdXIgeSBham91dGVyIGxhIGxvZ2lxdWUgZGUgbWlzZSDDoCBqb3VyIGF2ZWMgbGEgcmVxdcOqdGUgUFVUIDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI3MGQ4MzdkNS1mMzFmLTQ2MzYtYjUyZC1mMTAxZGQ1ZWRjMGQiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxM01jUDFYd1hQVVVURmtFUE11UHQ0SiIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeFwiLCBcInZpZXdfcmFuZ2VcIjogWzEsIDE1XX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IklsIHNlbWJsZSBxdWUgbGUgcHJlbWllciByZW1wbGFjZW1lbnQgbidhIHBhcyBmb25jdGlvbm7DqSwgbWFpcyBsZSBzZWNvbmQgYSByw6l1c3NpLiBFc3NheW9ucyBkZSBjb3JyaWdlciBsZSBwcmVtaWVyIHJlbXBsYWNlbWVudCA6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJQYXJ0aWFsbHkgZWRpdGVkIHRoZSBmaWxlIHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4LiBTZWUgYmVsb3cgZm9yIGRldGFpbHMuXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlX2VudHJpZXNbMF06XG5ObyByZXBsYWNlbWVudCB3YXMgcGVyZm9ybWVkLCBvbGRTdHIgZGlkIG5vdCBhcHBlYXIgdmVyYmF0aW0gaW4gc3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3guXG5UaGUgY29udGVudCBpbiB0aGUgc3BlY2lmaWVkIHJlZ2lvbiBpczpcbiAgIDEwNVx0ICAgICAgICAgICAgICAgICAgPFBhc3N3b3JkRGlzcGxheSBwYXNzd29yZD17Ym9va0RhdGEuYWNjZXNzUGFzc3dvcmR9IGJvb2tJZD17Ym9va0RhdGEuaWR9IC8+XG4gICAxMDZcdCAgICAgICAgICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAxMDdcdCAgICAgICAgICAgICAgKX1cbiAgIDEwOFx0XG4gICAxMDlcdCAgICAgICAgICAgICAgPEJvb2tFZGl0Rm9ybVxuICAgMTEwXHQgICAgICAgICAgICAgICAgaW5pdGlhbERhdGE9e2Jvb2tEYXRhIHx8IHVuZGVmaW5lZH1cbiAgIDExMVx0ICAgICAgICAgICAgICAgIG9uU3VibWl0PXsoZGF0YSkgPT4ge1xuICAgMTEyXHQgICAgICAgICAgICAgICAgICBzZXRCb29rRGF0YShkYXRhKTtcbiAgIDExM1x0XG4gICAxMTRcdCAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdib29rRGF0YScsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgIDExNVx0ICAgICAgICAgICAgICAgIH19XG4gICAxMTZcdCAgICAgICAgICAgICAgLz5cbiAgIDExN1x0ICAgICAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMTE4XHQgICAgICAgICAgKX1cbiAgIDExOVx0ICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAxMjBcdCAgICAgIDwvZGl2PlxuICAgMTIxXHRcbiAgIDEyMlx0ICAgICAgPHN0eWxlIGpzeCBnbG9iYWw+e2BcbiAgIDEyM1x0ICAgICAgICBAa2V5ZnJhbWVzIGxvYWRpbmcge1xuICAgMTI0XHQgICAgICAgICAgMCUgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEwMCUpOyB9XG4gICAxMjVcdCAgICAgICAgICA1MCUgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMzAlKTsgfVxuXG5EaWZmIGJldHdlZW4gb2xkU3RyIGFuZCB0aGUgc3BlY2lmaWVkIHJlZ2lvbiBpczpcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi0tLSBvbGRTdHJcbisrKyByZWdpb25Db250ZW50XG5AQCAtMSwxMyArMSwxMyBAQFxuICAgICAgICAgICAgICAgPEJvb2tFZGl0Rm9ybVxuICAgICAgICAgICAgICAgICBpbml0aWFsRGF0YT17Ym9va0RhdGEgfHwgdW5kZWZpbmVkfVxuICAgICAgICAgICAgICAgICBvblN1Ym1pdD17KGRhdGEpID0+IHtcbi0gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRG9ubsOpZXMgZHUgZm9ybXVsYWlyZSBzb3VtaXNlczonLCBkYXRhKTtcbi0gICAgICAgICAgICAgICAgICAvLyBNZXR0cmUgw6Agam91ciBsZSBzdGF0ZSBib29rRGF0YSBhdmVjIGxlcyBkb25uw6llcyByw6ljdXDDqXLDqWVzXG4gICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEoZGF0YSk7XG4gXG4tICAgICAgICAgICAgICAgICAgLy8gU2F1dmVnYXJkZXIgbGVzIGRvbm7DqWVzIG1pc2VzIMOgIGpvdXIgZGFucyBsZSBsb2NhbFN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4tXG4tICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3Ryw6llcyBhdmVjIHN1Y2PDqHMhJyk7XG4gICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAvPlxuKyAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cbisgICAgICAgICAgKX1cbisgICAgICAgIDwvbW90aW9uLmRpdj5cbisgICAgICA8L2Rpdj5cbitcblxuXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlX2VudHJpZXNbMV06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICAgMVx0J3VzZSBjbGllbnQnO1xuICAgICAyXHRcbiAgICAgM1x0aW1wb3J0IHsgQm9va0VkaXRGb3JtIH0gZnJvbSAnQC9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybSc7XG4gICAgIDRcdGltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG4gICAgIDVcdGltcG9ydCB7IEJvb2tEYXRhIH0gZnJvbSAnQC90eXBlcy9Cb29rRGF0YSc7XG4gICAgIDZcdGltcG9ydCB7IG1vdGlvbiB9IGZyb20gJ2ZyYW1lci1tb3Rpb24nO1xuICAgICA3XHRpbXBvcnQgeyBQYWxtdHJlZSwgQm9vaywgU3VuIH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcbiAgICAgOFx0aW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9uYXZpZ2F0aW9uJztcbiAgICAgOVx0aW1wb3J0IHtQYXNzd29yZERpc3BsYXl9IGZyb20gXCIuLi8uLi8uLi9jb21wb25lbnRzL1Bhc3N3b3JkRGlzcGxheVwiO1xuICAgIDEwXHRpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuICAgIDExXHRcbiAgICAxMlx0ZnVuY3Rpb24gRWRpdEZvcm1Cb29rKCkge1xuICAgIDEzXHQgIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xuICAgIDE0XHQgIGNvbnN0IFtib29rRGF0YSwgc2V0Qm9va0RhdGFdID0gdXNlU3RhdGU8Qm9va0RhdGEgfCBudWxsPihudWxsKTtcblxuRml4IGZhaWxlZCBzdHJfcmVwbGFjZV9lbnRyaWVzIGFjY29yZGluZ2x5IGFuZCB0cnkgYWdhaW4uXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxNDNTcmlMTVRndDZoN1g4cTNuTmNOaCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250IiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjMsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifX19XSwicmVzcG9uc2VfdGV4dCI6IklsIHNlbWJsZSBxdWUgbGUgcHJlbWllciByZW1wbGFjZW1lbnQgbidhIHBhcyBmb25jdGlvbm7DqSwgbWFpcyBsZSBzZWNvbmQgYSByw6l1c3NpLiBFc3NheW9ucyBkZSBjb3JyaWdlciBsZSBwcmVtaWVyIHJlbXBsYWNlbWVudCA6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiYThkNTIxZDEtNzQ1NC00NTYzLTg0NmUtZDQwMzNlNmZlMTYwIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMUNlOGp2MXJZeU1qVnpXRjlvOFVvMkwiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInZpZXdcIiwgXCJwYXRoXCI6IFwic3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3hcIiwgXCJ2aWV3X3JhbmdlXCI6IFsxMDAsIDEyNV19In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJKZSB2b2lzIHF1ZSBsJ2ltcG9ydCBkJ2F4aW9zIGEgZMOpasOgIMOpdMOpIGFqb3V0w6kuIFbDqXJpZmlvbnMgbWFpbnRlbmFudCBsZSBjb250ZW51IGRlIGxhIGZvbmN0aW9uIG9uU3VibWl0IDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gc3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3g6XG4gICAgIDFcdCd1c2UgY2xpZW50JztcbiAgICAgMlx0XG4gICAgIDNcdGltcG9ydCB7IEJvb2tFZGl0Rm9ybSB9IGZyb20gJ0AvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0nO1xuICAgICA0XHRpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuICAgICA1XHRpbXBvcnQgeyBCb29rRGF0YSB9IGZyb20gJ0AvdHlwZXMvQm9va0RhdGEnO1xuICAgICA2XHRpbXBvcnQgeyBtb3Rpb24gfSBmcm9tICdmcmFtZXItbW90aW9uJztcbiAgICAgN1x0aW1wb3J0IHsgUGFsbXRyZWUsIEJvb2ssIFN1biB9IGZyb20gJ2x1Y2lkZS1yZWFjdCc7XG4gICAgIDhcdGltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ25leHQvbmF2aWdhdGlvbic7XG4gICAgIDlcdGltcG9ydCB7UGFzc3dvcmREaXNwbGF5fSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50cy9QYXNzd29yZERpc3BsYXlcIjtcbiAgICAxMFx0aW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbiAgICAxMVx0XG4gICAgMTJcdGZ1bmN0aW9uIEVkaXRGb3JtQm9vaygpIHtcbiAgICAxM1x0ICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcbiAgICAxNFx0ICBjb25zdCBbYm9va0RhdGEsIHNldEJvb2tEYXRhXSA9IHVzZVN0YXRlPEJvb2tEYXRhIHwgbnVsbD4obnVsbCk7XG4gICAgMTVcdCAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xuVG90YWwgbGluZXMgaW4gZmlsZTogMTM0XG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxM01jUDFYd1hQVVVURmtFUE11UHQ0SiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250IiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjMsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifX19XSwicmVzcG9uc2VfdGV4dCI6IkplIHZvaXMgcXVlIGwnaW1wb3J0IGQnYXhpb3MgYSBkw6lqw6Agw6l0w6kgYWpvdXTDqS4gVsOpcmlmaW9ucyBtYWludGVuYW50IGxlIGNvbnRlbnUgZGUgbGEgZm9uY3Rpb24gb25TdWJtaXQgOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjEyNmVmZmU5LTk5NDItNDI0OS1iYTM5LTBjNjVlMjUwMzRkMyIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFOc3l0QXE5WHhHU1JzVDVvQ3hkb2VaIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeFwiLCBcInN0cl9yZXBsYWNlX2VudHJpZXNcIjogW3tcIm9sZF9zdHJcIjogXCIgICAgICAgICAgICAgICAgb25TdWJtaXQ9eyhkYXRhKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEoZGF0YSk7XFxuXFxuICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xcbiAgICAgICAgICAgICAgICB9fVwiLCBcIm5ld19zdHJcIjogXCIgICAgICAgICAgICAgICAgb25TdWJtaXQ9e2FzeW5jIChkYXRhKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm5cXHUwMGU5ZXMgZHUgZm9ybXVsYWlyZSBzb3VtaXNlczonLCBkYXRhKTtcXG4gICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICB0cnkge1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaWQpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgLy8gRW52b3llciB1bmUgcmVxdVxcdTAwZWF0ZSBQVVQgcG91ciBtZXR0cmUgXFx1MDBlMCBqb3VyIGxlcyBkb25uXFx1MDBlOWVzXFxuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucHV0KGBodHRwOi8vbG9jYWxob3N0OjMwMDEvYXBpL3N0YXkvJHtkYXRhLmlkfWAsIGRhdGEpO1xcbiAgICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm5cXHUwMGU5ZXMgbWlzZXMgXFx1MDBlMCBqb3VyIGF2ZWMgc3VjY1xcdTAwZThzOicsIHJlc3BvbnNlLmRhdGEpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ldHRyZSBcXHUwMGUwIGpvdXIgbGUgc3RhdGUgYm9va0RhdGEgYXZlYyBsZXMgZG9ublxcdTAwZTllcyByXFx1MDBlOWN1cFxcdTAwZTlyXFx1MDBlOWVzXFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEocmVzcG9uc2UuZGF0YSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2F1dmVnYXJkZXIgbGVzIGRvbm5cXHUwMGU5ZXMgbWlzZXMgXFx1MDBlMCBqb3VyIGRhbnMgbGUgbG9jYWxTdG9yYWdlXFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuZGF0YSkpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdNb2RpZmljYXRpb25zIGVucmVnaXN0clxcdTAwZTllcyBhdmVjIHN1Y2NcXHUwMGU4cyEnKTtcXG4gICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgLy8gUGFzIGQnSUQsIGRvbmMgb24gbWV0IHNpbXBsZW1lbnQgXFx1MDBlMCBqb3VyIGxlIHN0YXRlXFxuICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xcbiAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XFxuICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdNb2RpZmljYXRpb25zIGVucmVnaXN0clxcdTAwZTllcyBhdmVjIHN1Y2NcXHUwMGU4cyEnKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgbWlzZSBcXHUwMGUwIGpvdXIgZGVzIGRvbm5cXHUwMGU5ZXM6JywgZXJyb3IpO1xcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1VuZSBlcnJldXIgZXN0IHN1cnZlbnVlIGxvcnMgZGUgbGEgbWlzZSBcXHUwMGUwIGpvdXIgZGVzIGRvbm5cXHUwMGU5ZXMuJyk7XFxuICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlclwiOiAxMTIsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJcIjogMTE2fV19In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJNYWludGVuYW50LCBtZXR0b25zIMOgIGpvdXIgbGEgZm9uY3Rpb24gb25TdWJtaXQgcG91ciBham91dGVyIGxhIGxvZ2lxdWUgZGUgbWlzZSDDoCBqb3VyIGF2ZWMgbGEgcmVxdcOqdGUgUFVUIDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gc3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3g6XG4gICAxMDBcdCAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDEwMVx0ICAgICAgICAgICkgOiAoXG4gICAxMDJcdCAgICAgICAgICAgIDxtb3Rpb24uZGl2IHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9IGNsYXNzTmFtZT1cInNwYWNlLXktOFwiPlxuICAgMTAzXHQgICAgICAgICAgICAgIHsvKiBBZmZpY2hhZ2UgZHUgbW90IGRlIHBhc3NlICovfVxuICAgMTA0XHQgICAgICAgICAgICAgIHtib29rRGF0YT8uYWNjZXNzUGFzc3dvcmQgJiYgYm9va0RhdGE/LmlkICYmIChcbiAgIDEwNVx0ICAgICAgICAgICAgICAgIDxtb3Rpb24uZGl2IHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9PlxuICAgMTA2XHQgICAgICAgICAgICAgICAgICA8UGFzc3dvcmREaXNwbGF5IHBhc3N3b3JkPXtib29rRGF0YS5hY2Nlc3NQYXNzd29yZH0gYm9va0lkPXtib29rRGF0YS5pZH0gLz5cbiAgIDEwN1x0ICAgICAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDEwOFx0ICAgICAgICAgICAgICApfVxuICAgMTA5XHRcbiAgIDExMFx0ICAgICAgICAgICAgICA8Qm9va0VkaXRGb3JtXG4gICAxMTFcdCAgICAgICAgICAgICAgICBpbml0aWFsRGF0YT17Ym9va0RhdGEgfHwgdW5kZWZpbmVkfVxuICAgMTEyXHQgICAgICAgICAgICAgICAgb25TdWJtaXQ9eyhkYXRhKSA9PiB7XG4gICAxMTNcdCAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xuICAgMTE0XHRcbiAgIDExNVx0ICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgMTE2XHQgICAgICAgICAgICAgICAgfX1cbiAgIDExN1x0ICAgICAgICAgICAgICAvPlxuICAgMTE4XHQgICAgICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAxMTlcdCAgICAgICAgICApfVxuICAgMTIwXHQgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDEyMVx0ICAgICAgPC9kaXY+XG4gICAxMjJcdFxuICAgMTIzXHQgICAgICA8c3R5bGUganN4IGdsb2JhbD57YFxuICAgMTI0XHQgICAgICAgIEBrZXlmcmFtZXMgbG9hZGluZyB7XG4gICAxMjVcdCAgICAgICAgICAwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTAwJSk7IH1cblRvdGFsIGxpbmVzIGluIGZpbGU6IDEzNFxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMUNlOGp2MXJZeU1qVnpXRjlvOFVvMkwifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCIsImZvbGRlclJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjozLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In19fV0sInJlc3BvbnNlX3RleHQiOiJNYWludGVuYW50LCBtZXR0b25zIMOgIGpvdXIgbGEgZm9uY3Rpb24gb25TdWJtaXQgcG91ciBham91dGVyIGxhIGxvZ2lxdWUgZGUgbWlzZSDDoCBqb3VyIGF2ZWMgbGEgcmVxdcOqdGUgUFVUIDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJjMjY0MmQ3OS00YWIwLTQ0NjktODc5Yi0xODI4M2FjN2FiMTIiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJQYXJmYWl0ICEgTGVzIG1vZGlmaWNhdGlvbnMgb250IMOpdMOpIGVmZmVjdHXDqWVzIGF2ZWMgc3VjY8Oocy4gVm9pY2kgdW4gcsOpc3Vtw6kgZGVzIGNoYW5nZW1lbnRzIGFwcG9ydMOpcyA6XG5cbiMjIyAxLiBEYW5zIGxlIGZpY2hpZXIgYHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3hgIDpcblxuMS4gU2ltcGxpZmljYXRpb24gZGUgbGEgZm9uY3Rpb24gYGhhbmRsZUZvcm1TdWJtaXRgIDpcbiAgIC0gU3VwcHJlc3Npb24gZGUgbGEgbG9naXF1ZSBkZSByZXF1w6p0ZSBQVVRcbiAgIC0gQ29uc2VydmF0aW9uIGRlIGxhIGxvZ2lxdWUgZGUgcmVkaXJlY3Rpb24gdmVycyBsYSBwYWdlIGQnYWNjdWVpbCBzaSBhdWN1bmUgbW9kaWZpY2F0aW9uIG4nYSDDqXTDqSBlZmZlY3R1w6llXG4gICAtIFRyYW5zbWlzc2lvbiBkZXMgZG9ubsOpZXMgYXUgY29tcG9zYW50IHBhcmVudCB2aWEgbGUgY2FsbGJhY2sgYG9uU3VibWl0YFxuXG4jIyMgMi4gRGFucyBsZSBmaWNoaWVyIGBzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeGAgOlxuXG4xLiBBam91dCBkZSBsJ2ltcG9ydCBkJ2F4aW9zXG4yLiBNb2RpZmljYXRpb24gZGUgbGEgZm9uY3Rpb24gYG9uU3VibWl0YCBwb3VyIDpcbiAgIC0gRW52b3llciB1bmUgcmVxdcOqdGUgUFVUIMOgIGwnQVBJIHNpIGwnSUQgZXhpc3RlXG4gICAtIE1ldHRyZSDDoCBqb3VyIGxlIHN0YXRlIGBib29rRGF0YWAgYXZlYyBsZXMgZG9ubsOpZXMgcsOpY3Vww6lyw6llc1xuICAgLSBTYXV2ZWdhcmRlciBsZXMgZG9ubsOpZXMgbWlzZXMgw6Agam91ciBkYW5zIGxlIGxvY2FsU3RvcmFnZVxuICAgLSBHw6lyZXIgbGVzIGVycmV1cnMgcG90ZW50aWVsbGVzXG5cbkNlcyBtb2RpZmljYXRpb25zIHJlc3BlY3RlbnQgbWlldXggbGEgc8OpcGFyYXRpb24gZGVzIHJlc3BvbnNhYmlsaXTDqXMgOlxuLSBMZSBjb21wb3NhbnQgYEJvb2tFZGl0Rm9ybWAgZXN0IHJlc3BvbnNhYmxlIGRlIGxhIGdlc3Rpb24gZHUgZm9ybXVsYWlyZSBldCBkZSBsYSBkw6l0ZWN0aW9uIGRlcyBtb2RpZmljYXRpb25zXG4tIExlIGNvbXBvc2FudCBwYXJlbnQgYG93bmVyLWVkaXQtYm9vay9wYWdlLnRzeGAgZXN0IHJlc3BvbnNhYmxlIGRlIGxhIGNvbW11bmljYXRpb24gYXZlYyBsJ0FQSSBldCBkZSBsYSBtaXNlIMOgIGpvdXIgZGUgbCfDqXRhdCBnbG9iYWxcblxuTGUgY29tcG9ydGVtZW50IHJlc3RlIGxlIG3Dqm1lIDpcbjEuIFNpIGF1Y3VuZSBtb2RpZmljYXRpb24gbidhIMOpdMOpIGVmZmVjdHXDqWUsIGxlIGJvdXRvbiByZWRpcmlnZSB2ZXJzIGxhIHBhZ2UgZCdhY2N1ZWlsXG4yLiBTaSBkZXMgbW9kaWZpY2F0aW9ucyBvbnQgw6l0w6kgZWZmZWN0dcOpZXMsIGxlIGJvdXRvbiBlbnZvaWUgdW5lIHJlcXXDqnRlIFBVVCDDoCBsJ0FQSSBwb3VyIG1ldHRyZSDDoCBqb3VyIGxlcyBkb25uw6llc1xuMy4gTGUgc3RhdGUgYGJvb2tEYXRhYCBlc3QgbWlzIMOgIGpvdXIgYXZlYyBsZXMgZG9ubsOpZXMgcsOpY3Vww6lyw6llcyBhcHLDqHMgbGEgbWlzZSDDoCBqb3VyXG40LiBMZXMgZG9ubsOpZXMgbWlzZXMgw6Agam91ciBzb250IHNhdXZlZ2FyZMOpZXMgZGFucyBsZSBsb2NhbFN0b3JhZ2VcblxuRXN0LWNlIHF1ZSBjZXMgbW9kaWZpY2F0aW9ucyBjb3JyZXNwb25kZW50IMOgIGNlIHF1ZSB2b3VzIHNvdWhhaXRpZXogP1xuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeC5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgMTA4XHQgICAgICAgICAgICAgICl9XG4gICAxMDlcdFxuICAgMTEwXHQgICAgICAgICAgICAgIDxCb29rRWRpdEZvcm1cbiAgIDExMVx0ICAgICAgICAgICAgICAgIGluaXRpYWxEYXRhPXtib29rRGF0YSB8fCB1bmRlZmluZWR9XG4gICAxMTJcdCAgICAgICAgICAgICAgICBvblN1Ym1pdD17YXN5bmMgKGRhdGEpID0+IHtcbiAgIDExM1x0ICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm7DqWVzIGR1IGZvcm11bGFpcmUgc291bWlzZXM6JywgZGF0YSk7XG4gICAxMTRcdFxuICAgMTE1XHQgICAgICAgICAgICAgICAgICB0cnkge1xuICAgMTE2XHQgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmlkKSB7XG4gICAxMTdcdCAgICAgICAgICAgICAgICAgICAgICAvLyBFbnZveWVyIHVuZSByZXF1w6p0ZSBQVVQgcG91ciBtZXR0cmUgw6Agam91ciBsZXMgZG9ubsOpZXNcbiAgIDExOFx0ICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucHV0KGBodHRwOi8vbG9jYWxob3N0OjMwMDEvYXBpL3N0YXkvJHtkYXRhLmlkfWAsIGRhdGEpO1xuICAgMTE5XHRcbiAgIDEyMFx0ICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgMTIxXHQgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRG9ubsOpZXMgbWlzZXMgw6Agam91ciBhdmVjIHN1Y2PDqHM6JywgcmVzcG9uc2UuZGF0YSk7XG4gICAxMjJcdFxuICAgMTIzXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBNZXR0cmUgw6Agam91ciBsZSBzdGF0ZSBib29rRGF0YSBhdmVjIGxlcyBkb25uw6llcyByw6ljdXDDqXLDqWVzXG4gICAxMjRcdCAgICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKHJlc3BvbnNlLmRhdGEpO1xuICAgMTI1XHRcbiAgIDEyNlx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2F1dmVnYXJkZXIgbGVzIGRvbm7DqWVzIG1pc2VzIMOgIGpvdXIgZGFucyBsZSBsb2NhbFN0b3JhZ2VcbiAgIDEyN1x0ICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuZGF0YSkpO1xuICAgMTI4XHRcbiAgIDEyOVx0ICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3Ryw6llcyBhdmVjIHN1Y2PDqHMhJyk7XG4gICAxMzBcdCAgICAgICAgICAgICAgICAgICAgICB9XG4gICAxMzFcdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgIDEzMlx0ICAgICAgICAgICAgICAgICAgICAgIC8vIFBhcyBkJ0lELCBkb25jIG9uIG1ldCBzaW1wbGVtZW50IMOgIGpvdXIgbGUgc3RhdGVcbiAgIDEzM1x0ICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xuICAgMTM0XHQgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgMTM1XHQgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3Ryw6llcyBhdmVjIHN1Y2PDqHMhJyk7XG4gICAxMzZcdCAgICAgICAgICAgICAgICAgICAgfVxuICAgMTM3XHQgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgMTM4XHQgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBsb3JzIGRlIGxhIG1pc2Ugw6Agam91ciBkZXMgZG9ubsOpZXM6JywgZXJyb3IpO1xuICAgMTM5XHQgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdVbmUgZXJyZXVyIGVzdCBzdXJ2ZW51ZSBsb3JzIGRlIGxhIG1pc2Ugw6Agam91ciBkZXMgZG9ubsOpZXMuJyk7XG4gICAxNDBcdCAgICAgICAgICAgICAgICAgIH1cbiAgIDE0MVx0ICAgICAgICAgICAgICAgIH1cbiAgIDE0Mlx0ICAgICAgICAgICAgICAvPlxuICAgMTQzXHQgICAgICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAxNDRcdCAgICAgICAgICApfVxuICAgMTQ1XHQgICAgICAgIDwvbW90aW9uLmRpdj5cblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMU5zeXRBcTlYeEdTUnNUNW9DeGRvZVoifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCIsImZvbGRlclJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjozLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In19fV0sInJlc3BvbnNlX3RleHQiOiJQYXJmYWl0ICEgTGVzIG1vZGlmaWNhdGlvbnMgb250IMOpdMOpIGVmZmVjdHXDqWVzIGF2ZWMgc3VjY8Oocy4gVm9pY2kgdW4gcsOpc3Vtw6kgZGVzIGNoYW5nZW1lbnRzIGFwcG9ydMOpcyA6XG5cbiMjIyAxLiBEYW5zIGxlIGZpY2hpZXIgYHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3hgIDpcblxuMS4gU2ltcGxpZmljYXRpb24gZGUgbGEgZm9uY3Rpb24gYGhhbmRsZUZvcm1TdWJtaXRgIDpcbiAgIC0gU3VwcHJlc3Npb24gZGUgbGEgbG9naXF1ZSBkZSByZXF1w6p0ZSBQVVRcbiAgIC0gQ29uc2VydmF0aW9uIGRlIGxhIGxvZ2lxdWUgZGUgcmVkaXJlY3Rpb24gdmVycyBsYSBwYWdlIGQnYWNjdWVpbCBzaSBhdWN1bmUgbW9kaWZpY2F0aW9uIG4nYSDDqXTDqSBlZmZlY3R1w6llXG4gICAtIFRyYW5zbWlzc2lvbiBkZXMgZG9ubsOpZXMgYXUgY29tcG9zYW50IHBhcmVudCB2aWEgbGUgY2FsbGJhY2sgYG9uU3VibWl0YFxuXG4jIyMgMi4gRGFucyBsZSBmaWNoaWVyIGBzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeGAgOlxuXG4xLiBBam91dCBkZSBsJ2ltcG9ydCBkJ2F4aW9zXG4yLiBNb2RpZmljYXRpb24gZGUgbGEgZm9uY3Rpb24gYG9uU3VibWl0YCBwb3VyIDpcbiAgIC0gRW52b3llciB1bmUgcmVxdcOqdGUgUFVUIMOgIGwnQVBJIHNpIGwnSUQgZXhpc3RlXG4gICAtIE1ldHRyZSDDoCBqb3VyIGxlIHN0YXRlIGBib29rRGF0YWAgYXZlYyBsZXMgZG9ubsOpZXMgcsOpY3Vww6lyw6llc1xuICAgLSBTYXV2ZWdhcmRlciBsZXMgZG9ubsOpZXMgbWlzZXMgw6Agam91ciBkYW5zIGxlIGxvY2FsU3RvcmFnZVxuICAgLSBHw6lyZXIgbGVzIGVycmV1cnMgcG90ZW50aWVsbGVzXG5cbkNlcyBtb2RpZmljYXRpb25zIHJlc3BlY3RlbnQgbWlldXggbGEgc8OpcGFyYXRpb24gZGVzIHJlc3BvbnNhYmlsaXTDqXMgOlxuLSBMZSBjb21wb3NhbnQgYEJvb2tFZGl0Rm9ybWAgZXN0IHJlc3BvbnNhYmxlIGRlIGxhIGdlc3Rpb24gZHUgZm9ybXVsYWlyZSBldCBkZSBsYSBkw6l0ZWN0aW9uIGRlcyBtb2RpZmljYXRpb25zXG4tIExlIGNvbXBvc2FudCBwYXJlbnQgYG93bmVyLWVkaXQtYm9vay9wYWdlLnRzeGAgZXN0IHJlc3BvbnNhYmxlIGRlIGxhIGNvbW11bmljYXRpb24gYXZlYyBsJ0FQSSBldCBkZSBsYSBtaXNlIMOgIGpvdXIgZGUgbCfDqXRhdCBnbG9iYWxcblxuTGUgY29tcG9ydGVtZW50IHJlc3RlIGxlIG3Dqm1lIDpcbjEuIFNpIGF1Y3VuZSBtb2RpZmljYXRpb24gbidhIMOpdMOpIGVmZmVjdHXDqWUsIGxlIGJvdXRvbiByZWRpcmlnZSB2ZXJzIGxhIHBhZ2UgZCdhY2N1ZWlsXG4yLiBTaSBkZXMgbW9kaWZpY2F0aW9ucyBvbnQgw6l0w6kgZWZmZWN0dcOpZXMsIGxlIGJvdXRvbiBlbnZvaWUgdW5lIHJlcXXDqnRlIFBVVCDDoCBsJ0FQSSBwb3VyIG1ldHRyZSDDoCBqb3VyIGxlcyBkb25uw6llc1xuMy4gTGUgc3RhdGUgYGJvb2tEYXRhYCBlc3QgbWlzIMOgIGpvdXIgYXZlYyBsZXMgZG9ubsOpZXMgcsOpY3Vww6lyw6llcyBhcHLDqHMgbGEgbWlzZSDDoCBqb3VyXG40LiBMZXMgZG9ubsOpZXMgbWlzZXMgw6Agam91ciBzb250IHNhdXZlZ2FyZMOpZXMgZGFucyBsZSBsb2NhbFN0b3JhZ2VcblxuRXN0LWNlIHF1ZSBjZXMgbW9kaWZpY2F0aW9ucyBjb3JyZXNwb25kZW50IMOgIGNlIHF1ZSB2b3VzIHNvdWhhaXRpZXogP1xuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJyZXF1ZXN0X2lkIjoiMzlkMThmZjgtYjE2Zi00ZTFjLTk2N2MtNzhmODgwMGI4ZWEyIiwidXVpZCI6Ijk0NTc5OWU0LWRkZGQtNGYyYi04MjY2LTJlOWVlN2VkZDFmYyIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtY2hlY2twb2ludC1kZWxpbWl0ZXIiLCJzdGF0dXMiOiJzdWNjZXNzIiwiZnJvbVRpbWVzdGFtcCI6MTc0NDM2NzkwNTUyMCwidG9UaW1lc3RhbXAiOjE3NDQzNjgyMjMzMDAsInNlZW5fc3RhdGUiOiJzZWVuIn0seyJyZXF1ZXN0X2lkIjoiYmUwNTY0YTItYzA5ZS00NzAxLWJjNTctN2E5N2U3OTVmYTI5Iiwic3RhdHVzIjoiY2FuY2VsbGVkIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy10dXJuLWRlbGltaXRlciJ9LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI4YzUyYWYxNS04ZDAxLTQzZWItYTVjMS1iYThjY2E3MjM1YjEiLCJyZXF1ZXN0X21lc3NhZ2UiOiJFcnJvciB1cGRhdGluZyBzdGF5OiBQcmlzbWFDbGllbnRWYWxpZGF0aW9uRXJyb3I6IFxuSW52YWxpZCBgdGhpcy5wcmlzbWEuc3RheUluZm8udXBkYXRlKClgIGludm9jYXRpb24gaW5cbi9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWJhY2svc3JjL3NlcnZpY2VzL3N0YXlJbmZvLnNlcnZpY2UudHM6MTY0OjM3XG5cbiAgMTYxIH1cbiAgMTYyIFxuICAxNjMgYXN5bmMgdXBkYXRlU3RheShpZDogc3RyaW5nLCBkYXRhOiBhbnkpIHtcbuKGkiAxNjQgICAgIHJldHVybiB0aGlzLnByaXNtYS5zdGF5SW5mby51cGRhdGUoe1xuICAgICAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICAgICAgaWQ6IFwiYmFjZjc4NDktM2ZmZC00NjE5LWI0YjQtYjVjNTBiN2JmYTUzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIGlkOiBcImJhY2Y3ODQ5LTNmZmQtNDYxOS1iNGI0LWI1YzUwYjdiZmE1M1wiLFxuICAgICAgICAgICAgICBhcnJpdmFsVGltZTogXCJGbGV4aWJsZWRzZlwiLFxuICAgICAgICAgICAgICBhY2Nlc3NJbnN0cnVjdGlvbnM6IFwiU2Nhbm5lciBsZSBRUiBjb2RlIHBvdXIgb2J0ZW5pciBsZSBXaUZpLlwiLFxuICAgICAgICAgICAgICBhcnJpdmFsQWRkaXRpb25hbEluZm86IFwiQmllbnZlbnVlIMOgIE9uZWlybyBHbGljby4gVG91dCBjZSBkb250IHZvdXMgYXZleiBiZXNvaW4gZXN0IGwnYW1vdXIuXCIsXG4gICAgICAgICAgICAgIGRlcGFydHVyZVRpbWU6IFwiMTFoMDBcIixcbiAgICAgICAgICAgICAgZXhpdEluc3RydWN0aW9uczogXCJMYWlzc2VyIGxlcyBjbMOpcyBkYW5zIGxldXIgYm/DrnRlIMOgIGNsw6lzLiBVbiBmcmFpcyBlbiBjYXMgZGUgcGVydGUgZGUgY2zDqSBzJ2FwcGxpcXVlLlwiLFxuICAgICAgICAgICAgICBkZXBhcnR1cmVBZGRpdGlvbmFsSW5mbzogXCJTaSB2b3VzIHNvdWhhaXRleiBwYXNzZXIgZHUgdGVtcHMgw6AgbGEgcGxhZ2UgYXByw6hzIGwnaGV1cmUgZGUgZMOpcGFydCwgdm9zIGJhZ2FnZXMgcGV1dmVudCDDqnRyZSBlbnRyZXBvc8OpcyBlbiBsaWV1IHPDu3IuXCIsXG4gICAgICAgICAgICAgIHdpZmlOYW1lOiBcIkNoYW1waW9uIEpldCBTa2lcIixcbiAgICAgICAgICAgICAgd2lmaVBhc3N3b3JkOiBcIk9uZWlyb0dsaWNvXCIsXG4gICAgICAgICAgICAgIGhvdXNlUnVsZXM6IFwiTmUgcGFzIG1ldHRyZSBkZSBwYXBpZXIgdG9pbGV0dGUgZGFucyBsZXMgdG9pbGV0dGVzLCB1dGlsaXNlciBsYSBwb3ViZWxsZSDDoCBjw7R0w6kuIEZ1bWVyIMOgIGwnaW50w6lyaWV1ciBlc3QgaW50ZXJkaXQuIFV0aWxpc2VyIHVuIGNlbmRyaWVyIGVuIGV4dMOpcmlldXIuIFBhcyBkZSBiYXJiZWN1ZSBsJ8OpdMOpLiBMJ2VhdSBkdSByb2JpbmV0IG4nZXN0IHBhcyBwb3RhYmxlLiBOZSBwYXMgbGFpc3NlciBsZXMgY2zDqXMgZGFucyBsJ2FwcGFydGVtZW50LCB2b3VzIHJpc3F1ZXogZGUgdm91cyBlbmZlcm1lciBkZWhvcnMuIE5lIHBhcyBsYWlzc2VyIGQnb2JqZXRzIGRlaG9ycyBsYSBudWl0LiBMZXMgaGV1cmVzIGRlIHNpbGVuY2Ugc29udCBkZSAxNDowMCDDoCAxNzowMCBldCBkZSAyMjowMCDDoCAwNzozMC4gRmVybWVyIGZlbsOqdHJlcyBldCBwb3J0ZXMgbG9yc3F1ZSBsYSBjbGltYXRpc2F0aW9uIGVzdCBlbiBtYXJjaGUuIMOJdGVpbmRyZSBsYSBjbGltYXRpc2F0aW9uIGVuIHF1aXR0YW50IGwnYXBwYXJ0ZW1lbnQuIFBhcyBkZSBmw6p0ZXMgYXV0b3Jpc8OpZXMuXCIsXG4gICAgICAgICAgICAgIG93bmVyQ29udGFjdDogXCIrMzMgNyA2OSA4NCA4NSA3MSwgKzMwIDY5NDAgNTQyIDg5OVwiLFxuICAgICAgICAgICAgICBvd25lck5hbWU6IFwiRGF2aWQgRGUgUGFsbWFcIixcbiAgICAgICAgICAgICAgZ2VuZXJhbEluZm86IFwiQXBwYXJ0ZW1lbnRzIGVuIGF1dG9nZXN0aW9uLiBEZW1hbmRlciDDoCBEYXZpZCBwb3VyIHRvdXQgYmVzb2luIHN1cHBsw6ltZW50YWlyZS4gTGVzIHNlcnZpZXR0ZXMgYmxhbmNoZXMgZGUgbCdhcHBhcnRlbWVudCBuZSBkb2l2ZW50IHBhcyDDqnRyZSB1dGlsaXPDqWVzIMOgIGxhIHBsYWdlLlwiLFxuICAgICAgICAgICAgICByZWNvbW1lbmRhdGlvbnM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBpZDogXCIxMGFhNWY4NS1kNzAyLTQyNjgtODAwYS0yNmM2ZTMwMTQ4NDJcIixcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQWtyb2dpYWxpIENhZmVcIixcbiAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IFwiXCIsXG4gICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJVbiByZXN0YXVyYW50IGVuIGJvcmQgZGUgbWVyIGF2ZWMgZGUgZ3JhbmRlcyBwb3J0aW9ucyBkZSBwcm9kdWl0cyB0eXBpcXVlcyBncmVjcy4gUHJvZml0ZXogZGUgdm90cmUgb3V6byBsZXMgcGllZHMgZGFucyBsJ2VhdS5cIixcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwiUkVTVEFVUkFOVFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBpZDogXCIwYTkwMzQ3MC1lNzEzLTRmOWUtYWRjZC1iN2RmZjM4ZDM2ZDVcIixcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTmlrb3MgQmFyXCIsXG4gICAgICAgICAgICAgICAgICBhZGRyZXNzOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiVW4gcGV0aXQgcmVzdGF1cmFudCBmYW1pbGlhbCBhdmVjIHVuZSB2dWUgbWFnbmlmaXF1ZSBzdXIgbGEgcGxhZ2UuIEZydWl0cyBkZSBtZXIgZnJhaXMgdG91cyBsZXMgam91cnMuXCIsXG4gICAgICAgICAgICAgICAgICB0eXBlOiBcIlJFU1RBVVJBTlRcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgaWQ6IFwiOTI3MzhjOGQtM2UwNC00NDc1LWFiMDQtNzEwNWNkYzU5MzFlXCIsXG4gICAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbXBhc3NcIixcbiAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IFwiXCIsXG4gICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJVbmUgdnVlIGltcHJlbmFibGUgc3VyIGxlIHBvcnQsIHBhcmZhaXQgcG91ciB1biBjYWbDqSBvdSB1biBjb2NrdGFpbCByZWxheGFudC5cIixcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwiQkFSXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGlkOiBcIjYxNTc4OTgwLTI4ZjctNDI4Yi04ZDdiLWZkODAzN2ZhOWI0ZFwiLFxuICAgICAgICAgICAgICAgICAgbmFtZTogXCJPY2VhbiBCZWFjaFwiLFxuICAgICAgICAgICAgICAgICAgYWRkcmVzczogXCJcIixcbiAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlBldGl0LWTDqWpldW5lciBkw6lsaWNpZXV4IGV0IGNvcGlldXggw6AgcHJpeCBzcMOpY2lhbC4gRGVtYW5kZXIgw6AgRGF2aWQgZGVzIGJvbnMgZGUgcsOpZHVjdGlvbi5cIixcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwiUkVTVEFVUkFOVFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBpZDogXCI5YzM1MDgzNy01MzRmLTQ0OTctOWQ0Yi04MmQ3MWUzMDI3OGFcIixcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwiVGVtcGxlIGQnQXBoYWVhXCIsXG4gICAgICAgICAgICAgICAgICBhZGRyZXNzOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiTGUgdGVtcGxlIGRvcmlxdWUgZCdBdGjDqW5hIEFwaGFpYSwgYmllbiBwcsOpc2VydsOpIGV0IGZvcm1hbnQgdW4gdHJpYW5nbGUgYXZlYyBsJ0Fjcm9wb2xlIGQnQXRow6huZXMgZXQgbGUgVGVtcGxlIGRlIFBvc8OpaWRvbiDDoCBTb3VuaW9uLlwiLFxuICAgICAgICAgICAgICAgICAgdHlwZTogXCJUT1VSSVNNXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGlkOiBcImIwNTc3ODc3LWE1NjYtNDVkMC1iNGE2LWUwOGU0MTI2OTA0OVwiLFxuICAgICAgICAgICAgICAgICAgbmFtZTogXCJBZ2lvcyBOZWt0YXJpb3NcIixcbiAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IFwiXCIsXG4gICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCLDiWdsaXNlIHRyw6hzIHZpc2l0w6llIGQnQWdpb3MgTmVrdGFyaW9zIGF2ZWMgc29uIG1vbmFzdMOocmUgc3VycGxvbWJhbnQsIGxpZXUgZGUgcMOobGVyaW5hZ2UuXCIsXG4gICAgICAgICAgICAgICAgICB0eXBlOiBcIlRPVVJJU01cIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgaWQ6IFwiOTBlOTdjMWMtYTcwZi00N2VhLThjZDAtYWNhYWZjNjQ3MGRlXCIsXG4gICAgICAgICAgICAgICAgICBuYW1lOiBcIlBsYWdlIGQnQWdpYSBNYXJpbmFcIixcbiAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IFwiXCIsXG4gICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJMYSBwbHVzIGxvbmd1ZSBwbGFnZSBkZSBzYWJsZSBkZSBsJ8OubGUgZCdBZWdpbmEsIGlkw6lhbGUgcG91ciBsZXMgamV1bmVzIGVuZmFudHMuXCIsXG4gICAgICAgICAgICAgICAgICB0eXBlOiBcIlRPVVJJU01cIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+flxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICAgICAgcmVjb21tZW5kYXRpb25zOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcblxuQXJndW1lbnQgYHJlY29tbWVuZGF0aW9uc2A6IEludmFsaWQgdmFsdWUgcHJvdmlkZWQuIEV4cGVjdGVkIFJlY29tbWVuZGF0aW9uVXBkYXRlTWFueVdpdGhvdXRTdGF5SW5mb05lc3RlZElucHV0IG9yIFJlY29tbWVuZGF0aW9uVW5jaGVja2VkVXBkYXRlTWFueVdpdGhvdXRTdGF5SW5mb05lc3RlZElucHV0LCBwcm92aWRlZCAoT2JqZWN0LCBPYmplY3QsIE9iamVjdCwgT2JqZWN0LCBPYmplY3QsIE9iamVjdCwgT2JqZWN0KS5cbiAgICBhdCBBbiAoL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stYmFjay9ub2RlX21vZHVsZXMvQHByaXNtYS9jbGllbnQvcnVudGltZS9saWJyYXJ5LmpzOjI5OjEzNjMpXG4gICAgYXQgem4uaGFuZGxlUmVxdWVzdEVycm9yICgvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1iYWNrL25vZGVfbW9kdWxlcy9AcHJpc21hL2NsaWVudC9ydW50aW1lL2xpYnJhcnkuanM6MTIxOjcxMDIpXG4gICAgYXQgem4uaGFuZGxlQW5kTG9nUmVxdWVzdEVycm9yICgvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1iYWNrL25vZGVfbW9kdWxlcy9AcHJpc21hL2NsaWVudC9ydW50aW1lL2xpYnJhcnkuanM6MTIxOjY3ODQpXG4gICAgYXQgem4ucmVxdWVzdCAoL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stYmFjay9ub2RlX21vZHVsZXMvQHByaXNtYS9jbGllbnQvcnVudGltZS9saWJyYXJ5LmpzOjEyMTo2NDkxKVxuICAgIGF0IGwgKC9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWJhY2svbm9kZV9tb2R1bGVzL0BwcmlzbWEvY2xpZW50L3J1bnRpbWUvbGlicmFyeS5qczoxMzA6OTc3OCkge1xuICBjbGllbnRWZXJzaW9uOiAnNi42LjAnXG59XG5cblxuXG5cbiIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiJFcnJvciB1cGRhdGluZyBzdGF5OiBQcmlzbWFDbGllbnRWYWxpZGF0aW9uRXJyb3I6ICJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiSW52YWxpZCBgdGhpcy5wcmlzbWEuc3RheUluZm8udXBkYXRlKClgIGludm9jYXRpb24gaW4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWJhY2svc3JjL3NlcnZpY2VzL3N0YXlJbmZvLnNlcnZpY2UudHM6MTY0OjM3In0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgIDE2MSB9In0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgIDE2MiAifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgMTYzIGFzeW5jIHVwZGF0ZVN0YXkoaWQ6IHN0cmluZywgZGF0YTogYW55KSB7In0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiLihpIgMTY0ICAgICByZXR1cm4gdGhpcy5wcmlzbWEuc3RheUluZm8udXBkYXRlKHsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgIHdoZXJlOiB7In0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgIGlkOiBcImJhY2Y3ODQ5LTNmZmQtNDYxOS1iNGI0LWI1YzUwYjdiZmE1M1wiIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICB9LCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgZGF0YTogeyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICBpZDogXCJiYWNmNzg0OS0zZmZkLTQ2MTktYjRiNC1iNWM1MGI3YmZhNTNcIiwifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgYXJyaXZhbFRpbWU6IFwiRmxleGlibGVkc2ZcIiwifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgYWNjZXNzSW5zdHJ1Y3Rpb25zOiBcIlNjYW5uZXIgbGUgUVIgY29kZSBwb3VyIG9idGVuaXIgbGUgV2lGaS5cIiwifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgYXJyaXZhbEFkZGl0aW9uYWxJbmZvOiBcIkJpZW52ZW51ZSDDoCBPbmVpcm8gR2xpY28uIFRvdXQgY2UgZG9udCB2b3VzIGF2ZXogYmVzb2luIGVzdCBsJ2Ftb3VyLlwiLCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICBkZXBhcnR1cmVUaW1lOiBcIjExaDAwXCIsIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgIGV4aXRJbnN0cnVjdGlvbnM6IFwiTGFpc3NlciBsZXMgY2zDqXMgZGFucyBsZXVyIGJvw650ZSDDoCBjbMOpcy4gVW4gZnJhaXMgZW4gY2FzIGRlIHBlcnRlIGRlIGNsw6kgcydhcHBsaXF1ZS5cIiwifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgZGVwYXJ0dXJlQWRkaXRpb25hbEluZm86IFwiU2kgdm91cyBzb3VoYWl0ZXogcGFzc2VyIGR1IHRlbXBzIMOgIGxhIHBsYWdlIGFwcsOocyBsJ2hldXJlIGRlIGTDqXBhcnQsIHZvcyBiYWdhZ2VzIHBldXZlbnQgw6p0cmUgZW50cmVwb3PDqXMgZW4gbGlldSBzw7tyLlwiLCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICB3aWZpTmFtZTogXCJDaGFtcGlvbiBKZXQgU2tpXCIsIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgIHdpZmlQYXNzd29yZDogXCJPbmVpcm9HbGljb1wiLCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICBob3VzZVJ1bGVzOiBcIk5lIHBhcyBtZXR0cmUgZGUgcGFwaWVyIHRvaWxldHRlIGRhbnMgbGVzIHRvaWxldHRlcywgdXRpbGlzZXIgbGEgcG91YmVsbGUgw6AgY8O0dMOpLiBGdW1lciDDoCBsJ2ludMOpcmlldXIgZXN0IGludGVyZGl0LiBVdGlsaXNlciB1biBjZW5kcmllciBlbiBleHTDqXJpZXVyLiBQYXMgZGUgYmFyYmVjdWUgbCfDqXTDqS4gTCdlYXUgZHUgcm9iaW5ldCBuJ2VzdCBwYXMgcG90YWJsZS4gTmUgcGFzIGxhaXNzZXIgbGVzIGNsw6lzIGRhbnMgbCdhcHBhcnRlbWVudCwgdm91cyByaXNxdWV6IGRlIHZvdXMgZW5mZXJtZXIgZGVob3JzLiBOZSBwYXMgbGFpc3NlciBkJ29iamV0cyBkZWhvcnMgbGEgbnVpdC4gTGVzIGhldXJlcyBkZSBzaWxlbmNlIHNvbnQgZGUgMTQ6MDAgw6AgMTc6MDAgZXQgZGUgMjI6MDAgw6AgMDc6MzAuIEZlcm1lciBmZW7DqnRyZXMgZXQgcG9ydGVzIGxvcnNxdWUgbGEgY2xpbWF0aXNhdGlvbiBlc3QgZW4gbWFyY2hlLiDDiXRlaW5kcmUgbGEgY2xpbWF0aXNhdGlvbiBlbiBxdWl0dGFudCBsJ2FwcGFydGVtZW50LiBQYXMgZGUgZsOqdGVzIGF1dG9yaXPDqWVzLlwiLCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICBvd25lckNvbnRhY3Q6IFwiKzMzIDcgNjkgODQgODUgNzEsICszMCA2OTQwIDU0MiA4OTlcIiwifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgb3duZXJOYW1lOiBcIkRhdmlkIERlIFBhbG1hXCIsIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgIGdlbmVyYWxJbmZvOiBcIkFwcGFydGVtZW50cyBlbiBhdXRvZ2VzdGlvbi4gRGVtYW5kZXIgw6AgRGF2aWQgcG91ciB0b3V0IGJlc29pbiBzdXBwbMOpbWVudGFpcmUuIExlcyBzZXJ2aWV0dGVzIGJsYW5jaGVzIGRlIGwnYXBwYXJ0ZW1lbnQgbmUgZG9pdmVudCBwYXMgw6p0cmUgdXRpbGlzw6llcyDDoCBsYSBwbGFnZS5cIiwifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgcmVjb21tZW5kYXRpb25zOiBbIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgICAgeyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICAgICAgaWQ6IFwiMTBhYTVmODUtZDcwMi00MjY4LTgwMGEtMjZjNmUzMDE0ODQyXCIsIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgICAgICBuYW1lOiBcIkFrcm9naWFsaSBDYWZlXCIsIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgICAgICBhZGRyZXNzOiBcIlwiLCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiVW4gcmVzdGF1cmFudCBlbiBib3JkIGRlIG1lciBhdmVjIGRlIGdyYW5kZXMgcG9ydGlvbnMgZGUgcHJvZHVpdHMgdHlwaXF1ZXMgZ3JlY3MuIFByb2ZpdGV6IGRlIHZvdHJlIG91em8gbGVzIHBpZWRzIGRhbnMgbCdlYXUuXCIsIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgICAgICB0eXBlOiBcIlJFU1RBVVJBTlRcIiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICAgIH0sIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgICAgeyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICAgICAgaWQ6IFwiMGE5MDM0NzAtZTcxMy00ZjllLWFkY2QtYjdkZmYzOGQzNmQ1XCIsIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgICAgICBuYW1lOiBcIk5pa29zIEJhclwiLCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICAgICAgYWRkcmVzczogXCJcIiwifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlVuIHBldGl0IHJlc3RhdXJhbnQgZmFtaWxpYWwgYXZlYyB1bmUgdnVlIG1hZ25pZmlxdWUgc3VyIGxhIHBsYWdlLiBGcnVpdHMgZGUgbWVyIGZyYWlzIHRvdXMgbGVzIGpvdXJzLlwiLCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICAgICAgdHlwZTogXCJSRVNUQVVSQU5UXCIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgICB9LCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICAgIHsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgICAgIGlkOiBcIjkyNzM4YzhkLTNlMDQtNDQ3NS1hYjA0LTcxMDVjZGM1OTMxZVwiLCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb21wYXNzXCIsIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgICAgICBhZGRyZXNzOiBcIlwiLCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiVW5lIHZ1ZSBpbXByZW5hYmxlIHN1ciBsZSBwb3J0LCBwYXJmYWl0IHBvdXIgdW4gY2Fmw6kgb3UgdW4gY29ja3RhaWwgcmVsYXhhbnQuXCIsIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgICAgICB0eXBlOiBcIkJBUlwiIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgICAgfSwifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgICB7In0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgICAgICBpZDogXCI2MTU3ODk4MC0yOGY3LTQyOGItOGQ3Yi1mZDgwMzdmYTliNGRcIiwifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgICAgIG5hbWU6IFwiT2NlYW4gQmVhY2hcIiwifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IFwiXCIsIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJQZXRpdC1kw6lqZXVuZXIgZMOpbGljaWV1eCBldCBjb3BpZXV4IMOgIHByaXggc3DDqWNpYWwuIERlbWFuZGVyIMOgIERhdmlkIGRlcyBib25zIGRlIHLDqWR1Y3Rpb24uXCIsIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgICAgICB0eXBlOiBcIlJFU1RBVVJBTlRcIiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICAgIH0sIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgICAgeyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICAgICAgaWQ6IFwiOWMzNTA4MzctNTM0Zi00NDk3LTlkNGItODJkNzFlMzAyNzhhXCIsIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgICAgICBuYW1lOiBcIlRlbXBsZSBkJ0FwaGFlYVwiLCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICAgICAgYWRkcmVzczogXCJcIiwifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkxlIHRlbXBsZSBkb3JpcXVlIGQnQXRow6luYSBBcGhhaWEsIGJpZW4gcHLDqXNlcnbDqSBldCBmb3JtYW50IHVuIHRyaWFuZ2xlIGF2ZWMgbCdBY3JvcG9sZSBkJ0F0aMOobmVzIGV0IGxlIFRlbXBsZSBkZSBQb3PDqWlkb24gw6AgU291bmlvbi5cIiwifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgICAgIHR5cGU6IFwiVE9VUklTTVwiIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgICAgfSwifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgICB7In0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgICAgICBpZDogXCJiMDU3Nzg3Ny1hNTY2LTQ1ZDAtYjRhNi1lMDhlNDEyNjkwNDlcIiwifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQWdpb3MgTmVrdGFyaW9zXCIsIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgICAgICBhZGRyZXNzOiBcIlwiLCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiw4lnbGlzZSB0csOocyB2aXNpdMOpZSBkJ0FnaW9zIE5la3RhcmlvcyBhdmVjIHNvbiBtb25hc3TDqHJlIHN1cnBsb21iYW50LCBsaWV1IGRlIHDDqGxlcmluYWdlLlwiLCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICAgICAgdHlwZTogXCJUT1VSSVNNXCIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgICB9LCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICAgIHsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgICAgIGlkOiBcIjkwZTk3YzFjLWE3MGYtNDdlYS04Y2QwLWFjYWFmYzY0NzBkZVwiLCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICAgICAgbmFtZTogXCJQbGFnZSBkJ0FnaWEgTWFyaW5hXCIsIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgICAgICBhZGRyZXNzOiBcIlwiLCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiTGEgcGx1cyBsb25ndWUgcGxhZ2UgZGUgc2FibGUgZGUgbCfDrmxlIGQnQWVnaW5hLCBpZMOpYWxlIHBvdXIgbGVzIGpldW5lcyBlbmZhbnRzLlwiLCJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgICAgICAgdHlwZTogXCJUT1VSSVNNXCIifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgICB9In0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgIF0ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgICAgfn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn4ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgICAgICAgIH0sIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICBpbmNsdWRlOiB7In0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICAgICAgICAgIHJlY29tbWVuZGF0aW9uczogdHJ1ZSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgICAgfSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAgICAgIH0pIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJBcmd1bWVudCBgcmVjb21tZW5kYXRpb25zYDogSW52YWxpZCB2YWx1ZSBwcm92aWRlZC4gRXhwZWN0ZWQgUmVjb21tZW5kYXRpb25VcGRhdGVNYW55V2l0aG91dFN0YXlJbmZvTmVzdGVkSW5wdXQgb3IgUmVjb21tZW5kYXRpb25VbmNoZWNrZWRVcGRhdGVNYW55V2l0aG91dFN0YXlJbmZvTmVzdGVkSW5wdXQsIHByb3ZpZGVkIChPYmplY3QsIE9iamVjdCwgT2JqZWN0LCBPYmplY3QsIE9iamVjdCwgT2JqZWN0LCBPYmplY3QpLiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgIGF0IEFuICgvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1iYWNrL25vZGVfbW9kdWxlcy9AcHJpc21hL2NsaWVudC9ydW50aW1lL2xpYnJhcnkuanM6Mjk6MTM2MykifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICBhdCB6bi5oYW5kbGVSZXF1ZXN0RXJyb3IgKC9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWJhY2svbm9kZV9tb2R1bGVzL0BwcmlzbWEvY2xpZW50L3J1bnRpbWUvbGlicmFyeS5qczoxMjE6NzEwMikifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICBhdCB6bi5oYW5kbGVBbmRMb2dSZXF1ZXN0RXJyb3IgKC9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWJhY2svbm9kZV9tb2R1bGVzL0BwcmlzbWEvY2xpZW50L3J1bnRpbWUvbGlicmFyeS5qczoxMjE6Njc4NCkifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICBhdCB6bi5yZXF1ZXN0ICgvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1iYWNrL25vZGVfbW9kdWxlcy9AcHJpc21hL2NsaWVudC9ydW50aW1lL2xpYnJhcnkuanM6MTIxOjY0OTEpIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgYXQgbCAoL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stYmFjay9ub2RlX21vZHVsZXMvQHByaXNtYS9jbGllbnQvcnVudGltZS9saWJyYXJ5LmpzOjEzMDo5Nzc4KSB7In0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgIGNsaWVudFZlcnNpb246ICc2LjYuMCcifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6In0ifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFRMXptbUU2Mm1VcDNRRGJIY0I5akRlIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeFwiLCBcInN0cl9yZXBsYWNlX2VudHJpZXNcIjogW3tcIm9sZF9zdHJcIjogXCIgICAgICAgICAgICAgICAgb25TdWJtaXQ9e2FzeW5jIChkYXRhKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm5cXHUwMGU5ZXMgZHUgZm9ybXVsYWlyZSBzb3VtaXNlczonLCBkYXRhKTtcXG4gICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICB0cnkge1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaWQpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgLy8gRW52b3llciB1bmUgcmVxdVxcdTAwZWF0ZSBQVVQgcG91ciBtZXR0cmUgXFx1MDBlMCBqb3VyIGxlcyBkb25uXFx1MDBlOWVzXFxuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucHV0KGBodHRwOi8vbG9jYWxob3N0OjMwMDEvYXBpL3N0YXkvJHtkYXRhLmlkfWAsIGRhdGEpO1xcbiAgICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm5cXHUwMGU5ZXMgbWlzZXMgXFx1MDBlMCBqb3VyIGF2ZWMgc3VjY1xcdTAwZThzOicsIHJlc3BvbnNlLmRhdGEpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ldHRyZSBcXHUwMGUwIGpvdXIgbGUgc3RhdGUgYm9va0RhdGEgYXZlYyBsZXMgZG9ublxcdTAwZTllcyByXFx1MDBlOWN1cFxcdTAwZTlyXFx1MDBlOWVzXFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEocmVzcG9uc2UuZGF0YSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2F1dmVnYXJkZXIgbGVzIGRvbm5cXHUwMGU5ZXMgbWlzZXMgXFx1MDBlMCBqb3VyIGRhbnMgbGUgbG9jYWxTdG9yYWdlXFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuZGF0YSkpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdNb2RpZmljYXRpb25zIGVucmVnaXN0clxcdTAwZTllcyBhdmVjIHN1Y2NcXHUwMGU4cyEnKTtcXG4gICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgLy8gUGFzIGQnSUQsIGRvbmMgb24gbWV0IHNpbXBsZW1lbnQgXFx1MDBlMCBqb3VyIGxlIHN0YXRlXFxuICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xcbiAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XFxuICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdNb2RpZmljYXRpb25zIGVucmVnaXN0clxcdTAwZTllcyBhdmVjIHN1Y2NcXHUwMGU4cyEnKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgbWlzZSBcXHUwMGUwIGpvdXIgZGVzIGRvbm5cXHUwMGU5ZXM6JywgZXJyb3IpO1xcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1VuZSBlcnJldXIgZXN0IHN1cnZlbnVlIGxvcnMgZGUgbGEgbWlzZSBcXHUwMGUwIGpvdXIgZGVzIGRvbm5cXHUwMGU5ZXMuJyk7XFxuICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XCIsIFwibmV3X3N0clwiOiBcIiAgICAgICAgICAgICAgICBvblN1Ym1pdD17YXN5bmMgKGRhdGEpID0+IHtcXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRG9ublxcdTAwZTllcyBkdSBmb3JtdWxhaXJlIHNvdW1pc2VzOicsIGRhdGEpO1xcbiAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5pZCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAvLyBQclxcdTAwZTlwYXJlciBsZXMgZG9ublxcdTAwZTllcyBwb3VyIFByaXNtYVxcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmlzbWFEYXRhID0ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycml2YWxUaW1lOiBkYXRhLmFycml2YWxUaW1lLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc0luc3RydWN0aW9uczogZGF0YS5hY2Nlc3NJbnN0cnVjdGlvbnMsXFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyaXZhbEFkZGl0aW9uYWxJbmZvOiBkYXRhLmFycml2YWxBZGRpdGlvbmFsSW5mbyxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXBhcnR1cmVUaW1lOiBkYXRhLmRlcGFydHVyZVRpbWUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhpdEluc3RydWN0aW9uczogZGF0YS5leGl0SW5zdHJ1Y3Rpb25zLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlcGFydHVyZUFkZGl0aW9uYWxJbmZvOiBkYXRhLmRlcGFydHVyZUFkZGl0aW9uYWxJbmZvLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZmlOYW1lOiBkYXRhLndpZmlOYW1lLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZmlQYXNzd29yZDogZGF0YS53aWZpUGFzc3dvcmQsXFxuICAgICAgICAgICAgICAgICAgICAgICAgaG91c2VSdWxlczogZGF0YS5ob3VzZVJ1bGVzLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIG93bmVyQ29udGFjdDogZGF0YS5vd25lckNvbnRhY3QsXFxuICAgICAgICAgICAgICAgICAgICAgICAgb3duZXJOYW1lOiBkYXRhLm93bmVyTmFtZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmFsSW5mbzogZGF0YS5nZW5lcmFsSW5mbyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3JtYXQgc3BcXHUwMGU5Y2lmaXF1ZSBwb3VyIGxlcyByZWxhdGlvbnMgZGFucyBQcmlzbWFcXG4gICAgICAgICAgICAgICAgICAgICAgICByZWNvbW1lbmRhdGlvbnM6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZU1hbnk6IHt9LCAvLyBTdXBwcmltZXIgdG91dGVzIGxlcyByZWNvbW1hbmRhdGlvbnMgZXhpc3RhbnRlc1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlOiBkYXRhLnJlY29tbWVuZGF0aW9ucy5tYXAocmVjID0+ICh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHJlYy5uYW1lLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiByZWMuYWRkcmVzcyB8fCAnJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHJlYy5kZXNjcmlwdGlvbiB8fCAnJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogcmVjLnR5cGVcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgfTtcXG4gICAgICAgICAgICAgICAgICAgICAgXFxuICAgICAgICAgICAgICAgICAgICAgIC8vIEVudm95ZXIgdW5lIHJlcXVcXHUwMGVhdGUgUFVUIHBvdXIgbWV0dHJlIFxcdTAwZTAgam91ciBsZXMgZG9ublxcdTAwZTllc1xcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnB1dChgaHR0cDovL2xvY2FsaG9zdDozMDAxL2FwaS9zdGF5LyR7ZGF0YS5pZH1gLCBwcmlzbWFEYXRhKTtcXG4gICAgICAgICAgICAgICAgICAgICAgXFxuICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEb25uXFx1MDBlOWVzIG1pc2VzIFxcdTAwZTAgam91ciBhdmVjIHN1Y2NcXHUwMGU4czonLCByZXNwb25zZS5kYXRhKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNZXR0cmUgXFx1MDBlMCBqb3VyIGxlIHN0YXRlIGJvb2tEYXRhIGF2ZWMgbGVzIGRvbm5cXHUwMGU5ZXMgclxcdTAwZTljdXBcXHUwMGU5clxcdTAwZTllc1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKHJlc3BvbnNlLmRhdGEpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhdXZlZ2FyZGVyIGxlcyBkb25uXFx1MDBlOWVzIG1pc2VzIFxcdTAwZTAgam91ciBkYW5zIGxlIGxvY2FsU3RvcmFnZVxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdib29rRGF0YScsIEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLmRhdGEpKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgnTW9kaWZpY2F0aW9ucyBlbnJlZ2lzdHJcXHUwMGU5ZXMgYXZlYyBzdWNjXFx1MDBlOHMhJyk7XFxuICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgIC8vIFBhcyBkJ0lELCBkb25jIG9uIG1ldCBzaW1wbGVtZW50IFxcdTAwZTAgam91ciBsZSBzdGF0ZVxcbiAgICAgICAgICAgICAgICAgICAgICBzZXRCb29rRGF0YShkYXRhKTtcXG4gICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xcbiAgICAgICAgICAgICAgICAgICAgICBhbGVydCgnTW9kaWZpY2F0aW9ucyBlbnJlZ2lzdHJcXHUwMGU5ZXMgYXZlYyBzdWNjXFx1MDBlOHMhJyk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBsb3JzIGRlIGxhIG1pc2UgXFx1MDBlMCBqb3VyIGRlcyBkb25uXFx1MDBlOWVzOicsIGVycm9yKTtcXG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdVbmUgZXJyZXVyIGVzdCBzdXJ2ZW51ZSBsb3JzIGRlIGxhIG1pc2UgXFx1MDBlMCBqb3VyIGRlcyBkb25uXFx1MDBlOWVzLicpO1xcbiAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfVwiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJcIjogMTEyLCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXCI6IDE0MX1dfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSmUgdm9pcyBsJ2VycmV1ci4gSWwgcydhZ2l0IGQndW4gcHJvYmzDqG1lIGF2ZWMgbGEgZmHDp29uIGRvbnQgUHJpc21hIGfDqHJlIGxlcyByZWxhdGlvbnMgbG9ycyBkZXMgbWlzZXMgw6Agam91ci4gTG9yc3F1ZSB2b3VzIGVudm95ZXogbGVzIGRvbm7DqWVzIGR1IGZvcm11bGFpcmUgZGlyZWN0ZW1lbnQgw6AgbCdBUEksIFByaXNtYSBzJ2F0dGVuZCDDoCByZWNldm9pciB1biBmb3JtYXQgc3DDqWNpZmlxdWUgcG91ciBsZXMgcmVsYXRpb25zIChjb21tZSBgcmVjb21tZW5kYXRpb25zYCksIG1haXMgdm91cyBlbnZveWV6IHVuIHRhYmxlYXUgZCdvYmpldHMgc2ltcGxlLlxuXG5Ob3VzIGRldm9ucyBtb2RpZmllciBsYSBmYcOnb24gZG9udCBub3VzIGVudm95b25zIGxlcyBkb25uw6llcyBhdSBiYWNrZW5kIHBvdXIgcmVzcGVjdGVyIGxlIGZvcm1hdCBhdHRlbmR1IHBhciBQcmlzbWEuIFZvaWNpIGNvbW1lbnQgbm91cyBhbGxvbnMgcHJvY8OpZGVyIDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjAsInRleHRfbm9kZSI6eyJjb250ZW50IjoiRXJyb3IgdXBkYXRpbmcgc3RheTogUHJpc21hQ2xpZW50VmFsaWRhdGlvbkVycm9yOiBcbkludmFsaWQgYHRoaXMucHJpc21hLnN0YXlJbmZvLnVwZGF0ZSgpYCBpbnZvY2F0aW9uIGluXG4vVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1iYWNrL3NyYy9zZXJ2aWNlcy9zdGF5SW5mby5zZXJ2aWNlLnRzOjE2NDozN1xuXG4gIDE2MSB9XG4gIDE2MiBcbiAgMTYzIGFzeW5jIHVwZGF0ZVN0YXkoaWQ6IHN0cmluZywgZGF0YTogYW55KSB7XG7ihpIgMTY0ICAgICByZXR1cm4gdGhpcy5wcmlzbWEuc3RheUluZm8udXBkYXRlKHtcbiAgICAgICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgICAgIGlkOiBcImJhY2Y3ODQ5LTNmZmQtNDYxOS1iNGI0LWI1YzUwYjdiZmE1M1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICBpZDogXCJiYWNmNzg0OS0zZmZkLTQ2MTktYjRiNC1iNWM1MGI3YmZhNTNcIixcbiAgICAgICAgICAgICAgYXJyaXZhbFRpbWU6IFwiRmxleGlibGVkc2ZcIixcbiAgICAgICAgICAgICAgYWNjZXNzSW5zdHJ1Y3Rpb25zOiBcIlNjYW5uZXIgbGUgUVIgY29kZSBwb3VyIG9idGVuaXIgbGUgV2lGaS5cIixcbiAgICAgICAgICAgICAgYXJyaXZhbEFkZGl0aW9uYWxJbmZvOiBcIkJpZW52ZW51ZSDDoCBPbmVpcm8gR2xpY28uIFRvdXQgY2UgZG9udCB2b3VzIGF2ZXogYmVzb2luIGVzdCBsJ2Ftb3VyLlwiLFxuICAgICAgICAgICAgICBkZXBhcnR1cmVUaW1lOiBcIjExaDAwXCIsXG4gICAgICAgICAgICAgIGV4aXRJbnN0cnVjdGlvbnM6IFwiTGFpc3NlciBsZXMgY2zDqXMgZGFucyBsZXVyIGJvw650ZSDDoCBjbMOpcy4gVW4gZnJhaXMgZW4gY2FzIGRlIHBlcnRlIGRlIGNsw6kgcydhcHBsaXF1ZS5cIixcbiAgICAgICAgICAgICAgZGVwYXJ0dXJlQWRkaXRpb25hbEluZm86IFwiU2kgdm91cyBzb3VoYWl0ZXogcGFzc2VyIGR1IHRlbXBzIMOgIGxhIHBsYWdlIGFwcsOocyBsJ2hldXJlIGRlIGTDqXBhcnQsIHZvcyBiYWdhZ2VzIHBldXZlbnQgw6p0cmUgZW50cmVwb3PDqXMgZW4gbGlldSBzw7tyLlwiLFxuICAgICAgICAgICAgICB3aWZpTmFtZTogXCJDaGFtcGlvbiBKZXQgU2tpXCIsXG4gICAgICAgICAgICAgIHdpZmlQYXNzd29yZDogXCJPbmVpcm9HbGljb1wiLFxuICAgICAgICAgICAgICBob3VzZVJ1bGVzOiBcIk5lIHBhcyBtZXR0cmUgZGUgcGFwaWVyIHRvaWxldHRlIGRhbnMgbGVzIHRvaWxldHRlcywgdXRpbGlzZXIgbGEgcG91YmVsbGUgw6AgY8O0dMOpLiBGdW1lciDDoCBsJ2ludMOpcmlldXIgZXN0IGludGVyZGl0LiBVdGlsaXNlciB1biBjZW5kcmllciBlbiBleHTDqXJpZXVyLiBQYXMgZGUgYmFyYmVjdWUgbCfDqXTDqS4gTCdlYXUgZHUgcm9iaW5ldCBuJ2VzdCBwYXMgcG90YWJsZS4gTmUgcGFzIGxhaXNzZXIgbGVzIGNsw6lzIGRhbnMgbCdhcHBhcnRlbWVudCwgdm91cyByaXNxdWV6IGRlIHZvdXMgZW5mZXJtZXIgZGVob3JzLiBOZSBwYXMgbGFpc3NlciBkJ29iamV0cyBkZWhvcnMgbGEgbnVpdC4gTGVzIGhldXJlcyBkZSBzaWxlbmNlIHNvbnQgZGUgMTQ6MDAgw6AgMTc6MDAgZXQgZGUgMjI6MDAgw6AgMDc6MzAuIEZlcm1lciBmZW7DqnRyZXMgZXQgcG9ydGVzIGxvcnNxdWUgbGEgY2xpbWF0aXNhdGlvbiBlc3QgZW4gbWFyY2hlLiDDiXRlaW5kcmUgbGEgY2xpbWF0aXNhdGlvbiBlbiBxdWl0dGFudCBsJ2FwcGFydGVtZW50LiBQYXMgZGUgZsOqdGVzIGF1dG9yaXPDqWVzLlwiLFxuICAgICAgICAgICAgICBvd25lckNvbnRhY3Q6IFwiKzMzIDcgNjkgODQgODUgNzEsICszMCA2OTQwIDU0MiA4OTlcIixcbiAgICAgICAgICAgICAgb3duZXJOYW1lOiBcIkRhdmlkIERlIFBhbG1hXCIsXG4gICAgICAgICAgICAgIGdlbmVyYWxJbmZvOiBcIkFwcGFydGVtZW50cyBlbiBhdXRvZ2VzdGlvbi4gRGVtYW5kZXIgw6AgRGF2aWQgcG91ciB0b3V0IGJlc29pbiBzdXBwbMOpbWVudGFpcmUuIExlcyBzZXJ2aWV0dGVzIGJsYW5jaGVzIGRlIGwnYXBwYXJ0ZW1lbnQgbmUgZG9pdmVudCBwYXMgw6p0cmUgdXRpbGlzw6llcyDDoCBsYSBwbGFnZS5cIixcbiAgICAgICAgICAgICAgcmVjb21tZW5kYXRpb25zOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgaWQ6IFwiMTBhYTVmODUtZDcwMi00MjY4LTgwMGEtMjZjNmUzMDE0ODQyXCIsXG4gICAgICAgICAgICAgICAgICBuYW1lOiBcIkFrcm9naWFsaSBDYWZlXCIsXG4gICAgICAgICAgICAgICAgICBhZGRyZXNzOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiVW4gcmVzdGF1cmFudCBlbiBib3JkIGRlIG1lciBhdmVjIGRlIGdyYW5kZXMgcG9ydGlvbnMgZGUgcHJvZHVpdHMgdHlwaXF1ZXMgZ3JlY3MuIFByb2ZpdGV6IGRlIHZvdHJlIG91em8gbGVzIHBpZWRzIGRhbnMgbCdlYXUuXCIsXG4gICAgICAgICAgICAgICAgICB0eXBlOiBcIlJFU1RBVVJBTlRcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgaWQ6IFwiMGE5MDM0NzAtZTcxMy00ZjllLWFkY2QtYjdkZmYzOGQzNmQ1XCIsXG4gICAgICAgICAgICAgICAgICBuYW1lOiBcIk5pa29zIEJhclwiLFxuICAgICAgICAgICAgICAgICAgYWRkcmVzczogXCJcIixcbiAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlVuIHBldGl0IHJlc3RhdXJhbnQgZmFtaWxpYWwgYXZlYyB1bmUgdnVlIG1hZ25pZmlxdWUgc3VyIGxhIHBsYWdlLiBGcnVpdHMgZGUgbWVyIGZyYWlzIHRvdXMgbGVzIGpvdXJzLlwiLFxuICAgICAgICAgICAgICAgICAgdHlwZTogXCJSRVNUQVVSQU5UXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGlkOiBcIjkyNzM4YzhkLTNlMDQtNDQ3NS1hYjA0LTcxMDVjZGM1OTMxZVwiLFxuICAgICAgICAgICAgICAgICAgbmFtZTogXCJDb21wYXNzXCIsXG4gICAgICAgICAgICAgICAgICBhZGRyZXNzOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiVW5lIHZ1ZSBpbXByZW5hYmxlIHN1ciBsZSBwb3J0LCBwYXJmYWl0IHBvdXIgdW4gY2Fmw6kgb3UgdW4gY29ja3RhaWwgcmVsYXhhbnQuXCIsXG4gICAgICAgICAgICAgICAgICB0eXBlOiBcIkJBUlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBpZDogXCI2MTU3ODk4MC0yOGY3LTQyOGItOGQ3Yi1mZDgwMzdmYTliNGRcIixcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwiT2NlYW4gQmVhY2hcIixcbiAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IFwiXCIsXG4gICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJQZXRpdC1kw6lqZXVuZXIgZMOpbGljaWV1eCBldCBjb3BpZXV4IMOgIHByaXggc3DDqWNpYWwuIERlbWFuZGVyIMOgIERhdmlkIGRlcyBib25zIGRlIHLDqWR1Y3Rpb24uXCIsXG4gICAgICAgICAgICAgICAgICB0eXBlOiBcIlJFU1RBVVJBTlRcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgaWQ6IFwiOWMzNTA4MzctNTM0Zi00NDk3LTlkNGItODJkNzFlMzAyNzhhXCIsXG4gICAgICAgICAgICAgICAgICBuYW1lOiBcIlRlbXBsZSBkJ0FwaGFlYVwiLFxuICAgICAgICAgICAgICAgICAgYWRkcmVzczogXCJcIixcbiAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkxlIHRlbXBsZSBkb3JpcXVlIGQnQXRow6luYSBBcGhhaWEsIGJpZW4gcHLDqXNlcnbDqSBldCBmb3JtYW50IHVuIHRyaWFuZ2xlIGF2ZWMgbCdBY3JvcG9sZSBkJ0F0aMOobmVzIGV0IGxlIFRlbXBsZSBkZSBQb3PDqWlkb24gw6AgU291bmlvbi5cIixcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwiVE9VUklTTVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBpZDogXCJiMDU3Nzg3Ny1hNTY2LTQ1ZDAtYjRhNi1lMDhlNDEyNjkwNDlcIixcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQWdpb3MgTmVrdGFyaW9zXCIsXG4gICAgICAgICAgICAgICAgICBhZGRyZXNzOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiw4lnbGlzZSB0csOocyB2aXNpdMOpZSBkJ0FnaW9zIE5la3RhcmlvcyBhdmVjIHNvbiBtb25hc3TDqHJlIHN1cnBsb21iYW50LCBsaWV1IGRlIHDDqGxlcmluYWdlLlwiLFxuICAgICAgICAgICAgICAgICAgdHlwZTogXCJUT1VSSVNNXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGlkOiBcIjkwZTk3YzFjLWE3MGYtNDdlYS04Y2QwLWFjYWFmYzY0NzBkZVwiLFxuICAgICAgICAgICAgICAgICAgbmFtZTogXCJQbGFnZSBkJ0FnaWEgTWFyaW5hXCIsXG4gICAgICAgICAgICAgICAgICBhZGRyZXNzOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiTGEgcGx1cyBsb25ndWUgcGxhZ2UgZGUgc2FibGUgZGUgbCfDrmxlIGQnQWVnaW5hLCBpZMOpYWxlIHBvdXIgbGVzIGpldW5lcyBlbmZhbnRzLlwiLFxuICAgICAgICAgICAgICAgICAgdHlwZTogXCJUT1VSSVNNXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgfn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICAgIHJlY29tbWVuZGF0aW9uczogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG5cbkFyZ3VtZW50IGByZWNvbW1lbmRhdGlvbnNgOiBJbnZhbGlkIHZhbHVlIHByb3ZpZGVkLiBFeHBlY3RlZCBSZWNvbW1lbmRhdGlvblVwZGF0ZU1hbnlXaXRob3V0U3RheUluZm9OZXN0ZWRJbnB1dCBvciBSZWNvbW1lbmRhdGlvblVuY2hlY2tlZFVwZGF0ZU1hbnlXaXRob3V0U3RheUluZm9OZXN0ZWRJbnB1dCwgcHJvdmlkZWQgKE9iamVjdCwgT2JqZWN0LCBPYmplY3QsIE9iamVjdCwgT2JqZWN0LCBPYmplY3QsIE9iamVjdCkuXG4gICAgYXQgQW4gKC9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWJhY2svbm9kZV9tb2R1bGVzL0BwcmlzbWEvY2xpZW50L3J1bnRpbWUvbGlicmFyeS5qczoyOToxMzYzKVxuICAgIGF0IHpuLmhhbmRsZVJlcXVlc3RFcnJvciAoL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stYmFjay9ub2RlX21vZHVsZXMvQHByaXNtYS9jbGllbnQvcnVudGltZS9saWJyYXJ5LmpzOjEyMTo3MTAyKVxuICAgIGF0IHpuLmhhbmRsZUFuZExvZ1JlcXVlc3RFcnJvciAoL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stYmFjay9ub2RlX21vZHVsZXMvQHByaXNtYS9jbGllbnQvcnVudGltZS9saWJyYXJ5LmpzOjEyMTo2Nzg0KVxuICAgIGF0IHpuLnJlcXVlc3QgKC9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWJhY2svbm9kZV9tb2R1bGVzL0BwcmlzbWEvY2xpZW50L3J1bnRpbWUvbGlicmFyeS5qczoxMjE6NjQ5MSlcbiAgICBhdCBsICgvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1iYWNrL25vZGVfbW9kdWxlcy9AcHJpc21hL2NsaWVudC9ydW50aW1lL2xpYnJhcnkuanM6MTMwOjk3NzgpIHtcbiAgY2xpZW50VmVyc2lvbjogJzYuNi4wJ1xufVxuXG5cblxuXG4ifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCIsImZvbGRlclJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjozLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In19fV0sInJlc3BvbnNlX3RleHQiOiJKZSB2b2lzIGwnZXJyZXVyLiBJbCBzJ2FnaXQgZCd1biBwcm9ibMOobWUgYXZlYyBsYSBmYcOnb24gZG9udCBQcmlzbWEgZ8OocmUgbGVzIHJlbGF0aW9ucyBsb3JzIGRlcyBtaXNlcyDDoCBqb3VyLiBMb3JzcXVlIHZvdXMgZW52b3lleiBsZXMgZG9ubsOpZXMgZHUgZm9ybXVsYWlyZSBkaXJlY3RlbWVudCDDoCBsJ0FQSSwgUHJpc21hIHMnYXR0ZW5kIMOgIHJlY2V2b2lyIHVuIGZvcm1hdCBzcMOpY2lmaXF1ZSBwb3VyIGxlcyByZWxhdGlvbnMgKGNvbW1lIGByZWNvbW1lbmRhdGlvbnNgKSwgbWFpcyB2b3VzIGVudm95ZXogdW4gdGFibGVhdSBkJ29iamV0cyBzaW1wbGUuXG5cbk5vdXMgZGV2b25zIG1vZGlmaWVyIGxhIGZhw6dvbiBkb250IG5vdXMgZW52b3lvbnMgbGVzIGRvbm7DqWVzIGF1IGJhY2tlbmQgcG91ciByZXNwZWN0ZXIgbGUgZm9ybWF0IGF0dGVuZHUgcGFyIFByaXNtYS4gVm9pY2kgY29tbWVudCBub3VzIGFsbG9ucyBwcm9jw6lkZXIgOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImU5YjJhZjQ5LWRkYjItNDdhOS1hYzBlLWYzZDQwZjUzODI5NCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IlBhcmZhaXQgISBKJ2FpIG1vZGlmacOpIGxhIGZhw6dvbiBkb250IG5vdXMgZW52b3lvbnMgbGVzIGRvbm7DqWVzIGF1IGJhY2tlbmQgcG91ciByZXNwZWN0ZXIgbGUgZm9ybWF0IGF0dGVuZHUgcGFyIFByaXNtYS4gVm9pY2kgbGVzIGNoYW5nZW1lbnRzIGFwcG9ydMOpcyA6XG5cbiMjIyBNb2RpZmljYXRpb24gZGFucyBgc3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3hgIDpcblxuMS4gQ3LDqWF0aW9uIGQndW4gb2JqZXQgYHByaXNtYURhdGFgIHF1aSByZXNwZWN0ZSBsZSBmb3JtYXQgYXR0ZW5kdSBwYXIgUHJpc21hIHBvdXIgbGVzIHJlbGF0aW9ucyA6XG4gICAtIExlcyBwcm9wcmnDqXTDqXMgc2ltcGxlcyBzb250IGNvcGnDqWVzIGRpcmVjdGVtZW50XG4gICAtIFBvdXIgbGEgcmVsYXRpb24gYHJlY29tbWVuZGF0aW9uc2AsIG5vdXMgdXRpbGlzb25zIGxlIGZvcm1hdCBzcMOpY2lmaXF1ZSBkZSBQcmlzbWEgOlxuICAgICAtIGBkZWxldGVNYW55OiB7fWAgcG91ciBzdXBwcmltZXIgdG91dGVzIGxlcyByZWNvbW1hbmRhdGlvbnMgZXhpc3RhbnRlc1xuICAgICAtIGBjcmVhdGU6IFsuLi5dYCBwb3VyIGNyw6llciBkZSBub3V2ZWxsZXMgcmVjb21tYW5kYXRpb25zIMOgIHBhcnRpciBkZXMgZG9ubsOpZXMgZHUgZm9ybXVsYWlyZVxuXG4yLiBFbnZvaSBkZSBjZXQgb2JqZXQgYHByaXNtYURhdGFgIMOgIGwnQVBJIGF1IGxpZXUgZGVzIGRvbm7DqWVzIGJydXRlcyBkdSBmb3JtdWxhaXJlXG5cbkNldHRlIGFwcHJvY2hlIHLDqXNvdXQgbGUgcHJvYmzDqG1lIGRlIHZhbGlkYXRpb24gZGUgUHJpc21hIGVuIHJlc3BlY3RhbnQgbGUgZm9ybWF0IGF0dGVuZHUgcG91ciBsZXMgcmVsYXRpb25zLiBMb3JzcXVlIHZvdXMgbWV0dGV6IMOgIGpvdXIgdW5lIGVudGl0w6kgYXZlYyBkZXMgcmVsYXRpb25zIGRhbnMgUHJpc21hLCB2b3VzIGRldmV6IHNww6ljaWZpZXIgY29tbWVudCBnw6lyZXIgY2VzIHJlbGF0aW9ucyAoY3LDqWVyLCBtZXR0cmUgw6Agam91ciwgc3VwcHJpbWVyLCBjb25uZWN0ZXIsIGV0Yy4pLlxuXG5EYW5zIG5vdHJlIGNhcywgbm91cyBhdm9ucyBjaG9pc2kgZGUgc3VwcHJpbWVyIHRvdXRlcyBsZXMgcmVjb21tYW5kYXRpb25zIGV4aXN0YW50ZXMgZXQgZCdlbiBjcsOpZXIgZGUgbm91dmVsbGVzLCBjZSBxdWkgZXN0IHVuZSBhcHByb2NoZSBzaW1wbGUgZXQgZWZmaWNhY2UgcG91ciBjZSBjYXMgZCd1dGlsaXNhdGlvbi5cblxuTWFpbnRlbmFudCwgbG9yc3F1ZSB2b3VzIG1vZGlmaWV6IGxlIGZvcm11bGFpcmUgZXQgc291bWV0dGV6IGxlcyBtb2RpZmljYXRpb25zLCBsZSBiYWNrZW5kIGRldnJhaXQgw6p0cmUgZW4gbWVzdXJlIGRlIHRyYWl0ZXIgY29ycmVjdGVtZW50IGxhIHJlcXXDqnRlIGV0IGRlIG1ldHRyZSDDoCBqb3VyIGxlcyBkb25uw6llcyBkYW5zIGxhIGJhc2UgZGUgZG9ubsOpZXMuXG5cbkVzdC1jZSBxdWUgY2V0dGUgc29sdXRpb24gdm91cyBjb252aWVudCA/IEF2ZXotdm91cyBkJ2F1dHJlcyBxdWVzdGlvbnMgb3UgcHLDqW9jY3VwYXRpb25zID9cbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgc3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3guXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlX2VudHJpZXNbMF06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgIDEwOFx0ICAgICAgICAgICAgICApfVxuICAgMTA5XHRcbiAgIDExMFx0ICAgICAgICAgICAgICA8Qm9va0VkaXRGb3JtXG4gICAxMTFcdCAgICAgICAgICAgICAgICBpbml0aWFsRGF0YT17Ym9va0RhdGEgfHwgdW5kZWZpbmVkfVxuICAgMTEyXHQgICAgICAgICAgICAgICAgb25TdWJtaXQ9e2FzeW5jIChkYXRhKSA9PiB7XG4gICAxMTNcdCAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEb25uw6llcyBkdSBmb3JtdWxhaXJlIHNvdW1pc2VzOicsIGRhdGEpO1xuICAgMTE0XHRcbiAgIDExNVx0ICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgIDExNlx0ICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5pZCkge1xuICAgMTE3XHQgICAgICAgICAgICAgICAgICAgICAgLy8gUHLDqXBhcmVyIGxlcyBkb25uw6llcyBwb3VyIFByaXNtYVxuICAgMTE4XHQgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJpc21hRGF0YSA9IHtcbiAgIDExOVx0ICAgICAgICAgICAgICAgICAgICAgICAgYXJyaXZhbFRpbWU6IGRhdGEuYXJyaXZhbFRpbWUsXG4gICAxMjBcdCAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc0luc3RydWN0aW9uczogZGF0YS5hY2Nlc3NJbnN0cnVjdGlvbnMsXG4gICAxMjFcdCAgICAgICAgICAgICAgICAgICAgICAgIGFycml2YWxBZGRpdGlvbmFsSW5mbzogZGF0YS5hcnJpdmFsQWRkaXRpb25hbEluZm8sXG4gICAxMjJcdCAgICAgICAgICAgICAgICAgICAgICAgIGRlcGFydHVyZVRpbWU6IGRhdGEuZGVwYXJ0dXJlVGltZSxcbiAgIDEyM1x0ICAgICAgICAgICAgICAgICAgICAgICAgZXhpdEluc3RydWN0aW9uczogZGF0YS5leGl0SW5zdHJ1Y3Rpb25zLFxuICAgMTI0XHQgICAgICAgICAgICAgICAgICAgICAgICBkZXBhcnR1cmVBZGRpdGlvbmFsSW5mbzogZGF0YS5kZXBhcnR1cmVBZGRpdGlvbmFsSW5mbyxcbiAgIDEyNVx0ICAgICAgICAgICAgICAgICAgICAgICAgd2lmaU5hbWU6IGRhdGEud2lmaU5hbWUsXG4gICAxMjZcdCAgICAgICAgICAgICAgICAgICAgICAgIHdpZmlQYXNzd29yZDogZGF0YS53aWZpUGFzc3dvcmQsXG4gICAxMjdcdCAgICAgICAgICAgICAgICAgICAgICAgIGhvdXNlUnVsZXM6IGRhdGEuaG91c2VSdWxlcyxcbiAgIDEyOFx0ICAgICAgICAgICAgICAgICAgICAgICAgb3duZXJDb250YWN0OiBkYXRhLm93bmVyQ29udGFjdCxcbiAgIDEyOVx0ICAgICAgICAgICAgICAgICAgICAgICAgb3duZXJOYW1lOiBkYXRhLm93bmVyTmFtZSxcbiAgIDEzMFx0ICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbEluZm86IGRhdGEuZ2VuZXJhbEluZm8sXG4gICAxMzFcdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvcm1hdCBzcMOpY2lmaXF1ZSBwb3VyIGxlcyByZWxhdGlvbnMgZGFucyBQcmlzbWFcbiAgIDEzMlx0ICAgICAgICAgICAgICAgICAgICAgICAgcmVjb21tZW5kYXRpb25zOiB7XG4gICAxMzNcdCAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlTWFueToge30sIC8vIFN1cHByaW1lciB0b3V0ZXMgbGVzIHJlY29tbWFuZGF0aW9ucyBleGlzdGFudGVzXG4gICAxMzRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlOiBkYXRhLnJlY29tbWVuZGF0aW9ucy5tYXAocmVjID0+ICh7XG4gICAxMzVcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiByZWMubmFtZSxcbiAgIDEzNlx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IHJlYy5hZGRyZXNzIHx8ICcnLFxuICAgMTM3XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHJlYy5kZXNjcmlwdGlvbiB8fCAnJyxcbiAgIDEzOFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHJlYy50eXBlXG4gICAxMzlcdCAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAxNDBcdCAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgIDE0MVx0ICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAxNDJcdFxuICAgMTQzXHQgICAgICAgICAgICAgICAgICAgICAgLy8gRW52b3llciB1bmUgcmVxdcOqdGUgUFVUIHBvdXIgbWV0dHJlIMOgIGpvdXIgbGVzIGRvbm7DqWVzXG4gICAxNDRcdCAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnB1dChgaHR0cDovL2xvY2FsaG9zdDozMDAxL2FwaS9zdGF5LyR7ZGF0YS5pZH1gLCBwcmlzbWFEYXRhKTtcbiAgIDE0NVx0XG4gICAxNDZcdCAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcbiAgIDE0N1x0ICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm7DqWVzIG1pc2VzIMOgIGpvdXIgYXZlYyBzdWNjw6hzOicsIHJlc3BvbnNlLmRhdGEpO1xuICAgMTQ4XHRcbiAgIDE0OVx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWV0dHJlIMOgIGpvdXIgbGUgc3RhdGUgYm9va0RhdGEgYXZlYyBsZXMgZG9ubsOpZXMgcsOpY3Vww6lyw6llc1xuICAgMTUwXHQgICAgICAgICAgICAgICAgICAgICAgICBzZXRCb29rRGF0YShyZXNwb25zZS5kYXRhKTtcbiAgIDE1MVx0XG4gICAxNTJcdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhdXZlZ2FyZGVyIGxlcyBkb25uw6llcyBtaXNlcyDDoCBqb3VyIGRhbnMgbGUgbG9jYWxTdG9yYWdlXG4gICAxNTNcdCAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdib29rRGF0YScsIEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLmRhdGEpKTtcbiAgIDE1NFx0XG4gICAxNTVcdCAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdNb2RpZmljYXRpb25zIGVucmVnaXN0csOpZXMgYXZlYyBzdWNjw6hzIScpO1xuICAgMTU2XHQgICAgICAgICAgICAgICAgICAgICAgfVxuICAgMTU3XHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAxNThcdCAgICAgICAgICAgICAgICAgICAgICAvLyBQYXMgZCdJRCwgZG9uYyBvbiBtZXQgc2ltcGxlbWVudCDDoCBqb3VyIGxlIHN0YXRlXG4gICAxNTlcdCAgICAgICAgICAgICAgICAgICAgICBzZXRCb29rRGF0YShkYXRhKTtcbiAgIDE2MFx0ICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdib29rRGF0YScsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgIDE2MVx0ICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdNb2RpZmljYXRpb25zIGVucmVnaXN0csOpZXMgYXZlYyBzdWNjw6hzIScpO1xuICAgMTYyXHQgICAgICAgICAgICAgICAgICAgIH1cbiAgIDE2M1x0ICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgIDE2NFx0ICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJldXIgbG9ycyBkZSBsYSBtaXNlIMOgIGpvdXIgZGVzIGRvbm7DqWVzOicsIGVycm9yKTtcbiAgIDE2NVx0ICAgICAgICAgICAgICAgICAgICBhbGVydCgnVW5lIGVycmV1ciBlc3Qgc3VydmVudWUgbG9ycyBkZSBsYSBtaXNlIMOgIGpvdXIgZGVzIGRvbm7DqWVzLicpO1xuICAgMTY2XHQgICAgICAgICAgICAgICAgICB9XG4gICAxNjdcdCAgICAgICAgICAgICAgICB9fVxuICAgMTY4XHQgICAgICAgICAgICAgIC8+XG4gICAxNjlcdCAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDE3MFx0ICAgICAgICAgICAgICApfVxuICAgMTcxXHQgICAgICAgIDwvbW90aW9uLmRpdj5cblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMVExem1tRTYybVVwM1FEYkhjQjlqRGUifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCIsImZvbGRlclJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjozLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In19fV0sInJlc3BvbnNlX3RleHQiOiJQYXJmYWl0ICEgSidhaSBtb2RpZmnDqSBsYSBmYcOnb24gZG9udCBub3VzIGVudm95b25zIGxlcyBkb25uw6llcyBhdSBiYWNrZW5kIHBvdXIgcmVzcGVjdGVyIGxlIGZvcm1hdCBhdHRlbmR1IHBhciBQcmlzbWEuIFZvaWNpIGxlcyBjaGFuZ2VtZW50cyBhcHBvcnTDqXMgOlxuXG4jIyMgTW9kaWZpY2F0aW9uIGRhbnMgYHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4YCA6XG5cbjEuIENyw6lhdGlvbiBkJ3VuIG9iamV0IGBwcmlzbWFEYXRhYCBxdWkgcmVzcGVjdGUgbGUgZm9ybWF0IGF0dGVuZHUgcGFyIFByaXNtYSBwb3VyIGxlcyByZWxhdGlvbnMgOlxuICAgLSBMZXMgcHJvcHJpw6l0w6lzIHNpbXBsZXMgc29udCBjb3Bpw6llcyBkaXJlY3RlbWVudFxuICAgLSBQb3VyIGxhIHJlbGF0aW9uIGByZWNvbW1lbmRhdGlvbnNgLCBub3VzIHV0aWxpc29ucyBsZSBmb3JtYXQgc3DDqWNpZmlxdWUgZGUgUHJpc21hIDpcbiAgICAgLSBgZGVsZXRlTWFueToge31gIHBvdXIgc3VwcHJpbWVyIHRvdXRlcyBsZXMgcmVjb21tYW5kYXRpb25zIGV4aXN0YW50ZXNcbiAgICAgLSBgY3JlYXRlOiBbLi4uXWAgcG91ciBjcsOpZXIgZGUgbm91dmVsbGVzIHJlY29tbWFuZGF0aW9ucyDDoCBwYXJ0aXIgZGVzIGRvbm7DqWVzIGR1IGZvcm11bGFpcmVcblxuMi4gRW52b2kgZGUgY2V0IG9iamV0IGBwcmlzbWFEYXRhYCDDoCBsJ0FQSSBhdSBsaWV1IGRlcyBkb25uw6llcyBicnV0ZXMgZHUgZm9ybXVsYWlyZVxuXG5DZXR0ZSBhcHByb2NoZSByw6lzb3V0IGxlIHByb2Jsw6htZSBkZSB2YWxpZGF0aW9uIGRlIFByaXNtYSBlbiByZXNwZWN0YW50IGxlIGZvcm1hdCBhdHRlbmR1IHBvdXIgbGVzIHJlbGF0aW9ucy4gTG9yc3F1ZSB2b3VzIG1ldHRleiDDoCBqb3VyIHVuZSBlbnRpdMOpIGF2ZWMgZGVzIHJlbGF0aW9ucyBkYW5zIFByaXNtYSwgdm91cyBkZXZleiBzcMOpY2lmaWVyIGNvbW1lbnQgZ8OpcmVyIGNlcyByZWxhdGlvbnMgKGNyw6llciwgbWV0dHJlIMOgIGpvdXIsIHN1cHByaW1lciwgY29ubmVjdGVyLCBldGMuKS5cblxuRGFucyBub3RyZSBjYXMsIG5vdXMgYXZvbnMgY2hvaXNpIGRlIHN1cHByaW1lciB0b3V0ZXMgbGVzIHJlY29tbWFuZGF0aW9ucyBleGlzdGFudGVzIGV0IGQnZW4gY3LDqWVyIGRlIG5vdXZlbGxlcywgY2UgcXVpIGVzdCB1bmUgYXBwcm9jaGUgc2ltcGxlIGV0IGVmZmljYWNlIHBvdXIgY2UgY2FzIGQndXRpbGlzYXRpb24uXG5cbk1haW50ZW5hbnQsIGxvcnNxdWUgdm91cyBtb2RpZmlleiBsZSBmb3JtdWxhaXJlIGV0IHNvdW1ldHRleiBsZXMgbW9kaWZpY2F0aW9ucywgbGUgYmFja2VuZCBkZXZyYWl0IMOqdHJlIGVuIG1lc3VyZSBkZSB0cmFpdGVyIGNvcnJlY3RlbWVudCBsYSByZXF1w6p0ZSBldCBkZSBtZXR0cmUgw6Agam91ciBsZXMgZG9ubsOpZXMgZGFucyBsYSBiYXNlIGRlIGRvbm7DqWVzLlxuXG5Fc3QtY2UgcXVlIGNldHRlIHNvbHV0aW9uIHZvdXMgY29udmllbnQgPyBBdmV6LXZvdXMgZCdhdXRyZXMgcXVlc3Rpb25zIG91IHByw6lvY2N1cGF0aW9ucyA/XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiIzZmU1ZDM0MC1hYjQ5LTRiYzEtODFiZi0yMDQxMDU5ZjA4NWIiLCJ1dWlkIjoiYzg0NGM3NGUtYWUwYS00MDJlLWE0OGItZWE5YzIyYjlhNzlmIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy1jaGVja3BvaW50LWRlbGltaXRlciIsInN0YXR1cyI6InN1Y2Nlc3MiLCJmcm9tVGltZXN0YW1wIjoxNzQ0MzY4MjIzMzAwLCJ0b1RpbWVzdGFtcCI6MTc0NDM2ODQ2NDU3NCwic2Vlbl9zdGF0ZSI6InNlZW4ifSx7InJlcXVlc3RfaWQiOiIyMDk0NDNkMi0xMjdhLTQyODItOGY5ZS0wMmU0ZDg4Yzk4NjIiLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImViM2UzMDMzLTM5MTYtNDlhZi1hMzMwLTFlNjhmZmZiNzdmMiIsInJlcXVlc3RfbWVzc2FnZSI6IkRhbnMgbGEgc8OpbGVjdGlvbiwgamUgdmV1eCBnYXJkZXIgdW5pcXVlbWVudCB1biBzZXVsIGJvdXRvbiBxdWkgY2hhbmdlLCBzYW5zIG1vZGlmaWNhdGlvbiBpbCByZW52b2lzIHZlcnMgbCdhY2NldWlsICh0dSBwZXV0IGxlIG1ldHRyZSBkYW5zIGxlIG9uU3VibWl0LCBhdmVjIG1vZGlmaWNhdGlvbiBpbCBlbnJlZ2lzdHJlKSIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiJEYW5zIGxhIHPDqWxlY3Rpb24sIGplIHZldXggZ2FyZGVyIHVuaXF1ZW1lbnQgdW4gc2V1bCBib3V0b24gcXVpIGNoYW5nZSwgc2FucyBtb2RpZmljYXRpb24gaWwgcmVudm9pcyB2ZXJzIGwnYWNjZXVpbCAodHUgcGV1dCBsZSBtZXR0cmUgZGFucyBsZSBvblN1Ym1pdCwgYXZlYyBtb2RpZmljYXRpb24gaWwgZW5yZWdpc3RyZSkifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFBVEhQbXdHNEFWa2JmM3lMcUE3d2RxIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4XCIsIFwic3RyX3JlcGxhY2VfZW50cmllc1wiOiBbe1wib2xkX3N0clwiOiBcIiAgICAgIDxtb3Rpb24uZGl2XFxuICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxcbiAgICAgICAgY2xhc3NOYW1lPVxcXCJmbGV4IGp1c3RpZnktYmV0d2VlbiBtdC04XFxcIlxcbiAgICAgID5cXG4gICAgICAgIHshaXNNb2RpZmllZCAmJiAoXFxuICAgICAgICAgIDxtb3Rpb24uYnV0dG9uXFxuICAgICAgICAgICAgd2hpbGVIb3Zlcj17eyBzY2FsZTogMS4wNSB9fVxcbiAgICAgICAgICAgIHdoaWxlVGFwPXt7IHNjYWxlOiAwLjk1IH19XFxuICAgICAgICAgICAgdHlwZT1cXFwiYnV0dG9uXFxcIlxcbiAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZVJldHVybkhvbWV9XFxuICAgICAgICAgICAgY2xhc3NOYW1lPVxcXCJweC02IHB5LTMgYmctZ3JhZGllbnQtdG8tciBmcm9tLWdyYXktNDAwIHRvLWdyYXktNTAwIHRleHQtd2hpdGUgcm91bmRlZC1tZCBob3Zlcjpmcm9tLWdyYXktNTAwIGhvdmVyOnRvLWdyYXktNjAwIHRyYW5zaXRpb24tYWxsIHNoYWRvdy1tZCBmb250LW1lZGl1bSBmbGV4IGl0ZW1zLWNlbnRlclxcXCJcXG4gICAgICAgICAgPlxcbiAgICAgICAgICAgIDxBcnJvd0xlZnQgc2l6ZT17MTh9IGNsYXNzTmFtZT1cXFwibXItMlxcXCIgLz5cXG4gICAgICAgICAgICBSZXRvdXIgXFx1MDBlMCBsJ2FjY3VlaWxcXG4gICAgICAgICAgPC9tb3Rpb24uYnV0dG9uPlxcbiAgICAgICAgKX1cXG4gICAgICAgIDxtb3Rpb24uYnV0dG9uXFxuICAgICAgICAgIHdoaWxlSG92ZXI9e3sgc2NhbGU6IDEuMDUgfX1cXG4gICAgICAgICAgd2hpbGVUYXA9e3sgc2NhbGU6IDAuOTUgfX1cXG4gICAgICAgICAgdHlwZT1cXFwic3VibWl0XFxcIlxcbiAgICAgICAgICBkaXNhYmxlZD17aXNTYXZpbmd9XFxuICAgICAgICAgIGNsYXNzTmFtZT1cXFwicHgtNiBweS0zIGJnLWdyYWRpZW50LXRvLXIgZnJvbS1bI2YwNGMyM10gdG8tcGluay01MDAgdGV4dC13aGl0ZSByb3VuZGVkLW1kIGhvdmVyOmZyb20tWyNmMDRjMjNdIGhvdmVyOnRvLXBpbmstNDAwIHRyYW5zaXRpb24tYWxsIHNoYWRvdy1tZCBkaXNhYmxlZDpvcGFjaXR5LTUwIGZvbnQtbWVkaXVtXFxcIlxcbiAgICAgICAgPlxcbiAgICAgICAgICB7aXNTYXZpbmcgPyAnRW5yZWdpc3RyZW1lbnQgZW4gY291cnMuLi4nIDogaXNNb2RpZmllZCA/ICdFbnJlZ2lzdHJlciBsZXMgbW9kaWZpY2F0aW9ucycgOiAnUmV0b3VyIFxcdTAwZTAgbFxcXFwnYWNjdWVpbCd9XFxuICAgICAgICA8L21vdGlvbi5idXR0b24+XFxuICAgICAgPC9tb3Rpb24uZGl2PlwiLCBcIm5ld19zdHJcIjogXCIgICAgICA8bW90aW9uLmRpdlxcbiAgICAgICAgdmFyaWFudHM9e2l0ZW1WYXJpYW50c31cXG4gICAgICAgIGNsYXNzTmFtZT1cXFwiZmxleCBqdXN0aWZ5LWVuZCBtdC04XFxcIlxcbiAgICAgID5cXG4gICAgICAgIDxtb3Rpb24uYnV0dG9uXFxuICAgICAgICAgIHdoaWxlSG92ZXI9e3sgc2NhbGU6IDEuMDUgfX1cXG4gICAgICAgICAgd2hpbGVUYXA9e3sgc2NhbGU6IDAuOTUgfX1cXG4gICAgICAgICAgdHlwZT1cXFwic3VibWl0XFxcIlxcbiAgICAgICAgICBkaXNhYmxlZD17aXNTYXZpbmd9XFxuICAgICAgICAgIGNsYXNzTmFtZT17YHB4LTYgcHktMyB0ZXh0LXdoaXRlIHJvdW5kZWQtbWQgdHJhbnNpdGlvbi1hbGwgc2hhZG93LW1kIGRpc2FibGVkOm9wYWNpdHktNTAgZm9udC1tZWRpdW0gZmxleCBpdGVtcy1jZW50ZXIgJHtpc01vZGlmaWVkID8gJ2JnLWdyYWRpZW50LXRvLXIgZnJvbS1bI2YwNGMyM10gdG8tcGluay01MDAgaG92ZXI6ZnJvbS1bI2YwNGMyM10gaG92ZXI6dG8tcGluay00MDAnIDogJ2JnLWdyYWRpZW50LXRvLXIgZnJvbS1ncmF5LTQwMCB0by1ncmF5LTUwMCBob3Zlcjpmcm9tLWdyYXktNTAwIGhvdmVyOnRvLWdyYXktNjAwJ31gfVxcbiAgICAgICAgPlxcbiAgICAgICAgICB7IWlzTW9kaWZpZWQgJiYgPEFycm93TGVmdCBzaXplPXsxOH0gY2xhc3NOYW1lPVxcXCJtci0yXFxcIiAvPn1cXG4gICAgICAgICAge2lzU2F2aW5nID8gJ0VucmVnaXN0cmVtZW50IGVuIGNvdXJzLi4uJyA6IGlzTW9kaWZpZWQgPyAnRW5yZWdpc3RyZXIgbGVzIG1vZGlmaWNhdGlvbnMnIDogJ1JldG91ciBcXHUwMGUwIGxcXFxcJ2FjY3VlaWwnfVxcbiAgICAgICAgPC9tb3Rpb24uYnV0dG9uPlxcbiAgICAgIDwvbW90aW9uLmRpdj5cIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXCI6IDM2MSwgXCJvbGRfc3RyX2VuZF9saW5lX251bWJlclwiOiAzODZ9XX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkplIGNvbXByZW5kcyB2b3RyZSBkZW1hbmRlLiBWb3VzIHNvdWhhaXRleiBzaW1wbGlmaWVyIGwnaW50ZXJmYWNlIGVuIGdhcmRhbnQgdW4gc2V1bCBib3V0b24gcXVpIGNoYW5nZSBkZSBjb21wb3J0ZW1lbnQgc2Vsb24gbCfDqXRhdCBkZXMgbW9kaWZpY2F0aW9ucyA6XG4tIFNhbnMgbW9kaWZpY2F0aW9uIDogbGUgYm91dG9uIHJlbnZvaWUgdmVycyBsJ2FjY3VlaWxcbi0gQXZlYyBtb2RpZmljYXRpb25zIDogbGUgYm91dG9uIGVucmVnaXN0cmUgbGVzIGNoYW5nZW1lbnRzXG5cblZvaWNpIGNvbW1lbnQgbm91cyBwb3V2b25zIG1vZGlmaWVyIGxlIGNvZGUgOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiJEYW5zIGxhIHPDqWxlY3Rpb24sIGplIHZldXggZ2FyZGVyIHVuaXF1ZW1lbnQgdW4gc2V1bCBib3V0b24gcXVpIGNoYW5nZSwgc2FucyBtb2RpZmljYXRpb24gaWwgcmVudm9pcyB2ZXJzIGwnYWNjZXVpbCAodHUgcGV1dCBsZSBtZXR0cmUgZGFucyBsZSBvblN1Ym1pdCwgYXZlYyBtb2RpZmljYXRpb24gaWwgZW5yZWdpc3RyZSkifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCIsImZvbGRlclJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjozLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In19fV0sInJlc3BvbnNlX3RleHQiOiJKZSBjb21wcmVuZHMgdm90cmUgZGVtYW5kZS4gVm91cyBzb3VoYWl0ZXogc2ltcGxpZmllciBsJ2ludGVyZmFjZSBlbiBnYXJkYW50IHVuIHNldWwgYm91dG9uIHF1aSBjaGFuZ2UgZGUgY29tcG9ydGVtZW50IHNlbG9uIGwnw6l0YXQgZGVzIG1vZGlmaWNhdGlvbnMgOlxuLSBTYW5zIG1vZGlmaWNhdGlvbiA6IGxlIGJvdXRvbiByZW52b2llIHZlcnMgbCdhY2N1ZWlsXG4tIEF2ZWMgbW9kaWZpY2F0aW9ucyA6IGxlIGJvdXRvbiBlbnJlZ2lzdHJlIGxlcyBjaGFuZ2VtZW50c1xuXG5Wb2ljaSBjb21tZW50IG5vdXMgcG91dm9ucyBtb2RpZmllciBsZSBjb2RlIDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIyZDQxNzk3ZS1mM2MzLTRlNDItOTMxMi01NzNjYzllMzhiYzAiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxVWFBUE5UU3ZGUmlaam9DQXhLMnhyRSIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwic3RyX3JlcGxhY2VcIiwgXCJwYXRoXCI6IFwic3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeFwiLCBcInN0cl9yZXBsYWNlX2VudHJpZXNcIjogW3tcIm9sZF9zdHJcIjogXCIgIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XFxuICAgIC8vIFNpIGF1Y3VuZSBtb2RpZmljYXRpb24sIHJlZGlyaWdlciB2ZXJzIGxhIHBhZ2UgZCdhY2N1ZWlsXFxuICAgIGlmICghaXNNb2RpZmllZCkge1xcbiAgICAgIHJvdXRlci5wdXNoKCcvJyk7XFxuICAgICAgcmV0dXJuO1xcbiAgICB9XFxuICAgIFxcbiAgICBzZXRJc1NhdmluZyh0cnVlKTtcXG4gICAgY29uc3QgYm9va0RhdGEgPSBjb252ZXJ0Rm9ybVZhbHVlc1RvQm9va0RhdGEoZGF0YSk7XFxuICAgIFxcbiAgICBpZiAob25TdWJtaXQpIHtcXG4gICAgICAvLyBQYXNzZXIgbGVzIGRvbm5cXHUwMGU5ZXMgYXUgY29tcG9zYW50IHBhcmVudCBxdWkgZ1xcdTAwZThyZXJhIGxhIHJlcXVcXHUwMGVhdGUgUFVUXFxuICAgICAgb25TdWJtaXQoYm9va0RhdGEpO1xcbiAgICB9XFxuICAgIFxcbiAgICAvLyBSXFx1MDBlOWluaXRpYWxpc2VyIGwnXFx1MDBlOXRhdCBkZSBzYXV2ZWdhcmRlIGFwclxcdTAwZThzIHVuIGNvdXJ0IGRcXHUwMGU5bGFpXFxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xcbiAgICAgIHNldElzU2F2aW5nKGZhbHNlKTtcXG4gICAgfSwgMTAwMCk7XFxuICB9O1wiLCBcIm5ld19zdHJcIjogXCIgIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XFxuICAgIC8vIFNpIGF1Y3VuZSBtb2RpZmljYXRpb24sIHJlZGlyaWdlciB2ZXJzIGxhIHBhZ2UgZCdhY2N1ZWlsXFxuICAgIGlmICghaXNNb2RpZmllZCkge1xcbiAgICAgIHJvdXRlci5wdXNoKCcvJyk7XFxuICAgICAgcmV0dXJuO1xcbiAgICB9XFxuICAgIFxcbiAgICAvLyBTaSBkZXMgbW9kaWZpY2F0aW9ucyBvbnQgXFx1MDBlOXRcXHUwMGU5IGVmZmVjdHVcXHUwMGU5ZXMsIHNvdW1ldHRyZSBsZXMgZG9ublxcdTAwZTllc1xcbiAgICBzZXRJc1NhdmluZyh0cnVlKTtcXG4gICAgY29uc3QgYm9va0RhdGEgPSBjb252ZXJ0Rm9ybVZhbHVlc1RvQm9va0RhdGEoZGF0YSk7XFxuICAgIFxcbiAgICBpZiAob25TdWJtaXQpIHtcXG4gICAgICAvLyBQYXNzZXIgbGVzIGRvbm5cXHUwMGU5ZXMgYXUgY29tcG9zYW50IHBhcmVudCBxdWkgZ1xcdTAwZThyZXJhIGxhIHJlcXVcXHUwMGVhdGUgUFVUXFxuICAgICAgb25TdWJtaXQoYm9va0RhdGEpO1xcbiAgICB9XFxuICAgIFxcbiAgICAvLyBSXFx1MDBlOWluaXRpYWxpc2VyIGwnXFx1MDBlOXRhdCBkZSBzYXV2ZWdhcmRlIGFwclxcdTAwZThzIHVuIGNvdXJ0IGRcXHUwMGU5bGFpXFxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xcbiAgICAgIHNldElzU2F2aW5nKGZhbHNlKTtcXG4gICAgfSwgMTAwMCk7XFxuICB9O1wiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJcIjogOTUsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJcIjogMTE0fV19In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJNYWludGVuYW50LCBub3VzIGRldm9ucyBub3VzIGFzc3VyZXIgcXVlIGxhIGZvbmN0aW9uIGBoYW5kbGVGb3JtU3VibWl0YCBnw6hyZSBjb3JyZWN0ZW1lbnQgbGVzIGRldXggY2FzIChhdmVjIG91IHNhbnMgbW9kaWZpY2F0aW9ucykgOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAzNDJcdCAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMzQzXHQgICAgICA8L0FjY29yZGlvbkl0ZW0+XG4gICAzNDRcdCAgICAgIDwvQWNjb3JkaW9uPlxuICAgMzQ1XHRcbiAgIDM0Nlx0ICAgICAgPG1vdGlvbi5kaXZcbiAgIDM0N1x0ICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxuICAgMzQ4XHQgICAgICAgIGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1lbmQgbXQtOFwiXG4gICAzNDlcdCAgICAgID5cbiAgIDM1MFx0ICAgICAgICA8bW90aW9uLmJ1dHRvblxuICAgMzUxXHQgICAgICAgICAgd2hpbGVIb3Zlcj17eyBzY2FsZTogMS4wNSB9fVxuICAgMzUyXHQgICAgICAgICAgd2hpbGVUYXA9e3sgc2NhbGU6IDAuOTUgfX1cbiAgIDM1M1x0ICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgMzU0XHQgICAgICAgICAgZGlzYWJsZWQ9e2lzU2F2aW5nfVxuICAgMzU1XHQgICAgICAgICAgY2xhc3NOYW1lPXtgcHgtNiBweS0zIHRleHQtd2hpdGUgcm91bmRlZC1tZCB0cmFuc2l0aW9uLWFsbCBzaGFkb3ctbWQgZGlzYWJsZWQ6b3BhY2l0eS01MCBmb250LW1lZGl1bSBmbGV4IGl0ZW1zLWNlbnRlciAke2lzTW9kaWZpZWQgPyAnYmctZ3JhZGllbnQtdG8tciBmcm9tLVsjZjA0YzIzXSB0by1waW5rLTUwMCBob3Zlcjpmcm9tLVsjZjA0YzIzXSBob3Zlcjp0by1waW5rLTQwMCcgOiAnYmctZ3JhZGllbnQtdG8tciBmcm9tLWdyYXktNDAwIHRvLWdyYXktNTAwIGhvdmVyOmZyb20tZ3JheS01MDAgaG92ZXI6dG8tZ3JheS02MDAnfWB9XG4gICAzNTZcdCAgICAgICAgPlxuICAgMzU3XHQgICAgICAgICAgeyFpc01vZGlmaWVkICYmIDxBcnJvd0xlZnQgc2l6ZT17MTh9IGNsYXNzTmFtZT1cIm1yLTJcIiAvPn1cbiAgIDM1OFx0ICAgICAgICAgIHtpc1NhdmluZyA/ICdFbnJlZ2lzdHJlbWVudCBlbiBjb3Vycy4uLicgOiBpc01vZGlmaWVkID8gJ0VucmVnaXN0cmVyIGxlcyBtb2RpZmljYXRpb25zJyA6ICdSZXRvdXIgw6AgbFxcJ2FjY3VlaWwnfVxuICAgMzU5XHQgICAgICAgIDwvbW90aW9uLmJ1dHRvbj5cbiAgIDM2MFx0ICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMzYxXHQgICAgPC9tb3Rpb24uZm9ybT5cbiAgIDM2Mlx0ICApO1xuICAgMzYzXHR9XG4gICAzNjRcdFxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxQVRIUG13RzRBVmtiZjN5THFBN3dkcSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250IiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjMsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifX19XSwicmVzcG9uc2VfdGV4dCI6Ik1haW50ZW5hbnQsIG5vdXMgZGV2b25zIG5vdXMgYXNzdXJlciBxdWUgbGEgZm9uY3Rpb24gYGhhbmRsZUZvcm1TdWJtaXRgIGfDqHJlIGNvcnJlY3RlbWVudCBsZXMgZGV1eCBjYXMgKGF2ZWMgb3Ugc2FucyBtb2RpZmljYXRpb25zKSA6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiOThkMDlkODEtOWIyMS00ZjY4LWJlNjUtODRmNTYwMWY0MDVjIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiUGFyZmFpdCAhIEonYWkgc2ltcGxpZmnDqSBsJ2ludGVyZmFjZSB1dGlsaXNhdGV1ciBldCBsYSBsb2dpcXVlIGNvbW1lIGRlbWFuZMOpLiBWb2ljaSBsZXMgbW9kaWZpY2F0aW9ucyBhcHBvcnTDqWVzIDpcblxuIyMjIDEuIERhbnMgbGUgZmljaGllciBgc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeGAgOlxuXG4xLiBTaW1wbGlmaWNhdGlvbiBkZSBsJ2ludGVyZmFjZSB1dGlsaXNhdGV1ciA6XG4gICAtIFN1cHByZXNzaW9uIGR1IGJvdXRvbiBkZSByZXRvdXIgw6AgbCdhY2N1ZWlsIHPDqXBhcsOpXG4gICAtIENvbnNlcnZhdGlvbiBkJ3VuIHNldWwgYm91dG9uIHF1aSBjaGFuZ2UgZCdhcHBhcmVuY2UgZXQgZGUgY29tcG9ydGVtZW50IHNlbG9uIGwnw6l0YXQgZGVzIG1vZGlmaWNhdGlvbnMgOlxuICAgICAtIFNhbnMgbW9kaWZpY2F0aW9uIDogYm91dG9uIGdyaXMgYXZlYyBpY8O0bmUgZGUgcmV0b3VyIGV0IHRleHRlIFwiUmV0b3VyIMOgIGwnYWNjdWVpbFwiXG4gICAgIC0gQXZlYyBtb2RpZmljYXRpb25zIDogYm91dG9uIG9yYW5nZS9yb3NlIGF2ZWMgdGV4dGUgXCJFbnJlZ2lzdHJlciBsZXMgbW9kaWZpY2F0aW9uc1wiXG5cbjIuIENsYXJpZmljYXRpb24gZGUgbGEgZm9uY3Rpb24gYGhhbmRsZUZvcm1TdWJtaXRgIDpcbiAgIC0gU2kgYXVjdW5lIG1vZGlmaWNhdGlvbiBuJ2Egw6l0w6kgZWZmZWN0dcOpZSwgcmVkaXJlY3Rpb24gdmVycyBsYSBwYWdlIGQnYWNjdWVpbFxuICAgLSBTaSBkZXMgbW9kaWZpY2F0aW9ucyBvbnQgw6l0w6kgZWZmZWN0dcOpZXMsIHNvdW1pc3Npb24gZGVzIGRvbm7DqWVzIGF1IGNvbXBvc2FudCBwYXJlbnRcblxuQ2VzIG1vZGlmaWNhdGlvbnMgcGVybWV0dGVudCBkZSBzaW1wbGlmaWVyIGwnaW50ZXJmYWNlIHRvdXQgZW4gY29uc2VydmFudCBsZXMgZm9uY3Rpb25uYWxpdMOpcyBkZW1hbmTDqWVzIDpcbi0gVW4gc2V1bCBib3V0b24gcXVpIGNoYW5nZSBkJ2FwcGFyZW5jZSBldCBkZSBjb21wb3J0ZW1lbnQgc2Vsb24gbCfDqXRhdCBkZXMgbW9kaWZpY2F0aW9uc1xuLSBSZWRpcmVjdGlvbiB2ZXJzIGxhIHBhZ2UgZCdhY2N1ZWlsIHNpIGF1Y3VuZSBtb2RpZmljYXRpb24gbidhIMOpdMOpIGVmZmVjdHXDqWVcbi0gRW5yZWdpc3RyZW1lbnQgZGVzIG1vZGlmaWNhdGlvbnMgc2kgZGVzIGNoYW5nZW1lbnRzIG9udCDDqXTDqSBhcHBvcnTDqXNcblxuTCdpbnRlcmZhY2UgZXN0IG1haW50ZW5hbnQgcGx1cyDDqXB1csOpZSBldCBpbnR1aXRpdmUsIGF2ZWMgdW4gYm91dG9uIHF1aSByZWZsw6h0ZSBjbGFpcmVtZW50IGwnYWN0aW9uIHF1aSBzZXJhIGVmZmVjdHXDqWUgbG9yc3F1ZSBsJ3V0aWxpc2F0ZXVyIGNsaXF1ZXJhIGRlc3N1cy5cblxuRXN0LWNlIHF1ZSBjZXMgbW9kaWZpY2F0aW9ucyBjb3JyZXNwb25kZW50IMOgIGNlIHF1ZSB2b3VzIHNvdWhhaXRpZXogP1xuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgOTFcdCAgICBjb25zdCBjdXJyZW50VmFsdWVzID0gSlNPTi5zdHJpbmdpZnkoZm9ybVZhbHVlcyk7XG4gICAgOTJcdCAgICBzZXRJc01vZGlmaWVkKGN1cnJlbnRWYWx1ZXMgIT09IG9yaWdpbmFsVmFsdWVzKTtcbiAgICA5M1x0ICB9LCBbZm9ybVZhbHVlcywgb3JpZ2luYWxWYWx1ZXMsIGluaXRpYWxEYXRhXSk7XG4gICAgOTRcdFxuICAgIDk1XHQgIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XG4gICAgOTZcdCAgICAvLyBTaSBhdWN1bmUgbW9kaWZpY2F0aW9uLCByZWRpcmlnZXIgdmVycyBsYSBwYWdlIGQnYWNjdWVpbFxuICAgIDk3XHQgICAgaWYgKCFpc01vZGlmaWVkKSB7XG4gICAgOThcdCAgICAgIHJvdXRlci5wdXNoKCcvJyk7XG4gICAgOTlcdCAgICAgIHJldHVybjtcbiAgIDEwMFx0ICAgIH1cbiAgIDEwMVx0XG4gICAxMDJcdCAgICAvLyBTaSBkZXMgbW9kaWZpY2F0aW9ucyBvbnQgw6l0w6kgZWZmZWN0dcOpZXMsIHNvdW1ldHRyZSBsZXMgZG9ubsOpZXNcbiAgIDEwM1x0ICAgIHNldElzU2F2aW5nKHRydWUpO1xuICAgMTA0XHQgICAgY29uc3QgYm9va0RhdGEgPSBjb252ZXJ0Rm9ybVZhbHVlc1RvQm9va0RhdGEoZGF0YSk7XG4gICAxMDVcdFxuICAgMTA2XHQgICAgaWYgKG9uU3VibWl0KSB7XG4gICAxMDdcdCAgICAgIC8vIFBhc3NlciBsZXMgZG9ubsOpZXMgYXUgY29tcG9zYW50IHBhcmVudCBxdWkgZ8OocmVyYSBsYSByZXF1w6p0ZSBQVVRcbiAgIDEwOFx0ICAgICAgb25TdWJtaXQoYm9va0RhdGEpO1xuICAgMTA5XHQgICAgfVxuICAgMTEwXHRcbiAgIDExMVx0ICAgIC8vIFLDqWluaXRpYWxpc2VyIGwnw6l0YXQgZGUgc2F1dmVnYXJkZSBhcHLDqHMgdW4gY291cnQgZMOpbGFpXG4gICAxMTJcdCAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgIDExM1x0ICAgICAgc2V0SXNTYXZpbmcoZmFsc2UpO1xuICAgMTE0XHQgICAgfSwgMTAwMCk7XG4gICAxMTVcdCAgfTtcbiAgIDExNlx0XG4gICAxMTdcdCAgY29uc3QgaGFuZGxlUmV0dXJuSG9tZSA9ICgpID0+IHtcbiAgIDExOFx0ICAgIHJvdXRlci5wdXNoKCcvJyk7XG4gICAxMTlcdCAgfTtcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMVVhQVBOVFN2RlJpWmpvQ0F4SzJ4ckUifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCIsImZvbGRlclJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjozLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In19fV0sInJlc3BvbnNlX3RleHQiOiJQYXJmYWl0ICEgSidhaSBzaW1wbGlmacOpIGwnaW50ZXJmYWNlIHV0aWxpc2F0ZXVyIGV0IGxhIGxvZ2lxdWUgY29tbWUgZGVtYW5kw6kuIFZvaWNpIGxlcyBtb2RpZmljYXRpb25zIGFwcG9ydMOpZXMgOlxuXG4jIyMgMS4gRGFucyBsZSBmaWNoaWVyIGBzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4YCA6XG5cbjEuIFNpbXBsaWZpY2F0aW9uIGRlIGwnaW50ZXJmYWNlIHV0aWxpc2F0ZXVyIDpcbiAgIC0gU3VwcHJlc3Npb24gZHUgYm91dG9uIGRlIHJldG91ciDDoCBsJ2FjY3VlaWwgc8OpcGFyw6lcbiAgIC0gQ29uc2VydmF0aW9uIGQndW4gc2V1bCBib3V0b24gcXVpIGNoYW5nZSBkJ2FwcGFyZW5jZSBldCBkZSBjb21wb3J0ZW1lbnQgc2Vsb24gbCfDqXRhdCBkZXMgbW9kaWZpY2F0aW9ucyA6XG4gICAgIC0gU2FucyBtb2RpZmljYXRpb24gOiBib3V0b24gZ3JpcyBhdmVjIGljw7RuZSBkZSByZXRvdXIgZXQgdGV4dGUgXCJSZXRvdXIgw6AgbCdhY2N1ZWlsXCJcbiAgICAgLSBBdmVjIG1vZGlmaWNhdGlvbnMgOiBib3V0b24gb3JhbmdlL3Jvc2UgYXZlYyB0ZXh0ZSBcIkVucmVnaXN0cmVyIGxlcyBtb2RpZmljYXRpb25zXCJcblxuMi4gQ2xhcmlmaWNhdGlvbiBkZSBsYSBmb25jdGlvbiBgaGFuZGxlRm9ybVN1Ym1pdGAgOlxuICAgLSBTaSBhdWN1bmUgbW9kaWZpY2F0aW9uIG4nYSDDqXTDqSBlZmZlY3R1w6llLCByZWRpcmVjdGlvbiB2ZXJzIGxhIHBhZ2UgZCdhY2N1ZWlsXG4gICAtIFNpIGRlcyBtb2RpZmljYXRpb25zIG9udCDDqXTDqSBlZmZlY3R1w6llcywgc291bWlzc2lvbiBkZXMgZG9ubsOpZXMgYXUgY29tcG9zYW50IHBhcmVudFxuXG5DZXMgbW9kaWZpY2F0aW9ucyBwZXJtZXR0ZW50IGRlIHNpbXBsaWZpZXIgbCdpbnRlcmZhY2UgdG91dCBlbiBjb25zZXJ2YW50IGxlcyBmb25jdGlvbm5hbGl0w6lzIGRlbWFuZMOpZXMgOlxuLSBVbiBzZXVsIGJvdXRvbiBxdWkgY2hhbmdlIGQnYXBwYXJlbmNlIGV0IGRlIGNvbXBvcnRlbWVudCBzZWxvbiBsJ8OpdGF0IGRlcyBtb2RpZmljYXRpb25zXG4tIFJlZGlyZWN0aW9uIHZlcnMgbGEgcGFnZSBkJ2FjY3VlaWwgc2kgYXVjdW5lIG1vZGlmaWNhdGlvbiBuJ2Egw6l0w6kgZWZmZWN0dcOpZVxuLSBFbnJlZ2lzdHJlbWVudCBkZXMgbW9kaWZpY2F0aW9ucyBzaSBkZXMgY2hhbmdlbWVudHMgb250IMOpdMOpIGFwcG9ydMOpc1xuXG5MJ2ludGVyZmFjZSBlc3QgbWFpbnRlbmFudCBwbHVzIMOpcHVyw6llIGV0IGludHVpdGl2ZSwgYXZlYyB1biBib3V0b24gcXVpIHJlZmzDqHRlIGNsYWlyZW1lbnQgbCdhY3Rpb24gcXVpIHNlcmEgZWZmZWN0dcOpZSBsb3JzcXVlIGwndXRpbGlzYXRldXIgY2xpcXVlcmEgZGVzc3VzLlxuXG5Fc3QtY2UgcXVlIGNlcyBtb2RpZmljYXRpb25zIGNvcnJlc3BvbmRlbnQgw6AgY2UgcXVlIHZvdXMgc291aGFpdGlleiA/XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiI1NDVjOWFlZi0wMGMxLTQ2ZDEtOTBmOC0zZGVhMzE4YTZlNjEiLCJ1dWlkIjoiMmM0ZjQwMzItMDYyNS00N2MzLTlkYjYtZjIxNDE3NDVkMWZjIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy1jaGVja3BvaW50LWRlbGltaXRlciIsInN0YXR1cyI6InN1Y2Nlc3MiLCJmcm9tVGltZXN0YW1wIjoxNzQ0MzY4NDY0NTc0LCJ0b1RpbWVzdGFtcCI6MTc0NDM2ODY2ODgwOSwic2Vlbl9zdGF0ZSI6InNlZW4ifSx7InJlcXVlc3RfaWQiOiJhMzZlY2M4MC1kMGMwLTQzMDgtOWM5Ny1mODFhMTYxNTgzOTMiLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjhhMDllOGI2LTVkNjktNGIyZC04ZGE3LWY3ZGM4ZjRkMTg4MSIsInJlcXVlc3RfbWVzc2FnZSI6InRyw6hzIGJpZW4sIHVuZSBmb2lzIGxlcyBkb25uw6llcyBlbnZvecOpIGV0IG1vZGlmacOpLCBqZSB2ZXV4IHF1ZSBsZSBpc01vZGlmaWVkIHJldmllbm5lIGZhbHNlIChjYXIgbGVzIGRvbm7DqWVzIHNvbnQgYSBqb3VyKSIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiJ0csOocyBiaWVuLCB1bmUgZm9pcyBsZXMgZG9ubsOpZXMgZW52b3nDqSBldCBtb2RpZmnDqSwgamUgdmV1eCBxdWUgbGUgaXNNb2RpZmllZCByZXZpZW5uZSBmYWxzZSAoY2FyIGxlcyBkb25uw6llcyBzb250IGEgam91cikifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFXRUdaa1QyTEJBaGVDM2tDdFM2OFZGIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4XCIsIFwic3RyX3JlcGxhY2VfZW50cmllc1wiOiBbe1wib2xkX3N0clwiOiBcIiAgY29uc3QgaGFuZGxlRm9ybVN1Ym1pdCA9IChkYXRhOiBCb29rRm9ybVZhbHVlc1R5cGUpID0+IHtcXG4gICAgLy8gU2kgYXVjdW5lIG1vZGlmaWNhdGlvbiwgcmVkaXJpZ2VyIHZlcnMgbGEgcGFnZSBkJ2FjY3VlaWxcXG4gICAgaWYgKCFpc01vZGlmaWVkKSB7XFxuICAgICAgcm91dGVyLnB1c2goJy8nKTtcXG4gICAgICByZXR1cm47XFxuICAgIH1cXG4gICAgXFxuICAgIC8vIFNpIGRlcyBtb2RpZmljYXRpb25zIG9udCBcXHUwMGU5dFxcdTAwZTkgZWZmZWN0dVxcdTAwZTllcywgc291bWV0dHJlIGxlcyBkb25uXFx1MDBlOWVzXFxuICAgIHNldElzU2F2aW5nKHRydWUpO1xcbiAgICBjb25zdCBib29rRGF0YSA9IGNvbnZlcnRGb3JtVmFsdWVzVG9Cb29rRGF0YShkYXRhKTtcXG4gICAgXFxuICAgIGlmIChvblN1Ym1pdCkge1xcbiAgICAgIC8vIFBhc3NlciBsZXMgZG9ublxcdTAwZTllcyBhdSBjb21wb3NhbnQgcGFyZW50IHF1aSBnXFx1MDBlOHJlcmEgbGEgcmVxdVxcdTAwZWF0ZSBQVVRcXG4gICAgICBvblN1Ym1pdChib29rRGF0YSk7XFxuICAgIH1cXG4gICAgXFxuICAgIC8vIFJcXHUwMGU5aW5pdGlhbGlzZXIgbCdcXHUwMGU5dGF0IGRlIHNhdXZlZ2FyZGUgYXByXFx1MDBlOHMgdW4gY291cnQgZFxcdTAwZTlsYWlcXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XFxuICAgICAgc2V0SXNTYXZpbmcoZmFsc2UpO1xcbiAgICB9LCAxMDAwKTtcXG4gIH07XCIsIFwibmV3X3N0clwiOiBcIiAgY29uc3QgaGFuZGxlRm9ybVN1Ym1pdCA9IChkYXRhOiBCb29rRm9ybVZhbHVlc1R5cGUpID0+IHtcXG4gICAgLy8gU2kgYXVjdW5lIG1vZGlmaWNhdGlvbiwgcmVkaXJpZ2VyIHZlcnMgbGEgcGFnZSBkJ2FjY3VlaWxcXG4gICAgaWYgKCFpc01vZGlmaWVkKSB7XFxuICAgICAgcm91dGVyLnB1c2goJy8nKTtcXG4gICAgICByZXR1cm47XFxuICAgIH1cXG4gICAgXFxuICAgIC8vIFNpIGRlcyBtb2RpZmljYXRpb25zIG9udCBcXHUwMGU5dFxcdTAwZTkgZWZmZWN0dVxcdTAwZTllcywgc291bWV0dHJlIGxlcyBkb25uXFx1MDBlOWVzXFxuICAgIHNldElzU2F2aW5nKHRydWUpO1xcbiAgICBjb25zdCBib29rRGF0YSA9IGNvbnZlcnRGb3JtVmFsdWVzVG9Cb29rRGF0YShkYXRhKTtcXG4gICAgXFxuICAgIGlmIChvblN1Ym1pdCkge1xcbiAgICAgIC8vIFBhc3NlciBsZXMgZG9ublxcdTAwZTllcyBhdSBjb21wb3NhbnQgcGFyZW50IHF1aSBnXFx1MDBlOHJlcmEgbGEgcmVxdVxcdTAwZWF0ZSBQVVRcXG4gICAgICBvblN1Ym1pdChib29rRGF0YSk7XFxuICAgICAgXFxuICAgICAgLy8gQXByXFx1MDBlOHMgbGEgbWlzZSBcXHUwMGUwIGpvdXIsIG1ldHRyZSBcXHUwMGUwIGpvdXIgbGVzIHZhbGV1cnMgb3JpZ2luYWxlc1xcbiAgICAgIC8vIHBvdXIgcXVlIGlzTW9kaWZpZWQgcmV2aWVubmUgXFx1MDBlMCBmYWxzZVxcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xcbiAgICAgICAgc2V0T3JpZ2luYWxWYWx1ZXMoSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xcbiAgICAgIH0sIDUwMCk7XFxuICAgIH1cXG4gICAgXFxuICAgIC8vIFJcXHUwMGU5aW5pdGlhbGlzZXIgbCdcXHUwMGU5dGF0IGRlIHNhdXZlZ2FyZGUgYXByXFx1MDBlOHMgdW4gY291cnQgZFxcdTAwZTlsYWlcXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XFxuICAgICAgc2V0SXNTYXZpbmcoZmFsc2UpO1xcbiAgICB9LCAxMDAwKTtcXG4gIH07XCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlclwiOiA5NSwgXCJvbGRfc3RyX2VuZF9saW5lX251bWJlclwiOiAxMTR9XX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IlZvdXMgYXZleiB0b3V0IMOgIGZhaXQgcmFpc29uLiBVbmUgZm9pcyBsZXMgZG9ubsOpZXMgZW52b3nDqWVzIGV0IG1pc2VzIMOgIGpvdXIsIGwnw6l0YXQgYGlzTW9kaWZpZWRgIGRldnJhaXQgcmV2ZW5pciDDoCBgZmFsc2VgIHB1aXNxdWUgbGVzIGRvbm7DqWVzIHNvbnQgbWFpbnRlbmFudCDDoCBqb3VyLiBWb2ljaSBjb21tZW50IG5vdXMgcG91dm9ucyBpbXBsw6ltZW50ZXIgY2V0dGUgZm9uY3Rpb25uYWxpdMOpIDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjAsInRleHRfbm9kZSI6eyJjb250ZW50IjoidHLDqHMgYmllbiwgdW5lIGZvaXMgbGVzIGRvbm7DqWVzIGVudm95w6kgZXQgbW9kaWZpw6ksIGplIHZldXggcXVlIGxlIGlzTW9kaWZpZWQgcmV2aWVubmUgZmFsc2UgKGNhciBsZXMgZG9ubsOpZXMgc29udCBhIGpvdXIpIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQiLCJmb2xkZXJSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MywiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiVm91cyBhdmV6IHRvdXQgw6AgZmFpdCByYWlzb24uIFVuZSBmb2lzIGxlcyBkb25uw6llcyBlbnZvecOpZXMgZXQgbWlzZXMgw6Agam91ciwgbCfDqXRhdCBgaXNNb2RpZmllZGAgZGV2cmFpdCByZXZlbmlyIMOgIGBmYWxzZWAgcHVpc3F1ZSBsZXMgZG9ubsOpZXMgc29udCBtYWludGVuYW50IMOgIGpvdXIuIFZvaWNpIGNvbW1lbnQgbm91cyBwb3V2b25zIGltcGzDqW1lbnRlciBjZXR0ZSBmb25jdGlvbm5hbGl0w6kgOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjczOTVlMjEzLTNlZmItNDM5Mi1hMTUwLTQxZDgzNDc1NmU5MCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IlBhcmZhaXQgISBKJ2FpIGFqb3V0w6kgbGEgbG9naXF1ZSBuw6ljZXNzYWlyZSBwb3VyIHLDqWluaXRpYWxpc2VyIGwnw6l0YXQgYGlzTW9kaWZpZWRgIGFwcsOocyBsYSBtaXNlIMOgIGpvdXIgZGVzIGRvbm7DqWVzLiBWb2ljaSBjZSBxdWUgZmFpdCBsZSBjb2RlIG1vZGlmacOpIDpcblxuMS4gQXByw6hzIGF2b2lyIGFwcGVsw6kgbGEgZm9uY3Rpb24gYG9uU3VibWl0YCBwb3VyIGVudm95ZXIgbGVzIGRvbm7DqWVzIGF1IGNvbXBvc2FudCBwYXJlbnQsIG5vdXMgbWV0dG9ucyDDoCBqb3VyIGxlcyB2YWxldXJzIG9yaWdpbmFsZXMgYXZlYyBsZXMgbm91dmVsbGVzIGRvbm7DqWVzIHNvdW1pc2VzLlxuXG4yLiBKJ2FpIHV0aWxpc8OpIHVuIGBzZXRUaW1lb3V0YCBhdmVjIHVuIGTDqWxhaSBkZSA1MDBtcyBwb3VyIHMnYXNzdXJlciBxdWUgY2V0dGUgbWlzZSDDoCBqb3VyIHNlIHByb2R1aXQgYXByw6hzIHF1ZSBsZXMgZG9ubsOpZXMgYWllbnQgw6l0w6kgdHJhaXTDqWVzIHBhciBsZSBjb21wb3NhbnQgcGFyZW50LCBtYWlzIGF2YW50IHF1ZSBsJ8OpdGF0IGRlIHNhdXZlZ2FyZGUgbmUgc29pdCByw6lpbml0aWFsaXPDqSAocXVpIHNlIGZhaXQgYXByw6hzIDEwMDBtcykuXG5cbjMuIEVuIG1ldHRhbnQgw6Agam91ciBgb3JpZ2luYWxWYWx1ZXNgIGF2ZWMgbGVzIG5vdXZlbGxlcyBkb25uw6llcywgbCdlZmZldCBgdXNlRWZmZWN0YCBxdWkgc3VydmVpbGxlIGxlcyBjaGFuZ2VtZW50cyBkYW5zIGxlIGZvcm11bGFpcmUgZMOpdGVjdGVyYSBxdWUgbGVzIHZhbGV1cnMgYWN0dWVsbGVzIGNvcnJlc3BvbmRlbnQgbWFpbnRlbmFudCBhdXggdmFsZXVycyBvcmlnaW5hbGVzLCBldCBtZXR0cmEgZG9uYyBgaXNNb2RpZmllZGAgw6AgYGZhbHNlYC5cblxuQ2V0dGUgbW9kaWZpY2F0aW9uIGdhcmFudGl0IHF1ZSA6XG4tIEFwcsOocyB1bmUgbWlzZSDDoCBqb3VyIHLDqXVzc2llLCBsZSBib3V0b24gYWZmaWNoZXJhIFwiUmV0b3VyIMOgIGwnYWNjdWVpbFwiIHB1aXNxdWUgbGVzIGRvbm7DqWVzIHNvbnQgbWFpbnRlbmFudCDDoCBqb3VyXG4tIFNpIGwndXRpbGlzYXRldXIgZmFpdCBkZSBub3V2ZWxsZXMgbW9kaWZpY2F0aW9ucyBhcHLDqHMgYXZvaXIgZW5yZWdpc3Ryw6ksIGxlIGJvdXRvbiBjaGFuZ2VyYSDDoCBub3V2ZWF1IHBvdXIgYWZmaWNoZXIgXCJFbnJlZ2lzdHJlciBsZXMgbW9kaWZpY2F0aW9uc1wiXG5cbkMnZXN0IGV4YWN0ZW1lbnQgbGUgY29tcG9ydGVtZW50IHF1ZSB2b3VzIHNvdWhhaXRpZXogOiB1bmUgZm9pcyBsZXMgZG9ubsOpZXMgZW52b3nDqWVzIGV0IG1vZGlmacOpZXMsIGwnw6l0YXQgYGlzTW9kaWZpZWRgIHJldmllbnQgw6AgYGZhbHNlYCBjYXIgbGVzIGRvbm7DqWVzIHNvbnQgw6Agam91ci5cblxuRXN0LWNlIHF1ZSBjZXR0ZSBzb2x1dGlvbiB2b3VzIGNvbnZpZW50ID9cbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeC5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgIDkxXHQgICAgY29uc3QgY3VycmVudFZhbHVlcyA9IEpTT04uc3RyaW5naWZ5KGZvcm1WYWx1ZXMpO1xuICAgIDkyXHQgICAgc2V0SXNNb2RpZmllZChjdXJyZW50VmFsdWVzICE9PSBvcmlnaW5hbFZhbHVlcyk7XG4gICAgOTNcdCAgfSwgW2Zvcm1WYWx1ZXMsIG9yaWdpbmFsVmFsdWVzLCBpbml0aWFsRGF0YV0pO1xuICAgIDk0XHRcbiAgICA5NVx0ICBjb25zdCBoYW5kbGVGb3JtU3VibWl0ID0gKGRhdGE6IEJvb2tGb3JtVmFsdWVzVHlwZSkgPT4ge1xuICAgIDk2XHQgICAgLy8gU2kgYXVjdW5lIG1vZGlmaWNhdGlvbiwgcmVkaXJpZ2VyIHZlcnMgbGEgcGFnZSBkJ2FjY3VlaWxcbiAgICA5N1x0ICAgIGlmICghaXNNb2RpZmllZCkge1xuICAgIDk4XHQgICAgICByb3V0ZXIucHVzaCgnLycpO1xuICAgIDk5XHQgICAgICByZXR1cm47XG4gICAxMDBcdCAgICB9XG4gICAxMDFcdFxuICAgMTAyXHQgICAgLy8gU2kgZGVzIG1vZGlmaWNhdGlvbnMgb250IMOpdMOpIGVmZmVjdHXDqWVzLCBzb3VtZXR0cmUgbGVzIGRvbm7DqWVzXG4gICAxMDNcdCAgICBzZXRJc1NhdmluZyh0cnVlKTtcbiAgIDEwNFx0ICAgIGNvbnN0IGJvb2tEYXRhID0gY29udmVydEZvcm1WYWx1ZXNUb0Jvb2tEYXRhKGRhdGEpO1xuICAgMTA1XHRcbiAgIDEwNlx0ICAgIGlmIChvblN1Ym1pdCkge1xuICAgMTA3XHQgICAgICAvLyBQYXNzZXIgbGVzIGRvbm7DqWVzIGF1IGNvbXBvc2FudCBwYXJlbnQgcXVpIGfDqHJlcmEgbGEgcmVxdcOqdGUgUFVUXG4gICAxMDhcdCAgICAgIG9uU3VibWl0KGJvb2tEYXRhKTtcbiAgIDEwOVx0XG4gICAxMTBcdCAgICAgIC8vIEFwcsOocyBsYSBtaXNlIMOgIGpvdXIsIG1ldHRyZSDDoCBqb3VyIGxlcyB2YWxldXJzIG9yaWdpbmFsZXNcbiAgIDExMVx0ICAgICAgLy8gcG91ciBxdWUgaXNNb2RpZmllZCByZXZpZW5uZSDDoCBmYWxzZVxuICAgMTEyXHQgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgIDExM1x0ICAgICAgICBzZXRPcmlnaW5hbFZhbHVlcyhKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAxMTRcdCAgICAgIH0sIDUwMCk7XG4gICAxMTVcdCAgICB9XG4gICAxMTZcdFxuICAgMTE3XHQgICAgLy8gUsOpaW5pdGlhbGlzZXIgbCfDqXRhdCBkZSBzYXV2ZWdhcmRlIGFwcsOocyB1biBjb3VydCBkw6lsYWlcbiAgIDExOFx0ICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgMTE5XHQgICAgICBzZXRJc1NhdmluZyhmYWxzZSk7XG4gICAxMjBcdCAgICB9LCAxMDAwKTtcbiAgIDEyMVx0ICB9O1xuICAgMTIyXHRcbiAgIDEyM1x0ICBjb25zdCBoYW5kbGVSZXR1cm5Ib21lID0gKCkgPT4ge1xuICAgMTI0XHQgICAgcm91dGVyLnB1c2goJy8nKTtcbiAgIDEyNVx0ICB9O1xuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxV0VHWmtUMkxCQWhlQzNrQ3RTNjhWRiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250IiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjMsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifX19XSwicmVzcG9uc2VfdGV4dCI6IlBhcmZhaXQgISBKJ2FpIGFqb3V0w6kgbGEgbG9naXF1ZSBuw6ljZXNzYWlyZSBwb3VyIHLDqWluaXRpYWxpc2VyIGwnw6l0YXQgYGlzTW9kaWZpZWRgIGFwcsOocyBsYSBtaXNlIMOgIGpvdXIgZGVzIGRvbm7DqWVzLiBWb2ljaSBjZSBxdWUgZmFpdCBsZSBjb2RlIG1vZGlmacOpIDpcblxuMS4gQXByw6hzIGF2b2lyIGFwcGVsw6kgbGEgZm9uY3Rpb24gYG9uU3VibWl0YCBwb3VyIGVudm95ZXIgbGVzIGRvbm7DqWVzIGF1IGNvbXBvc2FudCBwYXJlbnQsIG5vdXMgbWV0dG9ucyDDoCBqb3VyIGxlcyB2YWxldXJzIG9yaWdpbmFsZXMgYXZlYyBsZXMgbm91dmVsbGVzIGRvbm7DqWVzIHNvdW1pc2VzLlxuXG4yLiBKJ2FpIHV0aWxpc8OpIHVuIGBzZXRUaW1lb3V0YCBhdmVjIHVuIGTDqWxhaSBkZSA1MDBtcyBwb3VyIHMnYXNzdXJlciBxdWUgY2V0dGUgbWlzZSDDoCBqb3VyIHNlIHByb2R1aXQgYXByw6hzIHF1ZSBsZXMgZG9ubsOpZXMgYWllbnQgw6l0w6kgdHJhaXTDqWVzIHBhciBsZSBjb21wb3NhbnQgcGFyZW50LCBtYWlzIGF2YW50IHF1ZSBsJ8OpdGF0IGRlIHNhdXZlZ2FyZGUgbmUgc29pdCByw6lpbml0aWFsaXPDqSAocXVpIHNlIGZhaXQgYXByw6hzIDEwMDBtcykuXG5cbjMuIEVuIG1ldHRhbnQgw6Agam91ciBgb3JpZ2luYWxWYWx1ZXNgIGF2ZWMgbGVzIG5vdXZlbGxlcyBkb25uw6llcywgbCdlZmZldCBgdXNlRWZmZWN0YCBxdWkgc3VydmVpbGxlIGxlcyBjaGFuZ2VtZW50cyBkYW5zIGxlIGZvcm11bGFpcmUgZMOpdGVjdGVyYSBxdWUgbGVzIHZhbGV1cnMgYWN0dWVsbGVzIGNvcnJlc3BvbmRlbnQgbWFpbnRlbmFudCBhdXggdmFsZXVycyBvcmlnaW5hbGVzLCBldCBtZXR0cmEgZG9uYyBgaXNNb2RpZmllZGAgw6AgYGZhbHNlYC5cblxuQ2V0dGUgbW9kaWZpY2F0aW9uIGdhcmFudGl0IHF1ZSA6XG4tIEFwcsOocyB1bmUgbWlzZSDDoCBqb3VyIHLDqXVzc2llLCBsZSBib3V0b24gYWZmaWNoZXJhIFwiUmV0b3VyIMOgIGwnYWNjdWVpbFwiIHB1aXNxdWUgbGVzIGRvbm7DqWVzIHNvbnQgbWFpbnRlbmFudCDDoCBqb3VyXG4tIFNpIGwndXRpbGlzYXRldXIgZmFpdCBkZSBub3V2ZWxsZXMgbW9kaWZpY2F0aW9ucyBhcHLDqHMgYXZvaXIgZW5yZWdpc3Ryw6ksIGxlIGJvdXRvbiBjaGFuZ2VyYSDDoCBub3V2ZWF1IHBvdXIgYWZmaWNoZXIgXCJFbnJlZ2lzdHJlciBsZXMgbW9kaWZpY2F0aW9uc1wiXG5cbkMnZXN0IGV4YWN0ZW1lbnQgbGUgY29tcG9ydGVtZW50IHF1ZSB2b3VzIHNvdWhhaXRpZXogOiB1bmUgZm9pcyBsZXMgZG9ubsOpZXMgZW52b3nDqWVzIGV0IG1vZGlmacOpZXMsIGwnw6l0YXQgYGlzTW9kaWZpZWRgIHJldmllbnQgw6AgYGZhbHNlYCBjYXIgbGVzIGRvbm7DqWVzIHNvbnQgw6Agam91ci5cblxuRXN0LWNlIHF1ZSBjZXR0ZSBzb2x1dGlvbiB2b3VzIGNvbnZpZW50ID9cbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsicmVxdWVzdF9pZCI6IjUyMjE1ZjhmLTczZTgtNDUyZS04MzBlLTU3Zjg3OGQ2NzU0YyIsInV1aWQiOiJlOTMxZDlhYS1hMGUzLTQxMTItYmQ4ZS1lYjgxZTE2Zjk4ZTkiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLWNoZWNrcG9pbnQtZGVsaW1pdGVyIiwic3RhdHVzIjoic3VjY2VzcyIsImZyb21UaW1lc3RhbXAiOjE3NDQzNjg2Njg4MDksInRvVGltZXN0YW1wIjoxNzQ0MzY4NzUyNzU0LCJzZWVuX3N0YXRlIjoic2VlbiJ9LHsicmVxdWVzdF9pZCI6IjVmMWE4NGU2LTk2NTctNDU3MS1hYWIxLWNiYWI0YTkwMjZiOCIsInN0YXR1cyI6ImNhbmNlbGxlZCIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtdHVybi1kZWxpbWl0ZXIifSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZTA5OWIyNTgtYzU3MC00OWM0LWFhNTctNmZhOTEyNDZlY2EwIiwicmVxdWVzdF9tZXNzYWdlIjoiRW5jb3JlIHVuZSBmb2lzLCB1bmUgZm9pcyBsJ2FwcGVsIGVudm95IGV0IGxhIG1vZGlmaWNhdGlvbiBiaWVuIGVmZmVjdHXDqSwgbGUgYm91dG9uIHJlc3RlciBFbnJlZ2lzdHJlciBsZXMgbW9kaWZpY2F0aW9ucyIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiJFbmNvcmUgdW5lIGZvaXMsIHVuZSBmb2lzIGwnYXBwZWwgZW52b3kgZXQgbGEgbW9kaWZpY2F0aW9uIGJpZW4gZWZmZWN0dcOpLCBsZSBib3V0b24gcmVzdGVyIEVucmVnaXN0cmVyIGxlcyBtb2RpZmljYXRpb25zIn1dfV19LCJtZW50aW9uZWRfaXRlbXMiOltdLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxTWFnajhzZHR1ejVHYUpUalo3TVhNOSIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwic3RyX3JlcGxhY2VcIiwgXCJwYXRoXCI6IFwic3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeFwiLCBcInN0cl9yZXBsYWNlX2VudHJpZXNcIjogW3tcIm9sZF9zdHJcIjogXCIgIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XFxuICAgIC8vIFNpIGF1Y3VuZSBtb2RpZmljYXRpb24sIHJlZGlyaWdlciB2ZXJzIGxhIHBhZ2UgZCdhY2N1ZWlsXFxuICAgIGlmICghaXNNb2RpZmllZCkge1xcbiAgICAgIHJvdXRlci5wdXNoKCcvJyk7XFxuICAgICAgcmV0dXJuO1xcbiAgICB9XFxuICAgIFxcbiAgICAvLyBTaSBkZXMgbW9kaWZpY2F0aW9ucyBvbnQgXFx1MDBlOXRcXHUwMGU5IGVmZmVjdHVcXHUwMGU5ZXMsIHNvdW1ldHRyZSBsZXMgZG9ublxcdTAwZTllc1xcbiAgICBzZXRJc1NhdmluZyh0cnVlKTtcXG4gICAgY29uc3QgYm9va0RhdGEgPSBjb252ZXJ0Rm9ybVZhbHVlc1RvQm9va0RhdGEoZGF0YSk7XFxuICAgIFxcbiAgICBpZiAob25TdWJtaXQpIHtcXG4gICAgICAvLyBQYXNzZXIgbGVzIGRvbm5cXHUwMGU5ZXMgYXUgY29tcG9zYW50IHBhcmVudCBxdWkgZ1xcdTAwZThyZXJhIGxhIHJlcXVcXHUwMGVhdGUgUFVUXFxuICAgICAgb25TdWJtaXQoYm9va0RhdGEpO1xcbiAgICAgIFxcbiAgICAgIC8vIEFwclxcdTAwZThzIGxhIG1pc2UgXFx1MDBlMCBqb3VyLCBtZXR0cmUgXFx1MDBlMCBqb3VyIGxlcyB2YWxldXJzIG9yaWdpbmFsZXNcXG4gICAgICAvLyBwb3VyIHF1ZSBpc01vZGlmaWVkIHJldmllbm5lIFxcdTAwZTAgZmFsc2VcXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcXG4gICAgICAgIHNldE9yaWdpbmFsVmFsdWVzKEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcXG4gICAgICB9LCA1MDApO1xcbiAgICB9XFxuICAgIFxcbiAgICAvLyBSXFx1MDBlOWluaXRpYWxpc2VyIGwnXFx1MDBlOXRhdCBkZSBzYXV2ZWdhcmRlIGFwclxcdTAwZThzIHVuIGNvdXJ0IGRcXHUwMGU5bGFpXFxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xcbiAgICAgIHNldElzU2F2aW5nKGZhbHNlKTtcXG4gICAgfSwgMTAwMCk7XFxuICB9O1wiLCBcIm5ld19zdHJcIjogXCIgIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XFxuICAgIC8vIFNpIGF1Y3VuZSBtb2RpZmljYXRpb24sIHJlZGlyaWdlciB2ZXJzIGxhIHBhZ2UgZCdhY2N1ZWlsXFxuICAgIGlmICghaXNNb2RpZmllZCkge1xcbiAgICAgIHJvdXRlci5wdXNoKCcvJyk7XFxuICAgICAgcmV0dXJuO1xcbiAgICB9XFxuICAgIFxcbiAgICAvLyBTaSBkZXMgbW9kaWZpY2F0aW9ucyBvbnQgXFx1MDBlOXRcXHUwMGU5IGVmZmVjdHVcXHUwMGU5ZXMsIHNvdW1ldHRyZSBsZXMgZG9ublxcdTAwZTllc1xcbiAgICBzZXRJc1NhdmluZyh0cnVlKTtcXG4gICAgY29uc3QgYm9va0RhdGEgPSBjb252ZXJ0Rm9ybVZhbHVlc1RvQm9va0RhdGEoZGF0YSk7XFxuICAgIFxcbiAgICBpZiAob25TdWJtaXQpIHtcXG4gICAgICAvLyBDclxcdTAwZTllciB1bmUgZm9uY3Rpb24gZGUgY2FsbGJhY2sgcG91ciByXFx1MDBlOWluaXRpYWxpc2VyIGwnXFx1MDBlOXRhdCBhcHJcXHUwMGU4cyBsYSBtaXNlIFxcdTAwZTAgam91clxcbiAgICAgIGNvbnN0IHJlc2V0TW9kaWZpZWRTdGF0ZSA9ICgpID0+IHtcXG4gICAgICAgIC8vIE1ldHRyZSBcXHUwMGUwIGpvdXIgZGlyZWN0ZW1lbnQgbCdcXHUwMGU5dGF0IGlzTW9kaWZpZWRcXG4gICAgICAgIHNldElzTW9kaWZpZWQoZmFsc2UpO1xcbiAgICAgICAgLy8gTWV0dHJlIFxcdTAwZTAgam91ciBsZXMgdmFsZXVycyBvcmlnaW5hbGVzIGF2ZWMgbGVzIG5vdXZlbGxlcyBkb25uXFx1MDBlOWVzXFxuICAgICAgICBzZXRPcmlnaW5hbFZhbHVlcyhKU09OLnN0cmluZ2lmeShkYXRhKSk7XFxuICAgICAgfTtcXG4gICAgICBcXG4gICAgICAvLyBQYXNzZXIgbGVzIGRvbm5cXHUwMGU5ZXMgZXQgbGUgY2FsbGJhY2sgYXUgY29tcG9zYW50IHBhcmVudFxcbiAgICAgIG9uU3VibWl0KGJvb2tEYXRhLCByZXNldE1vZGlmaWVkU3RhdGUpO1xcbiAgICB9XFxuICAgIFxcbiAgICAvLyBSXFx1MDBlOWluaXRpYWxpc2VyIGwnXFx1MDBlOXRhdCBkZSBzYXV2ZWdhcmRlIGFwclxcdTAwZThzIHVuIGNvdXJ0IGRcXHUwMGU5bGFpXFxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xcbiAgICAgIHNldElzU2F2aW5nKGZhbHNlKTtcXG4gICAgfSwgMTAwMCk7XFxuICB9O1wiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJcIjogOTUsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJcIjogMTIxfV19In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJKZSBjb21wcmVuZHMgbGUgcHJvYmzDqG1lLiBJbCBzZW1ibGUgcXVlIG5vdHJlIGFwcHJvY2hlIGFjdHVlbGxlIG5lIHLDqWluaXRpYWxpc2UgcGFzIGNvcnJlY3RlbWVudCBsJ8OpdGF0IGBpc01vZGlmaWVkYCBhcHLDqHMgbGEgbWlzZSDDoCBqb3VyLiBFc3NheW9ucyB1bmUgYXBwcm9jaGUgZGlmZsOpcmVudGUgZXQgcGx1cyBkaXJlY3RlIHBvdXIgcsOpc291ZHJlIGNlIHByb2Jsw6htZSA6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjowLCJ0ZXh0X25vZGUiOnsiY29udGVudCI6IkVuY29yZSB1bmUgZm9pcywgdW5lIGZvaXMgbCdhcHBlbCBlbnZveSBldCBsYSBtb2RpZmljYXRpb24gYmllbiBlZmZlY3R1w6ksIGxlIGJvdXRvbiByZXN0ZXIgRW5yZWdpc3RyZXIgbGVzIG1vZGlmaWNhdGlvbnMifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCIsImZvbGRlclJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjozLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In19fV0sInJlc3BvbnNlX3RleHQiOiJKZSBjb21wcmVuZHMgbGUgcHJvYmzDqG1lLiBJbCBzZW1ibGUgcXVlIG5vdHJlIGFwcHJvY2hlIGFjdHVlbGxlIG5lIHLDqWluaXRpYWxpc2UgcGFzIGNvcnJlY3RlbWVudCBsJ8OpdGF0IGBpc01vZGlmaWVkYCBhcHLDqHMgbGEgbWlzZSDDoCBqb3VyLiBFc3NheW9ucyB1bmUgYXBwcm9jaGUgZGlmZsOpcmVudGUgZXQgcGx1cyBkaXJlY3RlIHBvdXIgcsOpc291ZHJlIGNlIHByb2Jsw6htZSA6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiODBlMzg3NDUtM2Y3Yi00YmMxLTk1YzktYjZiMTg0M2Q2YWMzIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMUF4eFBDU01WNnBXMXFLbXJyZ0ZGYjIiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInN0cl9yZXBsYWNlXCIsIFwicGF0aFwiOiBcInNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3hcIiwgXCJzdHJfcmVwbGFjZV9lbnRyaWVzXCI6IFt7XCJvbGRfc3RyXCI6IFwiaW50ZXJmYWNlIEJvb2tFZGl0Rm9ybVByb3BzIHtcXG4gIGluaXRpYWxEYXRhPzogQm9va0RhdGE7XFxuICBvblN1Ym1pdD86IChkYXRhOiBCb29rRGF0YSkgPT4gdm9pZDtcXG59XCIsIFwibmV3X3N0clwiOiBcImludGVyZmFjZSBCb29rRWRpdEZvcm1Qcm9wcyB7XFxuICBpbml0aWFsRGF0YT86IEJvb2tEYXRhO1xcbiAgb25TdWJtaXQ/OiAoZGF0YTogQm9va0RhdGEsIHJlc2V0TW9kaWZpZWRTdGF0ZT86ICgpID0+IHZvaWQpID0+IHZvaWQ7XFxufVwiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJcIjogNTIsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJcIjogNTV9XX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6Ik1haW50ZW5hbnQsIG5vdXMgZGV2b25zIG1ldHRyZSDDoCBqb3VyIGwnaW50ZXJmYWNlIEJvb2tFZGl0Rm9ybVByb3BzIGV0IGxlIGNvbXBvc2FudCBwYXJlbnQgcG91ciBwcmVuZHJlIGVuIGNoYXJnZSBjZSBub3V2ZWF1IGNhbGxiYWNrIDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeC5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgIDkwXHQgICAgY29uc3QgY3VycmVudFZhbHVlcyA9IEpTT04uc3RyaW5naWZ5KGZvcm1WYWx1ZXMpO1xuICAgIDkxXHQgICAgc2V0SXNNb2RpZmllZChjdXJyZW50VmFsdWVzICE9PSBvcmlnaW5hbFZhbHVlcyk7XG4gICAgOTJcdCAgfSwgW2Zvcm1WYWx1ZXMsIG9yaWdpbmFsVmFsdWVzLCBpbml0aWFsRGF0YV0pO1xuICAgIDkzXHRcbiAgICA5NFx0ICBjb25zdCBoYW5kbGVGb3JtU3VibWl0ID0gKGRhdGE6IEJvb2tGb3JtVmFsdWVzVHlwZSkgPT4ge1xuICAgIDk1XHQgICAgLy8gU2kgYXVjdW5lIG1vZGlmaWNhdGlvbiwgcmVkaXJpZ2VyIHZlcnMgbGEgcGFnZSBkJ2FjY3VlaWxcbiAgICA5Nlx0ICAgIGlmICghaXNNb2RpZmllZCkge1xuICAgIDk3XHQgICAgICByb3V0ZXIucHVzaCgnLycpO1xuICAgIDk4XHQgICAgICByZXR1cm47XG4gICAgOTlcdCAgICB9XG4gICAxMDBcdFxuICAgMTAxXHQgICAgLy8gU2kgZGVzIG1vZGlmaWNhdGlvbnMgb250IMOpdMOpIGVmZmVjdHXDqWVzLCBzb3VtZXR0cmUgbGVzIGRvbm7DqWVzXG4gICAxMDJcdCAgICBzZXRJc1NhdmluZyh0cnVlKTtcbiAgIDEwM1x0ICAgIGNvbnN0IGJvb2tEYXRhID0gY29udmVydEZvcm1WYWx1ZXNUb0Jvb2tEYXRhKGRhdGEpO1xuICAgMTA0XHRcbiAgIDEwNVx0ICAgIGlmIChvblN1Ym1pdCkge1xuICAgMTA2XHQgICAgICAvLyBDcsOpZXIgdW5lIGZvbmN0aW9uIGRlIGNhbGxiYWNrIHBvdXIgcsOpaW5pdGlhbGlzZXIgbCfDqXRhdCBhcHLDqHMgbGEgbWlzZSDDoCBqb3VyXG4gICAxMDdcdCAgICAgIGNvbnN0IHJlc2V0TW9kaWZpZWRTdGF0ZSA9ICgpID0+IHtcbiAgIDEwOFx0ICAgICAgICAvLyBNZXR0cmUgw6Agam91ciBkaXJlY3RlbWVudCBsJ8OpdGF0IGlzTW9kaWZpZWRcbiAgIDEwOVx0ICAgICAgICBzZXRJc01vZGlmaWVkKGZhbHNlKTtcbiAgIDExMFx0ICAgICAgICAvLyBNZXR0cmUgw6Agam91ciBsZXMgdmFsZXVycyBvcmlnaW5hbGVzIGF2ZWMgbGVzIG5vdXZlbGxlcyBkb25uw6llc1xuICAgMTExXHQgICAgICAgIHNldE9yaWdpbmFsVmFsdWVzKEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgIDExMlx0ICAgICAgfTtcbiAgIDExM1x0XG4gICAxMTRcdCAgICAgIC8vIFBhc3NlciBsZXMgZG9ubsOpZXMgZXQgbGUgY2FsbGJhY2sgYXUgY29tcG9zYW50IHBhcmVudFxuICAgMTE1XHQgICAgICBvblN1Ym1pdChib29rRGF0YSwgcmVzZXRNb2RpZmllZFN0YXRlKTtcbiAgIDExNlx0ICAgIH1cbiAgIDExN1x0XG4gICAxMThcdCAgICAvLyBSw6lpbml0aWFsaXNlciBsJ8OpdGF0IGRlIHNhdXZlZ2FyZGUgYXByw6hzIHVuIGNvdXJ0IGTDqWxhaVxuICAgMTE5XHQgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAxMjBcdCAgICAgIHNldElzU2F2aW5nKGZhbHNlKTtcbiAgIDEyMVx0ICAgIH0sIDEwMDApO1xuICAgMTIyXHQgIH07XG4gICAxMjNcdFxuICAgMTI0XHQgIGNvbnN0IGhhbmRsZVJldHVybkhvbWUgPSAoKSA9PiB7XG4gICAxMjVcdCAgICByb3V0ZXIucHVzaCgnLycpO1xuICAgMTI2XHQgIH07XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDFNYWdqOHNkdHV6NUdhSlRqWjdNWE05In19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQiLCJmb2xkZXJSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MywiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiTWFpbnRlbmFudCwgbm91cyBkZXZvbnMgbWV0dHJlIMOgIGpvdXIgbCdpbnRlcmZhY2UgQm9va0VkaXRGb3JtUHJvcHMgZXQgbGUgY29tcG9zYW50IHBhcmVudCBwb3VyIHByZW5kcmUgZW4gY2hhcmdlIGNlIG5vdXZlYXUgY2FsbGJhY2sgOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjA0Njg2MmI1LWVmNTMtNDA1Yy05NDZjLWU4OTUwMzYyZTE1NSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFEWVJVRWVtTnptMkVNRzU0UU44NmJkIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeFwiLCBcInN0cl9yZXBsYWNlX2VudHJpZXNcIjogW3tcIm9sZF9zdHJcIjogXCIgICAgICAgICAgICAgICAgb25TdWJtaXQ9e2FzeW5jIChkYXRhKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm5cXHUwMGU5ZXMgZHUgZm9ybXVsYWlyZSBzb3VtaXNlczonLCBkYXRhKTtcXG4gICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICB0cnkge1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaWQpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgLy8gUHJcXHUwMGU5cGFyZXIgbGVzIGRvbm5cXHUwMGU5ZXMgcG91ciBQcmlzbWFcXG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJpc21hRGF0YSA9IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJpdmFsVGltZTogZGF0YS5hcnJpdmFsVGltZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NJbnN0cnVjdGlvbnM6IGRhdGEuYWNjZXNzSW5zdHJ1Y3Rpb25zLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycml2YWxBZGRpdGlvbmFsSW5mbzogZGF0YS5hcnJpdmFsQWRkaXRpb25hbEluZm8sXFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVwYXJ0dXJlVGltZTogZGF0YS5kZXBhcnR1cmVUaW1lLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4aXRJbnN0cnVjdGlvbnM6IGRhdGEuZXhpdEluc3RydWN0aW9ucyxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXBhcnR1cmVBZGRpdGlvbmFsSW5mbzogZGF0YS5kZXBhcnR1cmVBZGRpdGlvbmFsSW5mbyxcXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWZpTmFtZTogZGF0YS53aWZpTmFtZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWZpUGFzc3dvcmQ6IGRhdGEud2lmaVBhc3N3b3JkLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdXNlUnVsZXM6IGRhdGEuaG91c2VSdWxlcyxcXG4gICAgICAgICAgICAgICAgICAgICAgICBvd25lckNvbnRhY3Q6IGRhdGEub3duZXJDb250YWN0LFxcbiAgICAgICAgICAgICAgICAgICAgICAgIG93bmVyTmFtZTogZGF0YS5vd25lck5hbWUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbEluZm86IGRhdGEuZ2VuZXJhbEluZm8sXFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9ybWF0IHNwXFx1MDBlOWNpZmlxdWUgcG91ciBsZXMgcmVsYXRpb25zIGRhbnMgUHJpc21hXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjb21tZW5kYXRpb25zOiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVNYW55OiB7fSwgLy8gU3VwcHJpbWVyIHRvdXRlcyBsZXMgcmVjb21tYW5kYXRpb25zIGV4aXN0YW50ZXNcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZTogZGF0YS5yZWNvbW1lbmRhdGlvbnMubWFwKHJlYyA9PiAoe1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiByZWMubmFtZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogcmVjLmFkZHJlc3MgfHwgJycsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiByZWMuZGVzY3JpcHRpb24gfHwgJycsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHJlYy50eXBlXFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KSlcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgIH07XFxuICAgICAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgICAgICAvLyBFbnZveWVyIHVuZSByZXF1XFx1MDBlYXRlIFBVVCBwb3VyIG1ldHRyZSBcXHUwMGUwIGpvdXIgbGVzIGRvbm5cXHUwMGU5ZXNcXG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wdXQoYGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMS9hcGkvc3RheS8ke2RhdGEuaWR9YCwgcHJpc21hRGF0YSk7XFxuICAgICAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRG9ublxcdTAwZTllcyBtaXNlcyBcXHUwMGUwIGpvdXIgYXZlYyBzdWNjXFx1MDBlOHM6JywgcmVzcG9uc2UuZGF0YSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWV0dHJlIFxcdTAwZTAgam91ciBsZSBzdGF0ZSBib29rRGF0YSBhdmVjIGxlcyBkb25uXFx1MDBlOWVzIHJcXHUwMGU5Y3VwXFx1MDBlOXJcXHUwMGU5ZXNcXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRCb29rRGF0YShyZXNwb25zZS5kYXRhKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTYXV2ZWdhcmRlciBsZXMgZG9ublxcdTAwZTllcyBtaXNlcyBcXHUwMGUwIGpvdXIgZGFucyBsZSBsb2NhbFN0b3JhZ2VcXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShyZXNwb25zZS5kYXRhKSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3RyXFx1MDBlOWVzIGF2ZWMgc3VjY1xcdTAwZThzIScpO1xcbiAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAvLyBQYXMgZCdJRCwgZG9uYyBvbiBtZXQgc2ltcGxlbWVudCBcXHUwMGUwIGpvdXIgbGUgc3RhdGVcXG4gICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEoZGF0YSk7XFxuICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdib29rRGF0YScsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcXG4gICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3RyXFx1MDBlOWVzIGF2ZWMgc3VjY1xcdTAwZThzIScpO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XFxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJldXIgbG9ycyBkZSBsYSBtaXNlIFxcdTAwZTAgam91ciBkZXMgZG9ublxcdTAwZTllczonLCBlcnJvcik7XFxuICAgICAgICAgICAgICAgICAgICBhbGVydCgnVW5lIGVycmV1ciBlc3Qgc3VydmVudWUgbG9ycyBkZSBsYSBtaXNlIFxcdTAwZTAgam91ciBkZXMgZG9ublxcdTAwZTllcy4nKTtcXG4gICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH19XCIsIFwibmV3X3N0clwiOiBcIiAgICAgICAgICAgICAgICBvblN1Ym1pdD17YXN5bmMgKGRhdGEsIHJlc2V0TW9kaWZpZWRTdGF0ZSkgPT4ge1xcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEb25uXFx1MDBlOWVzIGR1IGZvcm11bGFpcmUgc291bWlzZXM6JywgZGF0YSk7XFxuICAgICAgICAgICAgICAgICAgXFxuICAgICAgICAgICAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmlkKSB7XFxuICAgICAgICAgICAgICAgICAgICAgIC8vIFByXFx1MDBlOXBhcmVyIGxlcyBkb25uXFx1MDBlOWVzIHBvdXIgUHJpc21hXFxuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByaXNtYURhdGEgPSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyaXZhbFRpbWU6IGRhdGEuYXJyaXZhbFRpbWUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzSW5zdHJ1Y3Rpb25zOiBkYXRhLmFjY2Vzc0luc3RydWN0aW9ucyxcXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJpdmFsQWRkaXRpb25hbEluZm86IGRhdGEuYXJyaXZhbEFkZGl0aW9uYWxJbmZvLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlcGFydHVyZVRpbWU6IGRhdGEuZGVwYXJ0dXJlVGltZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBleGl0SW5zdHJ1Y3Rpb25zOiBkYXRhLmV4aXRJbnN0cnVjdGlvbnMsXFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVwYXJ0dXJlQWRkaXRpb25hbEluZm86IGRhdGEuZGVwYXJ0dXJlQWRkaXRpb25hbEluZm8sXFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lmaU5hbWU6IGRhdGEud2lmaU5hbWUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lmaVBhc3N3b3JkOiBkYXRhLndpZmlQYXNzd29yZCxcXG4gICAgICAgICAgICAgICAgICAgICAgICBob3VzZVJ1bGVzOiBkYXRhLmhvdXNlUnVsZXMsXFxuICAgICAgICAgICAgICAgICAgICAgICAgb3duZXJDb250YWN0OiBkYXRhLm93bmVyQ29udGFjdCxcXG4gICAgICAgICAgICAgICAgICAgICAgICBvd25lck5hbWU6IGRhdGEub3duZXJOYW1lLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYWxJbmZvOiBkYXRhLmdlbmVyYWxJbmZvLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvcm1hdCBzcFxcdTAwZTljaWZpcXVlIHBvdXIgbGVzIHJlbGF0aW9ucyBkYW5zIFByaXNtYVxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29tbWVuZGF0aW9uczoge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlTWFueToge30sIC8vIFN1cHByaW1lciB0b3V0ZXMgbGVzIHJlY29tbWFuZGF0aW9ucyBleGlzdGFudGVzXFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGU6IGRhdGEucmVjb21tZW5kYXRpb25zLm1hcChyZWMgPT4gKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcmVjLm5hbWUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IHJlYy5hZGRyZXNzIHx8ICcnLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogcmVjLmRlc2NyaXB0aW9uIHx8ICcnLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiByZWMudHlwZVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICB9O1xcbiAgICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgICAgLy8gRW52b3llciB1bmUgcmVxdVxcdTAwZWF0ZSBQVVQgcG91ciBtZXR0cmUgXFx1MDBlMCBqb3VyIGxlcyBkb25uXFx1MDBlOWVzXFxuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucHV0KGBodHRwOi8vbG9jYWxob3N0OjMwMDEvYXBpL3N0YXkvJHtkYXRhLmlkfWAsIHByaXNtYURhdGEpO1xcbiAgICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm5cXHUwMGU5ZXMgbWlzZXMgXFx1MDBlMCBqb3VyIGF2ZWMgc3VjY1xcdTAwZThzOicsIHJlc3BvbnNlLmRhdGEpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ldHRyZSBcXHUwMGUwIGpvdXIgbGUgc3RhdGUgYm9va0RhdGEgYXZlYyBsZXMgZG9ublxcdTAwZTllcyByXFx1MDBlOWN1cFxcdTAwZTlyXFx1MDBlOWVzXFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEocmVzcG9uc2UuZGF0YSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2F1dmVnYXJkZXIgbGVzIGRvbm5cXHUwMGU5ZXMgbWlzZXMgXFx1MDBlMCBqb3VyIGRhbnMgbGUgbG9jYWxTdG9yYWdlXFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuZGF0YSkpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdNb2RpZmljYXRpb25zIGVucmVnaXN0clxcdTAwZTllcyBhdmVjIHN1Y2NcXHUwMGU4cyEnKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSXFx1MDBlOWluaXRpYWxpc2VyIGwnXFx1MDBlOXRhdCBpc01vZGlmaWVkIGRhbnMgbGUgY29tcG9zYW50IGVuZmFudFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNldE1vZGlmaWVkU3RhdGUpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TW9kaWZpZWRTdGF0ZSgpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgLy8gUGFzIGQnSUQsIGRvbmMgb24gbWV0IHNpbXBsZW1lbnQgXFx1MDBlMCBqb3VyIGxlIHN0YXRlXFxuICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xcbiAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XFxuICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdNb2RpZmljYXRpb25zIGVucmVnaXN0clxcdTAwZTllcyBhdmVjIHN1Y2NcXHUwMGU4cyEnKTtcXG4gICAgICAgICAgICAgICAgICAgICAgXFxuICAgICAgICAgICAgICAgICAgICAgIC8vIFJcXHUwMGU5aW5pdGlhbGlzZXIgbCdcXHUwMGU5dGF0IGlzTW9kaWZpZWQgZGFucyBsZSBjb21wb3NhbnQgZW5mYW50XFxuICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNldE1vZGlmaWVkU3RhdGUpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldE1vZGlmaWVkU3RhdGUoKTtcXG4gICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XFxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJldXIgbG9ycyBkZSBsYSBtaXNlIFxcdTAwZTAgam91ciBkZXMgZG9ublxcdTAwZTllczonLCBlcnJvcik7XFxuICAgICAgICAgICAgICAgICAgICBhbGVydCgnVW5lIGVycmV1ciBlc3Qgc3VydmVudWUgbG9ycyBkZSBsYSBtaXNlIFxcdTAwZTAgam91ciBkZXMgZG9ublxcdTAwZTllcy4nKTtcXG4gICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH19XCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlclwiOiAxMTIsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJcIjogMTY3fV19In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJNYWludGVuYW50LCBtZXR0b25zIMOgIGpvdXIgbGUgY29tcG9zYW50IHBhcmVudCBwb3VyIHV0aWxpc2VyIGNlIGNhbGxiYWNrIDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeC5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgIDQ5XHQgICAgcmVjb21tZW5kYXRpb25zOiB2YWx1ZXMucmVjb21tZW5kYXRpb25zIHx8IFtdLFxuICAgIDUwXHQgIH07XG4gICAgNTFcdH07XG4gICAgNTJcdFxuICAgIDUzXHRpbnRlcmZhY2UgQm9va0VkaXRGb3JtUHJvcHMge1xuICAgIDU0XHQgIGluaXRpYWxEYXRhPzogQm9va0RhdGE7XG4gICAgNTVcdCAgb25TdWJtaXQ/OiAoZGF0YTogQm9va0RhdGEsIHJlc2V0TW9kaWZpZWRTdGF0ZT86ICgpID0+IHZvaWQpID0+IHZvaWQ7XG4gICAgNTZcdH1cbiAgICA1N1x0XG4gICAgNThcdGV4cG9ydCBmdW5jdGlvbiBCb29rRWRpdEZvcm0oeyBpbml0aWFsRGF0YSwgb25TdWJtaXQgfTogQm9va0VkaXRGb3JtUHJvcHMpIHtcbiAgICA1OVx0ICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcbiAgICA2MFx0ICBjb25zdCBbaXNTYXZpbmcsIHNldElzU2F2aW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMUF4eFBDU01WNnBXMXFLbXJyZ0ZGYjIifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCIsImZvbGRlclJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjozLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In19fV0sInJlc3BvbnNlX3RleHQiOiJNYWludGVuYW50LCBtZXR0b25zIMOgIGpvdXIgbGUgY29tcG9zYW50IHBhcmVudCBwb3VyIHV0aWxpc2VyIGNlIGNhbGxiYWNrIDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIyMmViZGVkYy0yMzY4LTRhZDgtYjYxMS0xMjUxZjQxYjY3NTAiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxN2kyQVV3cDhXTER1enNjOEtyWjlIYiIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeFwiLCBcInZpZXdfcmFuZ2VcIjogWzExMCwgMTY1XX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkplIHZvaXMgcXVlIGxlIGNvbnRlbnUgZHUgZmljaGllciBhIGzDqWfDqHJlbWVudCBjaGFuZ8OpLiBFc3NheW9ucyBkZSB2b2lyIGxlIGNvbnRlbnUgYWN0dWVsIGV0IGRlIGZhaXJlIGxlcyBtb2RpZmljYXRpb25zIGFwcHJvcHJpw6llcyA6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJGYWlsZWQgdG8gZWRpdCB0aGUgZmlsZSBzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeC4gU2VlIGJlbG93IGZvciBkZXRhaWxzLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuTm8gcmVwbGFjZW1lbnQgd2FzIHBlcmZvcm1lZCwgb2xkU3RyIGRpZCBub3QgYXBwZWFyIHZlcmJhdGltIGluIHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4LlxuVGhlIGNvbnRlbnQgaW4gdGhlIHNwZWNpZmllZCByZWdpb24gaXM6XG4gICAxMDhcdCAgICAgICAgICAgICAgKX1cbiAgIDEwOVx0XG4gICAxMTBcdCAgICAgICAgICAgICAgPEJvb2tFZGl0Rm9ybVxuICAgMTExXHQgICAgICAgICAgICAgICAgaW5pdGlhbERhdGE9e2Jvb2tEYXRhIHx8IHVuZGVmaW5lZH1cbiAgIDExMlx0ICAgICAgICAgICAgICAgIG9uU3VibWl0PXthc3luYyAoZGF0YSkgPT4ge1xuICAgMTEzXHRcbiAgIDExNFx0ICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgIDExNVx0ICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5pZCkge1xuICAgMTE2XHQgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJpc21hRGF0YSA9IHtcbiAgIDExN1x0ICAgICAgICAgICAgICAgICAgICAgICAgYXJyaXZhbFRpbWU6IGRhdGEuYXJyaXZhbFRpbWUsXG4gICAxMThcdCAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc0luc3RydWN0aW9uczogZGF0YS5hY2Nlc3NJbnN0cnVjdGlvbnMsXG4gICAxMTlcdCAgICAgICAgICAgICAgICAgICAgICAgIGFycml2YWxBZGRpdGlvbmFsSW5mbzogZGF0YS5hcnJpdmFsQWRkaXRpb25hbEluZm8sXG4gICAxMjBcdCAgICAgICAgICAgICAgICAgICAgICAgIGRlcGFydHVyZVRpbWU6IGRhdGEuZGVwYXJ0dXJlVGltZSxcbiAgIDEyMVx0ICAgICAgICAgICAgICAgICAgICAgICAgZXhpdEluc3RydWN0aW9uczogZGF0YS5leGl0SW5zdHJ1Y3Rpb25zLFxuICAgMTIyXHQgICAgICAgICAgICAgICAgICAgICAgICBkZXBhcnR1cmVBZGRpdGlvbmFsSW5mbzogZGF0YS5kZXBhcnR1cmVBZGRpdGlvbmFsSW5mbyxcbiAgIDEyM1x0ICAgICAgICAgICAgICAgICAgICAgICAgd2lmaU5hbWU6IGRhdGEud2lmaU5hbWUsXG4gICAxMjRcdCAgICAgICAgICAgICAgICAgICAgICAgIHdpZmlQYXNzd29yZDogZGF0YS53aWZpUGFzc3dvcmQsXG4gICAxMjVcdCAgICAgICAgICAgICAgICAgICAgICAgIGhvdXNlUnVsZXM6IGRhdGEuaG91c2VSdWxlcyxcbiAgIDEyNlx0ICAgICAgICAgICAgICAgICAgICAgICAgb3duZXJDb250YWN0OiBkYXRhLm93bmVyQ29udGFjdCxcbiAgIDEyN1x0ICAgICAgICAgICAgICAgICAgICAgICAgb3duZXJOYW1lOiBkYXRhLm93bmVyTmFtZSxcbiAgIDEyOFx0ICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbEluZm86IGRhdGEuZ2VuZXJhbEluZm8sXG4gICAxMjlcdCAgICAgICAgICAgICAgICAgICAgICAgIHJlY29tbWVuZGF0aW9uczoge1xuICAgMTMwXHQgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZU1hbnk6IHt9LFxuICAgMTMxXHQgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZTogZGF0YS5yZWNvbW1lbmRhdGlvbnMubWFwKHJlYyA9PiAoe1xuICAgMTMyXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcmVjLm5hbWUsXG4gICAxMzNcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiByZWMuYWRkcmVzcyB8fCAnJyxcbiAgIDEzNFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiByZWMuZGVzY3JpcHRpb24gfHwgJycsXG4gICAxMzVcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiByZWMudHlwZVxuICAgMTM2XHQgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgMTM3XHQgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAxMzhcdCAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgMTM5XHRcbiAgIDE0MFx0ICAgICAgICAgICAgICAgICAgICAgIC8vIEVudm95ZXIgdW5lIHJlcXXDqnRlIFBVVCBwb3VyIG1ldHRyZSDDoCBqb3VyIGxlcyBkb25uw6llc1xuICAgMTQxXHQgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wdXQoYGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMS9hcGkvc3RheS8ke2RhdGEuaWR9YCwgcHJpc21hRGF0YSk7XG4gICAxNDJcdFxuICAgMTQzXHQgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAxNDRcdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEb25uw6llcyBtaXNlcyDDoCBqb3VyIGF2ZWMgc3VjY8OoczonLCByZXNwb25zZS5kYXRhKTtcbiAgIDE0NVx0XG4gICAxNDZcdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ldHRyZSDDoCBqb3VyIGxlIHN0YXRlIGJvb2tEYXRhIGF2ZWMgbGVzIGRvbm7DqWVzIHLDqWN1cMOpcsOpZXNcbiAgIDE0N1x0ICAgICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEocmVzcG9uc2UuZGF0YSk7XG4gICAxNDhcdFxuICAgMTQ5XHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBTYXV2ZWdhcmRlciBsZXMgZG9ubsOpZXMgbWlzZXMgw6Agam91ciBkYW5zIGxlIGxvY2FsU3RvcmFnZVxuICAgMTUwXHQgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShyZXNwb25zZS5kYXRhKSk7XG4gICAxNTFcdFxuICAgMTUyXHQgICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgnTW9kaWZpY2F0aW9ucyBlbnJlZ2lzdHLDqWVzIGF2ZWMgc3VjY8OocyEnKTtcbiAgIDE1M1x0ICAgICAgICAgICAgICAgICAgICAgIH1cbiAgIDE1NFx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgMTU1XHQgICAgICAgICAgICAgICAgICAgICAgLy8gUGFzIGQnSUQsIGRvbmMgb24gbWV0IHNpbXBsZW1lbnQgw6Agam91ciBsZSBzdGF0ZVxuICAgMTU2XHQgICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEoZGF0YSk7XG4gICAxNTdcdCAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAxNThcdCAgICAgICAgICAgICAgICAgICAgICBhbGVydCgnTW9kaWZpY2F0aW9ucyBlbnJlZ2lzdHLDqWVzIGF2ZWMgc3VjY8OocyEnKTtcbiAgIDE1OVx0ICAgICAgICAgICAgICAgICAgICB9XG4gICAxNjBcdCAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxNjFcdCAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgbWlzZSDDoCBqb3VyIGRlcyBkb25uw6llczonLCBlcnJvcik7XG4gICAxNjJcdCAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1VuZSBlcnJldXIgZXN0IHN1cnZlbnVlIGxvcnMgZGUgbGEgbWlzZSDDoCBqb3VyIGRlcyBkb25uw6llcy4nKTtcbiAgIDE2M1x0ICAgICAgICAgICAgICAgICAgfVxuICAgMTY0XHQgICAgICAgICAgICAgICAgfX1cbiAgIDE2NVx0ICAgICAgICAgICAgICAvPlxuICAgMTY2XHQgICAgICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAxNjdcdCAgICAgICAgICAgICAgKX1cbiAgIDE2OFx0ICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAxNjlcdCAgICAgIDwvZGl2PlxuICAgMTcwXHRcbiAgIDE3MVx0ICAgICAgPHN0eWxlIGpzeCBnbG9iYWw+e2BcblxuRGlmZiBiZXR3ZWVuIG9sZFN0ciBhbmQgdGhlIHNwZWNpZmllZCByZWdpb24gaXM6XG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4tLS0gb2xkU3RyXG4rKysgcmVnaW9uQ29udGVudFxuQEAgLTEsOSArMSw3IEBAXG4gICAgICAgICAgICAgICAgIG9uU3VibWl0PXthc3luYyAoZGF0YSkgPT4ge1xuLSAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEb25uw6llcyBkdSBmb3JtdWxhaXJlIHNvdW1pc2VzOicsIGRhdGEpO1xuIFxuICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5pZCkge1xuLSAgICAgICAgICAgICAgICAgICAgICAvLyBQcsOpcGFyZXIgbGVzIGRvbm7DqWVzIHBvdXIgUHJpc21hXG4gICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByaXNtYURhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgYXJyaXZhbFRpbWU6IGRhdGEuYXJyaXZhbFRpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzSW5zdHJ1Y3Rpb25zOiBkYXRhLmFjY2Vzc0luc3RydWN0aW9ucyxcbkBAIC0xNyw5ICsxNSw4IEBAXG4gICAgICAgICAgICAgICAgICAgICAgICAgb3duZXJDb250YWN0OiBkYXRhLm93bmVyQ29udGFjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICBvd25lck5hbWU6IGRhdGEub3duZXJOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYWxJbmZvOiBkYXRhLmdlbmVyYWxJbmZvLFxuLSAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvcm1hdCBzcMOpY2lmaXF1ZSBwb3VyIGxlcyByZWxhdGlvbnMgZGFucyBQcmlzbWFcbiAgICAgICAgICAgICAgICAgICAgICAgICByZWNvbW1lbmRhdGlvbnM6IHtcbi0gICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZU1hbnk6IHt9LCAvLyBTdXBwcmltZXIgdG91dGVzIGxlcyByZWNvbW1hbmRhdGlvbnMgZXhpc3RhbnRlc1xuKyAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlTWFueToge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGU6IGRhdGEucmVjb21tZW5kYXRpb25zLm1hcChyZWMgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcmVjLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IHJlYy5hZGRyZXNzIHx8ICcnLFxuQEAgLTU0LDMgKzUxLDYgQEBcbiAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdVbmUgZXJyZXVyIGVzdCBzdXJ2ZW51ZSBsb3JzIGRlIGxhIG1pc2Ugw6Agam91ciBkZXMgZG9ubsOpZXMuJyk7XG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICB9fVxuKyAgICAgICAgICAgICAgLz5cbisgICAgICAgICAgICA8L21vdGlvbi5kaXY+XG4rICAgICAgICAgICAgICApfVxuXG5cbkZpeCBmYWlsZWQgc3RyX3JlcGxhY2VfZW50cmllcyBhY2NvcmRpbmdseSBhbmQgdHJ5IGFnYWluLlxuIiwiaXNfZXJyb3IiOnRydWUsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxRFlSVUVlbU56bTJFTUc1NFFOODZiZCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250IiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjMsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifX19XSwicmVzcG9uc2VfdGV4dCI6IkplIHZvaXMgcXVlIGxlIGNvbnRlbnUgZHUgZmljaGllciBhIGzDqWfDqHJlbWVudCBjaGFuZ8OpLiBFc3NheW9ucyBkZSB2b2lyIGxlIGNvbnRlbnUgYWN0dWVsIGV0IGRlIGZhaXJlIGxlcyBtb2RpZmljYXRpb25zIGFwcHJvcHJpw6llcyA6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiOGRmYmRlOWMtMTQ2MC00OWExLWIzNzUtMDBlY2E2MjUwYjIxIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMVR0Y0g2U3RNS3JjYkNvVDhlTTJ6elgiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInN0cl9yZXBsYWNlXCIsIFwicGF0aFwiOiBcInNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4XCIsIFwic3RyX3JlcGxhY2VfZW50cmllc1wiOiBbe1wib2xkX3N0clwiOiBcIiAgICAgICAgICAgICAgICBvblN1Ym1pdD17YXN5bmMgKGRhdGEpID0+IHtcXG5cXG4gICAgICAgICAgICAgICAgICB0cnkge1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaWQpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJpc21hRGF0YSA9IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJpdmFsVGltZTogZGF0YS5hcnJpdmFsVGltZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NJbnN0cnVjdGlvbnM6IGRhdGEuYWNjZXNzSW5zdHJ1Y3Rpb25zLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycml2YWxBZGRpdGlvbmFsSW5mbzogZGF0YS5hcnJpdmFsQWRkaXRpb25hbEluZm8sXFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVwYXJ0dXJlVGltZTogZGF0YS5kZXBhcnR1cmVUaW1lLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4aXRJbnN0cnVjdGlvbnM6IGRhdGEuZXhpdEluc3RydWN0aW9ucyxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXBhcnR1cmVBZGRpdGlvbmFsSW5mbzogZGF0YS5kZXBhcnR1cmVBZGRpdGlvbmFsSW5mbyxcXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWZpTmFtZTogZGF0YS53aWZpTmFtZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWZpUGFzc3dvcmQ6IGRhdGEud2lmaVBhc3N3b3JkLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdXNlUnVsZXM6IGRhdGEuaG91c2VSdWxlcyxcXG4gICAgICAgICAgICAgICAgICAgICAgICBvd25lckNvbnRhY3Q6IGRhdGEub3duZXJDb250YWN0LFxcbiAgICAgICAgICAgICAgICAgICAgICAgIG93bmVyTmFtZTogZGF0YS5vd25lck5hbWUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbEluZm86IGRhdGEuZ2VuZXJhbEluZm8sXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjb21tZW5kYXRpb25zOiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVNYW55OiB7fSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZTogZGF0YS5yZWNvbW1lbmRhdGlvbnMubWFwKHJlYyA9PiAoe1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiByZWMubmFtZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogcmVjLmFkZHJlc3MgfHwgJycsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiByZWMuZGVzY3JpcHRpb24gfHwgJycsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHJlYy50eXBlXFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KSlcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgIH07XFxuXFxuICAgICAgICAgICAgICAgICAgICAgIC8vIEVudm95ZXIgdW5lIHJlcXVcXHUwMGVhdGUgUFVUIHBvdXIgbWV0dHJlIFxcdTAwZTAgam91ciBsZXMgZG9ublxcdTAwZTllc1xcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnB1dChgaHR0cDovL2xvY2FsaG9zdDozMDAxL2FwaS9zdGF5LyR7ZGF0YS5pZH1gLCBwcmlzbWFEYXRhKTtcXG5cXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm5cXHUwMGU5ZXMgbWlzZXMgXFx1MDBlMCBqb3VyIGF2ZWMgc3VjY1xcdTAwZThzOicsIHJlc3BvbnNlLmRhdGEpO1xcblxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ldHRyZSBcXHUwMGUwIGpvdXIgbGUgc3RhdGUgYm9va0RhdGEgYXZlYyBsZXMgZG9ublxcdTAwZTllcyByXFx1MDBlOWN1cFxcdTAwZTlyXFx1MDBlOWVzXFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEocmVzcG9uc2UuZGF0YSk7XFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2F1dmVnYXJkZXIgbGVzIGRvbm5cXHUwMGU5ZXMgbWlzZXMgXFx1MDBlMCBqb3VyIGRhbnMgbGUgbG9jYWxTdG9yYWdlXFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuZGF0YSkpO1xcblxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdNb2RpZmljYXRpb25zIGVucmVnaXN0clxcdTAwZTllcyBhdmVjIHN1Y2NcXHUwMGU4cyEnKTtcXG4gICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgLy8gUGFzIGQnSUQsIGRvbmMgb24gbWV0IHNpbXBsZW1lbnQgXFx1MDBlMCBqb3VyIGxlIHN0YXRlXFxuICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xcbiAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XFxuICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdNb2RpZmljYXRpb25zIGVucmVnaXN0clxcdTAwZTllcyBhdmVjIHN1Y2NcXHUwMGU4cyEnKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgbWlzZSBcXHUwMGUwIGpvdXIgZGVzIGRvbm5cXHUwMGU5ZXM6JywgZXJyb3IpO1xcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1VuZSBlcnJldXIgZXN0IHN1cnZlbnVlIGxvcnMgZGUgbGEgbWlzZSBcXHUwMGUwIGpvdXIgZGVzIGRvbm5cXHUwMGU5ZXMuJyk7XFxuICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9fVwiLCBcIm5ld19zdHJcIjogXCIgICAgICAgICAgICAgICAgb25TdWJtaXQ9e2FzeW5jIChkYXRhLCByZXNldE1vZGlmaWVkU3RhdGUpID0+IHtcXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRG9ublxcdTAwZTllcyBkdSBmb3JtdWxhaXJlIHNvdW1pc2VzOicsIGRhdGEpO1xcblxcbiAgICAgICAgICAgICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5pZCkge1xcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmlzbWFEYXRhID0ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycml2YWxUaW1lOiBkYXRhLmFycml2YWxUaW1lLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc0luc3RydWN0aW9uczogZGF0YS5hY2Nlc3NJbnN0cnVjdGlvbnMsXFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyaXZhbEFkZGl0aW9uYWxJbmZvOiBkYXRhLmFycml2YWxBZGRpdGlvbmFsSW5mbyxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXBhcnR1cmVUaW1lOiBkYXRhLmRlcGFydHVyZVRpbWUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhpdEluc3RydWN0aW9uczogZGF0YS5leGl0SW5zdHJ1Y3Rpb25zLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlcGFydHVyZUFkZGl0aW9uYWxJbmZvOiBkYXRhLmRlcGFydHVyZUFkZGl0aW9uYWxJbmZvLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZmlOYW1lOiBkYXRhLndpZmlOYW1lLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZmlQYXNzd29yZDogZGF0YS53aWZpUGFzc3dvcmQsXFxuICAgICAgICAgICAgICAgICAgICAgICAgaG91c2VSdWxlczogZGF0YS5ob3VzZVJ1bGVzLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIG93bmVyQ29udGFjdDogZGF0YS5vd25lckNvbnRhY3QsXFxuICAgICAgICAgICAgICAgICAgICAgICAgb3duZXJOYW1lOiBkYXRhLm93bmVyTmFtZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmFsSW5mbzogZGF0YS5nZW5lcmFsSW5mbyxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZWNvbW1lbmRhdGlvbnM6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZU1hbnk6IHt9LFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlOiBkYXRhLnJlY29tbWVuZGF0aW9ucy5tYXAocmVjID0+ICh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHJlYy5uYW1lLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiByZWMuYWRkcmVzcyB8fCAnJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHJlYy5kZXNjcmlwdGlvbiB8fCAnJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogcmVjLnR5cGVcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgfTtcXG5cXG4gICAgICAgICAgICAgICAgICAgICAgLy8gRW52b3llciB1bmUgcmVxdVxcdTAwZWF0ZSBQVVQgcG91ciBtZXR0cmUgXFx1MDBlMCBqb3VyIGxlcyBkb25uXFx1MDBlOWVzXFxuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucHV0KGBodHRwOi8vbG9jYWxob3N0OjMwMDEvYXBpL3N0YXkvJHtkYXRhLmlkfWAsIHByaXNtYURhdGEpO1xcblxcbiAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRG9ublxcdTAwZTllcyBtaXNlcyBcXHUwMGUwIGpvdXIgYXZlYyBzdWNjXFx1MDBlOHM6JywgcmVzcG9uc2UuZGF0YSk7XFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWV0dHJlIFxcdTAwZTAgam91ciBsZSBzdGF0ZSBib29rRGF0YSBhdmVjIGxlcyBkb25uXFx1MDBlOWVzIHJcXHUwMGU5Y3VwXFx1MDBlOXJcXHUwMGU5ZXNcXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRCb29rRGF0YShyZXNwb25zZS5kYXRhKTtcXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTYXV2ZWdhcmRlciBsZXMgZG9ublxcdTAwZTllcyBtaXNlcyBcXHUwMGUwIGpvdXIgZGFucyBsZSBsb2NhbFN0b3JhZ2VcXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShyZXNwb25zZS5kYXRhKSk7XFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3RyXFx1MDBlOWVzIGF2ZWMgc3VjY1xcdTAwZThzIScpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJcXHUwMGU5aW5pdGlhbGlzZXIgbCdcXHUwMGU5dGF0IGlzTW9kaWZpZWQgZGFucyBsZSBjb21wb3NhbnQgZW5mYW50XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc2V0TW9kaWZpZWRTdGF0ZSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRNb2RpZmllZFN0YXRlKCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAvLyBQYXMgZCdJRCwgZG9uYyBvbiBtZXQgc2ltcGxlbWVudCBcXHUwMGUwIGpvdXIgbGUgc3RhdGVcXG4gICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEoZGF0YSk7XFxuICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdib29rRGF0YScsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcXG4gICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3RyXFx1MDBlOWVzIGF2ZWMgc3VjY1xcdTAwZThzIScpO1xcbiAgICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgICAgLy8gUlxcdTAwZTlpbml0aWFsaXNlciBsJ1xcdTAwZTl0YXQgaXNNb2RpZmllZCBkYW5zIGxlIGNvbXBvc2FudCBlbmZhbnRcXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc2V0TW9kaWZpZWRTdGF0ZSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TW9kaWZpZWRTdGF0ZSgpO1xcbiAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBsb3JzIGRlIGxhIG1pc2UgXFx1MDBlMCBqb3VyIGRlcyBkb25uXFx1MDBlOWVzOicsIGVycm9yKTtcXG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdVbmUgZXJyZXVyIGVzdCBzdXJ2ZW51ZSBsb3JzIGRlIGxhIG1pc2UgXFx1MDBlMCBqb3VyIGRlcyBkb25uXFx1MDBlOWVzLicpO1xcbiAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfX1cIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXCI6IDExMiwgXCJvbGRfc3RyX2VuZF9saW5lX251bWJlclwiOiAxNjR9XX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6Ik1haW50ZW5hbnQsIGZhaXNvbnMgbGVzIG1vZGlmaWNhdGlvbnMgYXBwcm9wcmnDqWVzIDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gc3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3g6XG4gICAxMTBcdCAgICAgICAgICAgICAgPEJvb2tFZGl0Rm9ybVxuICAgMTExXHQgICAgICAgICAgICAgICAgaW5pdGlhbERhdGE9e2Jvb2tEYXRhIHx8IHVuZGVmaW5lZH1cbiAgIDExMlx0ICAgICAgICAgICAgICAgIG9uU3VibWl0PXthc3luYyAoZGF0YSkgPT4ge1xuICAgMTEzXHRcbiAgIDExNFx0ICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgIDExNVx0ICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5pZCkge1xuICAgMTE2XHQgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJpc21hRGF0YSA9IHtcbiAgIDExN1x0ICAgICAgICAgICAgICAgICAgICAgICAgYXJyaXZhbFRpbWU6IGRhdGEuYXJyaXZhbFRpbWUsXG4gICAxMThcdCAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc0luc3RydWN0aW9uczogZGF0YS5hY2Nlc3NJbnN0cnVjdGlvbnMsXG4gICAxMTlcdCAgICAgICAgICAgICAgICAgICAgICAgIGFycml2YWxBZGRpdGlvbmFsSW5mbzogZGF0YS5hcnJpdmFsQWRkaXRpb25hbEluZm8sXG4gICAxMjBcdCAgICAgICAgICAgICAgICAgICAgICAgIGRlcGFydHVyZVRpbWU6IGRhdGEuZGVwYXJ0dXJlVGltZSxcbiAgIDEyMVx0ICAgICAgICAgICAgICAgICAgICAgICAgZXhpdEluc3RydWN0aW9uczogZGF0YS5leGl0SW5zdHJ1Y3Rpb25zLFxuICAgMTIyXHQgICAgICAgICAgICAgICAgICAgICAgICBkZXBhcnR1cmVBZGRpdGlvbmFsSW5mbzogZGF0YS5kZXBhcnR1cmVBZGRpdGlvbmFsSW5mbyxcbiAgIDEyM1x0ICAgICAgICAgICAgICAgICAgICAgICAgd2lmaU5hbWU6IGRhdGEud2lmaU5hbWUsXG4gICAxMjRcdCAgICAgICAgICAgICAgICAgICAgICAgIHdpZmlQYXNzd29yZDogZGF0YS53aWZpUGFzc3dvcmQsXG4gICAxMjVcdCAgICAgICAgICAgICAgICAgICAgICAgIGhvdXNlUnVsZXM6IGRhdGEuaG91c2VSdWxlcyxcbiAgIDEyNlx0ICAgICAgICAgICAgICAgICAgICAgICAgb3duZXJDb250YWN0OiBkYXRhLm93bmVyQ29udGFjdCxcbiAgIDEyN1x0ICAgICAgICAgICAgICAgICAgICAgICAgb3duZXJOYW1lOiBkYXRhLm93bmVyTmFtZSxcbiAgIDEyOFx0ICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbEluZm86IGRhdGEuZ2VuZXJhbEluZm8sXG4gICAxMjlcdCAgICAgICAgICAgICAgICAgICAgICAgIHJlY29tbWVuZGF0aW9uczoge1xuICAgMTMwXHQgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZU1hbnk6IHt9LFxuICAgMTMxXHQgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZTogZGF0YS5yZWNvbW1lbmRhdGlvbnMubWFwKHJlYyA9PiAoe1xuICAgMTMyXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcmVjLm5hbWUsXG4gICAxMzNcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiByZWMuYWRkcmVzcyB8fCAnJyxcbiAgIDEzNFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiByZWMuZGVzY3JpcHRpb24gfHwgJycsXG4gICAxMzVcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiByZWMudHlwZVxuICAgMTM2XHQgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgMTM3XHQgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAxMzhcdCAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgMTM5XHRcbiAgIDE0MFx0ICAgICAgICAgICAgICAgICAgICAgIC8vIEVudm95ZXIgdW5lIHJlcXXDqnRlIFBVVCBwb3VyIG1ldHRyZSDDoCBqb3VyIGxlcyBkb25uw6llc1xuICAgMTQxXHQgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wdXQoYGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMS9hcGkvc3RheS8ke2RhdGEuaWR9YCwgcHJpc21hRGF0YSk7XG4gICAxNDJcdFxuICAgMTQzXHQgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAxNDRcdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEb25uw6llcyBtaXNlcyDDoCBqb3VyIGF2ZWMgc3VjY8OoczonLCByZXNwb25zZS5kYXRhKTtcbiAgIDE0NVx0XG4gICAxNDZcdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ldHRyZSDDoCBqb3VyIGxlIHN0YXRlIGJvb2tEYXRhIGF2ZWMgbGVzIGRvbm7DqWVzIHLDqWN1cMOpcsOpZXNcbiAgIDE0N1x0ICAgICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEocmVzcG9uc2UuZGF0YSk7XG4gICAxNDhcdFxuICAgMTQ5XHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBTYXV2ZWdhcmRlciBsZXMgZG9ubsOpZXMgbWlzZXMgw6Agam91ciBkYW5zIGxlIGxvY2FsU3RvcmFnZVxuICAgMTUwXHQgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShyZXNwb25zZS5kYXRhKSk7XG4gICAxNTFcdFxuICAgMTUyXHQgICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgnTW9kaWZpY2F0aW9ucyBlbnJlZ2lzdHLDqWVzIGF2ZWMgc3VjY8OocyEnKTtcbiAgIDE1M1x0ICAgICAgICAgICAgICAgICAgICAgIH1cbiAgIDE1NFx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgMTU1XHQgICAgICAgICAgICAgICAgICAgICAgLy8gUGFzIGQnSUQsIGRvbmMgb24gbWV0IHNpbXBsZW1lbnQgw6Agam91ciBsZSBzdGF0ZVxuICAgMTU2XHQgICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEoZGF0YSk7XG4gICAxNTdcdCAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAxNThcdCAgICAgICAgICAgICAgICAgICAgICBhbGVydCgnTW9kaWZpY2F0aW9ucyBlbnJlZ2lzdHLDqWVzIGF2ZWMgc3VjY8OocyEnKTtcbiAgIDE1OVx0ICAgICAgICAgICAgICAgICAgICB9XG4gICAxNjBcdCAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxNjFcdCAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgbWlzZSDDoCBqb3VyIGRlcyBkb25uw6llczonLCBlcnJvcik7XG4gICAxNjJcdCAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1VuZSBlcnJldXIgZXN0IHN1cnZlbnVlIGxvcnMgZGUgbGEgbWlzZSDDoCBqb3VyIGRlcyBkb25uw6llcy4nKTtcbiAgIDE2M1x0ICAgICAgICAgICAgICAgICAgfVxuICAgMTY0XHQgICAgICAgICAgICAgICAgfX1cbiAgIDE2NVx0ICAgICAgICAgICAgICAvPlxuVG90YWwgbGluZXMgaW4gZmlsZTogMTgyXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxN2kyQVV3cDhXTER1enNjOEtyWjlIYiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250IiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjMsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifX19XSwicmVzcG9uc2VfdGV4dCI6Ik1haW50ZW5hbnQsIGZhaXNvbnMgbGVzIG1vZGlmaWNhdGlvbnMgYXBwcm9wcmnDqWVzIDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI3NzFjMWYwMi05ZGVkLTQ4NzctOWE4ZS05NmYxNDMzYWI2OTUiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJQYXJmYWl0ICEgTGVzIG1vZGlmaWNhdGlvbnMgb250IMOpdMOpIGVmZmVjdHXDqWVzIGF2ZWMgc3VjY8Oocy4gVm9pY2kgdW4gcsOpc3Vtw6kgZGVzIGNoYW5nZW1lbnRzIGFwcG9ydMOpcyA6XG5cbiMjIyAxLiBEYW5zIGxlIGZpY2hpZXIgYHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3hgIDpcblxuMS4gTWlzZSDDoCBqb3VyIGRlIGwnaW50ZXJmYWNlIGBCb29rRWRpdEZvcm1Qcm9wc2AgcG91ciBpbmNsdXJlIHVuIHBhcmFtw6h0cmUgZGUgY2FsbGJhY2sgYHJlc2V0TW9kaWZpZWRTdGF0ZWAgZGFucyBsYSBmb25jdGlvbiBgb25TdWJtaXRgXG4yLiBNb2RpZmljYXRpb24gZGUgbGEgZm9uY3Rpb24gYGhhbmRsZUZvcm1TdWJtaXRgIHBvdXIgY3LDqWVyIHVuIGNhbGxiYWNrIGByZXNldE1vZGlmaWVkU3RhdGVgIHF1aSA6XG4gICAtIE1ldCBkaXJlY3RlbWVudCDDoCBqb3VyIGwnw6l0YXQgYGlzTW9kaWZpZWRgIMOgIGBmYWxzZWBcbiAgIC0gTWV0IMOgIGpvdXIgbGVzIHZhbGV1cnMgb3JpZ2luYWxlcyBhdmVjIGxlcyBub3V2ZWxsZXMgZG9ubsOpZXNcbjMuIFBhc3NhZ2UgZGUgY2UgY2FsbGJhY2sgYXUgY29tcG9zYW50IHBhcmVudCB2aWEgbGEgZm9uY3Rpb24gYG9uU3VibWl0YFxuXG4jIyMgMi4gRGFucyBsZSBmaWNoaWVyIGBzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeGAgOlxuXG4xLiBNaXNlIMOgIGpvdXIgZGUgbGEgZm9uY3Rpb24gYG9uU3VibWl0YCBwb3VyIGFjY2VwdGVyIGxlIHBhcmFtw6h0cmUgYHJlc2V0TW9kaWZpZWRTdGF0ZWBcbjIuIEFwcGVsIGR1IGNhbGxiYWNrIGByZXNldE1vZGlmaWVkU3RhdGVgIGFwcsOocyB1bmUgbWlzZSDDoCBqb3VyIHLDqXVzc2llIGRlcyBkb25uw6llc1xuXG5DZXR0ZSBhcHByb2NoZSBlc3QgcGx1cyByb2J1c3RlIGNhciA6XG4xLiBFbGxlIHV0aWxpc2UgdW4gY2FsbGJhY2sgZXhwbGljaXRlIHBvdXIgcsOpaW5pdGlhbGlzZXIgbCfDqXRhdCBgaXNNb2RpZmllZGAgYXByw6hzIHVuZSBtaXNlIMOgIGpvdXIgcsOpdXNzaWVcbjIuIEVsbGUgZ2FyYW50aXQgcXVlIGxhIHLDqWluaXRpYWxpc2F0aW9uIHNlIHByb2R1aXQgYXUgYm9uIG1vbWVudCwgYXByw6hzIHF1ZSBsZXMgZG9ubsOpZXMgYWllbnQgw6l0w6kgbWlzZXMgw6Agam91ciBhdmVjIHN1Y2PDqHNcbjMuIEVsbGUgbWFpbnRpZW50IHVuZSBzw6lwYXJhdGlvbiBjbGFpcmUgZGVzIHJlc3BvbnNhYmlsaXTDqXMgZW50cmUgbGVzIGNvbXBvc2FudHNcblxuTWFpbnRlbmFudCwgbG9yc3F1ZSB2b3VzIG1vZGlmaWV6IGxlIGZvcm11bGFpcmUgZXQgc291bWV0dGV6IGxlcyBtb2RpZmljYXRpb25zIDpcbjEuIExlcyBkb25uw6llcyBzb250IGVudm95w6llcyBhdSBiYWNrZW5kIGV0IG1pc2VzIMOgIGpvdXIgZGFucyBsYSBiYXNlIGRlIGRvbm7DqWVzXG4yLiBBcHLDqHMgdW5lIG1pc2Ugw6Agam91ciByw6l1c3NpZSwgbCfDqXRhdCBgaXNNb2RpZmllZGAgZXN0IHLDqWluaXRpYWxpc8OpIMOgIGBmYWxzZWBcbjMuIExlIGJvdXRvbiBhZmZpY2hlIFwiUmV0b3VyIMOgIGwnYWNjdWVpbFwiIHB1aXNxdWUgbGVzIGRvbm7DqWVzIHNvbnQgbWFpbnRlbmFudCDDoCBqb3VyXG40LiBTaSB2b3VzIGZhaXRlcyBkZSBub3V2ZWxsZXMgbW9kaWZpY2F0aW9ucywgbGUgYm91dG9uIGNoYW5nZXJhIMOgIG5vdXZlYXUgcG91ciBhZmZpY2hlciBcIkVucmVnaXN0cmVyIGxlcyBtb2RpZmljYXRpb25zXCJcblxuQ2V0dGUgc29sdXRpb24gZGV2cmFpdCByw6lzb3VkcmUgbGUgcHJvYmzDqG1lIHF1ZSB2b3VzIGF2ZXogc2lnbmFsw6ksIG/DuSBsZSBib3V0b24gcmVzdGFpdCBzdXIgXCJFbnJlZ2lzdHJlciBsZXMgbW9kaWZpY2F0aW9uc1wiIG3Dqm1lIGFwcsOocyB1bmUgbWlzZSDDoCBqb3VyIHLDqXVzc2llLlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeC5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgMTA4XHQgICAgICAgICAgICAgICl9XG4gICAxMDlcdFxuICAgMTEwXHQgICAgICAgICAgICAgIDxCb29rRWRpdEZvcm1cbiAgIDExMVx0ICAgICAgICAgICAgICAgIGluaXRpYWxEYXRhPXtib29rRGF0YSB8fCB1bmRlZmluZWR9XG4gICAxMTJcdCAgICAgICAgICAgICAgICBvblN1Ym1pdD17YXN5bmMgKGRhdGEsIHJlc2V0TW9kaWZpZWRTdGF0ZSkgPT4ge1xuICAgMTEzXHQgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRG9ubsOpZXMgZHUgZm9ybXVsYWlyZSBzb3VtaXNlczonLCBkYXRhKTtcbiAgIDExNFx0XG4gICAxMTVcdCAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAxMTZcdCAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaWQpIHtcbiAgIDExN1x0ICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByaXNtYURhdGEgPSB7XG4gICAxMThcdCAgICAgICAgICAgICAgICAgICAgICAgIGFycml2YWxUaW1lOiBkYXRhLmFycml2YWxUaW1lLFxuICAgMTE5XHQgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NJbnN0cnVjdGlvbnM6IGRhdGEuYWNjZXNzSW5zdHJ1Y3Rpb25zLFxuICAgMTIwXHQgICAgICAgICAgICAgICAgICAgICAgICBhcnJpdmFsQWRkaXRpb25hbEluZm86IGRhdGEuYXJyaXZhbEFkZGl0aW9uYWxJbmZvLFxuICAgMTIxXHQgICAgICAgICAgICAgICAgICAgICAgICBkZXBhcnR1cmVUaW1lOiBkYXRhLmRlcGFydHVyZVRpbWUsXG4gICAxMjJcdCAgICAgICAgICAgICAgICAgICAgICAgIGV4aXRJbnN0cnVjdGlvbnM6IGRhdGEuZXhpdEluc3RydWN0aW9ucyxcbiAgIDEyM1x0ICAgICAgICAgICAgICAgICAgICAgICAgZGVwYXJ0dXJlQWRkaXRpb25hbEluZm86IGRhdGEuZGVwYXJ0dXJlQWRkaXRpb25hbEluZm8sXG4gICAxMjRcdCAgICAgICAgICAgICAgICAgICAgICAgIHdpZmlOYW1lOiBkYXRhLndpZmlOYW1lLFxuICAgMTI1XHQgICAgICAgICAgICAgICAgICAgICAgICB3aWZpUGFzc3dvcmQ6IGRhdGEud2lmaVBhc3N3b3JkLFxuICAgMTI2XHQgICAgICAgICAgICAgICAgICAgICAgICBob3VzZVJ1bGVzOiBkYXRhLmhvdXNlUnVsZXMsXG4gICAxMjdcdCAgICAgICAgICAgICAgICAgICAgICAgIG93bmVyQ29udGFjdDogZGF0YS5vd25lckNvbnRhY3QsXG4gICAxMjhcdCAgICAgICAgICAgICAgICAgICAgICAgIG93bmVyTmFtZTogZGF0YS5vd25lck5hbWUsXG4gICAxMjlcdCAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYWxJbmZvOiBkYXRhLmdlbmVyYWxJbmZvLFxuICAgMTMwXHQgICAgICAgICAgICAgICAgICAgICAgICByZWNvbW1lbmRhdGlvbnM6IHtcbiAgIDEzMVx0ICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVNYW55OiB7fSxcbiAgIDEzMlx0ICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGU6IGRhdGEucmVjb21tZW5kYXRpb25zLm1hcChyZWMgPT4gKHtcbiAgIDEzM1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHJlYy5uYW1lLFxuICAgMTM0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogcmVjLmFkZHJlc3MgfHwgJycsXG4gICAxMzVcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogcmVjLmRlc2NyaXB0aW9uIHx8ICcnLFxuICAgMTM2XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogcmVjLnR5cGVcbiAgIDEzN1x0ICAgICAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgIDEzOFx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgMTM5XHQgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgIDE0MFx0XG4gICAxNDFcdCAgICAgICAgICAgICAgICAgICAgICAvLyBFbnZveWVyIHVuZSByZXF1w6p0ZSBQVVQgcG91ciBtZXR0cmUgw6Agam91ciBsZXMgZG9ubsOpZXNcbiAgIDE0Mlx0ICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucHV0KGBodHRwOi8vbG9jYWxob3N0OjMwMDEvYXBpL3N0YXkvJHtkYXRhLmlkfWAsIHByaXNtYURhdGEpO1xuICAgMTQzXHRcbiAgIDE0NFx0ICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgMTQ1XHQgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRG9ubsOpZXMgbWlzZXMgw6Agam91ciBhdmVjIHN1Y2PDqHM6JywgcmVzcG9uc2UuZGF0YSk7XG4gICAxNDZcdFxuICAgMTQ3XHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBNZXR0cmUgw6Agam91ciBsZSBzdGF0ZSBib29rRGF0YSBhdmVjIGxlcyBkb25uw6llcyByw6ljdXDDqXLDqWVzXG4gICAxNDhcdCAgICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKHJlc3BvbnNlLmRhdGEpO1xuICAgMTQ5XHRcbiAgIDE1MFx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2F1dmVnYXJkZXIgbGVzIGRvbm7DqWVzIG1pc2VzIMOgIGpvdXIgZGFucyBsZSBsb2NhbFN0b3JhZ2VcbiAgIDE1MVx0ICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuZGF0YSkpO1xuICAgMTUyXHRcbiAgIDE1M1x0ICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3Ryw6llcyBhdmVjIHN1Y2PDqHMhJyk7XG4gICAxNTRcdFxuICAgMTU1XHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBSw6lpbml0aWFsaXNlciBsJ8OpdGF0IGlzTW9kaWZpZWQgZGFucyBsZSBjb21wb3NhbnQgZW5mYW50XG4gICAxNTZcdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNldE1vZGlmaWVkU3RhdGUpIHtcbiAgIDE1N1x0ICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldE1vZGlmaWVkU3RhdGUoKTtcbiAgIDE1OFx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgMTU5XHQgICAgICAgICAgICAgICAgICAgICAgfVxuICAgMTYwXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAxNjFcdCAgICAgICAgICAgICAgICAgICAgICAvLyBQYXMgZCdJRCwgZG9uYyBvbiBtZXQgc2ltcGxlbWVudCDDoCBqb3VyIGxlIHN0YXRlXG4gICAxNjJcdCAgICAgICAgICAgICAgICAgICAgICBzZXRCb29rRGF0YShkYXRhKTtcbiAgIDE2M1x0ICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdib29rRGF0YScsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgIDE2NFx0ICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdNb2RpZmljYXRpb25zIGVucmVnaXN0csOpZXMgYXZlYyBzdWNjw6hzIScpO1xuICAgMTY1XHRcbiAgIDE2Nlx0ICAgICAgICAgICAgICAgICAgICAgIC8vIFLDqWluaXRpYWxpc2VyIGwnw6l0YXQgaXNNb2RpZmllZCBkYW5zIGxlIGNvbXBvc2FudCBlbmZhbnRcbiAgIDE2N1x0ICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNldE1vZGlmaWVkU3RhdGUpIHtcbiAgIDE2OFx0ICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRNb2RpZmllZFN0YXRlKCk7XG4gICAxNjlcdCAgICAgICAgICAgICAgICAgICAgICB9XG4gICAxNzBcdCAgICAgICAgICAgICAgICAgICAgfVxuICAgMTcxXHQgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgMTcyXHQgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBsb3JzIGRlIGxhIG1pc2Ugw6Agam91ciBkZXMgZG9ubsOpZXM6JywgZXJyb3IpO1xuICAgMTczXHQgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdVbmUgZXJyZXVyIGVzdCBzdXJ2ZW51ZSBsb3JzIGRlIGxhIG1pc2Ugw6Agam91ciBkZXMgZG9ubsOpZXMuJyk7XG4gICAxNzRcdCAgICAgICAgICAgICAgICAgIH1cbiAgIDE3NVx0ICAgICAgICAgICAgICAgIH19XG4gICAxNzZcdCAgICAgICAgICAgICAgLz5cbiAgIDE3N1x0ICAgICAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMTc4XHQgICAgICAgICAgICAgICl9XG4gICAxNzlcdCAgICAgICAgPC9tb3Rpb24uZGl2PlxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxVHRjSDZTdE1LcmNiQ29UOGVNMnp6WCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250IiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjMsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifX19XSwicmVzcG9uc2VfdGV4dCI6IlBhcmZhaXQgISBMZXMgbW9kaWZpY2F0aW9ucyBvbnQgw6l0w6kgZWZmZWN0dcOpZXMgYXZlYyBzdWNjw6hzLiBWb2ljaSB1biByw6lzdW3DqSBkZXMgY2hhbmdlbWVudHMgYXBwb3J0w6lzIDpcblxuIyMjIDEuIERhbnMgbGUgZmljaGllciBgc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeGAgOlxuXG4xLiBNaXNlIMOgIGpvdXIgZGUgbCdpbnRlcmZhY2UgYEJvb2tFZGl0Rm9ybVByb3BzYCBwb3VyIGluY2x1cmUgdW4gcGFyYW3DqHRyZSBkZSBjYWxsYmFjayBgcmVzZXRNb2RpZmllZFN0YXRlYCBkYW5zIGxhIGZvbmN0aW9uIGBvblN1Ym1pdGBcbjIuIE1vZGlmaWNhdGlvbiBkZSBsYSBmb25jdGlvbiBgaGFuZGxlRm9ybVN1Ym1pdGAgcG91ciBjcsOpZXIgdW4gY2FsbGJhY2sgYHJlc2V0TW9kaWZpZWRTdGF0ZWAgcXVpIDpcbiAgIC0gTWV0IGRpcmVjdGVtZW50IMOgIGpvdXIgbCfDqXRhdCBgaXNNb2RpZmllZGAgw6AgYGZhbHNlYFxuICAgLSBNZXQgw6Agam91ciBsZXMgdmFsZXVycyBvcmlnaW5hbGVzIGF2ZWMgbGVzIG5vdXZlbGxlcyBkb25uw6llc1xuMy4gUGFzc2FnZSBkZSBjZSBjYWxsYmFjayBhdSBjb21wb3NhbnQgcGFyZW50IHZpYSBsYSBmb25jdGlvbiBgb25TdWJtaXRgXG5cbiMjIyAyLiBEYW5zIGxlIGZpY2hpZXIgYHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4YCA6XG5cbjEuIE1pc2Ugw6Agam91ciBkZSBsYSBmb25jdGlvbiBgb25TdWJtaXRgIHBvdXIgYWNjZXB0ZXIgbGUgcGFyYW3DqHRyZSBgcmVzZXRNb2RpZmllZFN0YXRlYFxuMi4gQXBwZWwgZHUgY2FsbGJhY2sgYHJlc2V0TW9kaWZpZWRTdGF0ZWAgYXByw6hzIHVuZSBtaXNlIMOgIGpvdXIgcsOpdXNzaWUgZGVzIGRvbm7DqWVzXG5cbkNldHRlIGFwcHJvY2hlIGVzdCBwbHVzIHJvYnVzdGUgY2FyIDpcbjEuIEVsbGUgdXRpbGlzZSB1biBjYWxsYmFjayBleHBsaWNpdGUgcG91ciByw6lpbml0aWFsaXNlciBsJ8OpdGF0IGBpc01vZGlmaWVkYCBhcHLDqHMgdW5lIG1pc2Ugw6Agam91ciByw6l1c3NpZVxuMi4gRWxsZSBnYXJhbnRpdCBxdWUgbGEgcsOpaW5pdGlhbGlzYXRpb24gc2UgcHJvZHVpdCBhdSBib24gbW9tZW50LCBhcHLDqHMgcXVlIGxlcyBkb25uw6llcyBhaWVudCDDqXTDqSBtaXNlcyDDoCBqb3VyIGF2ZWMgc3VjY8Ooc1xuMy4gRWxsZSBtYWludGllbnQgdW5lIHPDqXBhcmF0aW9uIGNsYWlyZSBkZXMgcmVzcG9uc2FiaWxpdMOpcyBlbnRyZSBsZXMgY29tcG9zYW50c1xuXG5NYWludGVuYW50LCBsb3JzcXVlIHZvdXMgbW9kaWZpZXogbGUgZm9ybXVsYWlyZSBldCBzb3VtZXR0ZXogbGVzIG1vZGlmaWNhdGlvbnMgOlxuMS4gTGVzIGRvbm7DqWVzIHNvbnQgZW52b3nDqWVzIGF1IGJhY2tlbmQgZXQgbWlzZXMgw6Agam91ciBkYW5zIGxhIGJhc2UgZGUgZG9ubsOpZXNcbjIuIEFwcsOocyB1bmUgbWlzZSDDoCBqb3VyIHLDqXVzc2llLCBsJ8OpdGF0IGBpc01vZGlmaWVkYCBlc3QgcsOpaW5pdGlhbGlzw6kgw6AgYGZhbHNlYFxuMy4gTGUgYm91dG9uIGFmZmljaGUgXCJSZXRvdXIgw6AgbCdhY2N1ZWlsXCIgcHVpc3F1ZSBsZXMgZG9ubsOpZXMgc29udCBtYWludGVuYW50IMOgIGpvdXJcbjQuIFNpIHZvdXMgZmFpdGVzIGRlIG5vdXZlbGxlcyBtb2RpZmljYXRpb25zLCBsZSBib3V0b24gY2hhbmdlcmEgw6Agbm91dmVhdSBwb3VyIGFmZmljaGVyIFwiRW5yZWdpc3RyZXIgbGVzIG1vZGlmaWNhdGlvbnNcIlxuXG5DZXR0ZSBzb2x1dGlvbiBkZXZyYWl0IHLDqXNvdWRyZSBsZSBwcm9ibMOobWUgcXVlIHZvdXMgYXZleiBzaWduYWzDqSwgb8O5IGxlIGJvdXRvbiByZXN0YWl0IHN1ciBcIkVucmVnaXN0cmVyIGxlcyBtb2RpZmljYXRpb25zXCIgbcOqbWUgYXByw6hzIHVuZSBtaXNlIMOgIGpvdXIgcsOpdXNzaWUuXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiIzMTY1ZDM2Mi1hZDQ1LTQyNDgtYjkwMy1iMzE0MmI4MWUwZDUiLCJ1dWlkIjoiMTA3NzVkZTctN2NkZC00MzA3LWI5NDQtMzA5MjljZjhiNTE3IiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy1jaGVja3BvaW50LWRlbGltaXRlciIsInN0YXR1cyI6InN1Y2Nlc3MiLCJmcm9tVGltZXN0YW1wIjoxNzQ0MzY4NzUyNzU0LCJ0b1RpbWVzdGFtcCI6MTc0NDM3MjQ1OTQ3Miwic2Vlbl9zdGF0ZSI6InNlZW4ifSx7InJlcXVlc3RfaWQiOiIzMzJmNzEyMi1lY2ZkLTRkNWItOWFmMS1jYWZjM2M5YTVkNDgiLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6Ijc4MjFjNDM2LTdiYzMtNGY4MC05MzY3LTU2YzliMDMzMzEwMSIsInJlcXVlc3RfbWVzc2FnZSI6InJlc2V0TW9kaWZpZWRTdGF0ZSBzZW1ibGUgbmUgcGFzIG1hcmNoZXIsIGplIHZldXggcXVlIGxvcnNxdWUgbGEgcmVxdWV0ZSBwdXQgZXN0IGVudm95w6kgZXQgc3VjY2VzcyBkYW5zIEBzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeCAsIGxhIGRvbm7DqWUgc29pdCBlbnZvecOpIGVuIHByb3BzIGEgQHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3ggIGV0IHF1ZSDDp2EgbWV0dGUgYSBqb3VyIGlzTW9kaWZpZWQiLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0IjoicmVzZXRNb2RpZmllZFN0YXRlIHNlbWJsZSBuZSBwYXMgbWFyY2hlciwgamUgdmV1eCBxdWUgbG9yc3F1ZSBsYSByZXF1ZXRlIHB1dCBlc3QgZW52b3nDqSBldCBzdWNjZXNzIGRhbnMgIn0seyJ0eXBlIjoibWVudGlvbiIsImF0dHJzIjp7ImlkIjoiL3NyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4IiwibGFiZWwiOiJwYWdlLnRzeCIsImRhdGEiOnsibGFiZWwiOiJwYWdlLnRzeCIsIm5hbWUiOiJzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeCIsImlkIjoiL3NyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3gifSwidHlwZSI6Iml0ZW0ifX19LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICwgbGEgZG9ubsOpZSBzb2l0IGVudm95w6kgZW4gcHJvcHMgYSAifSx7InR5cGUiOiJtZW50aW9uIiwiYXR0cnMiOnsiaWQiOiIvc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeCIsImxhYmVsIjoiQm9va0VkaXRGb3JtLnRzeCIsImRhdGEiOnsibGFiZWwiOiJCb29rRWRpdEZvcm0udHN4IiwibmFtZSI6InNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3giLCJpZCI6Ii9zcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeCJ9LCJ0eXBlIjoiaXRlbSJ9fX0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgIGV0IHF1ZSDDp2EgbWV0dGUgYSBqb3VyIGlzTW9kaWZpZWQifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W3sibGFiZWwiOiJwYWdlLnRzeCIsIm5hbWUiOiJzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeCIsImlkIjoiL3NyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3gifSwidHlwZSI6Iml0ZW0ifSx7ImxhYmVsIjoiQm9va0VkaXRGb3JtLnRzeCIsIm5hbWUiOiJzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4IiwiaWQiOiIvc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6InNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3gifSwidHlwZSI6Iml0ZW0ifV0sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDE5UVVLUWtkQnNEakRHbWg1aG9HMjRGIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4XCIsIFwic3RyX3JlcGxhY2VfZW50cmllc1wiOiBbe1wib2xkX3N0clwiOiBcIiAgdXNlRWZmZWN0KCgpID0+IHtcXG4gICAgLy8gU2F1dmVnYXJkZXIgbGVzIHZhbGV1cnMgaW5pdGlhbGVzIHBvdXIgY29tcGFyYWlzb25cXG4gICAgaWYgKCFvcmlnaW5hbFZhbHVlcykge1xcbiAgICAgIHNldE9yaWdpbmFsVmFsdWVzKEpTT04uc3RyaW5naWZ5KGNvbnZlcnRCb29rRGF0YVRvRm9ybVZhbHVlcyhpbml0aWFsRGF0YSkpKTtcXG4gICAgfVxcbiAgICBcXG4gICAgLy8gVlxcdTAwZTlyaWZpZXIgc2kgZGVzIG1vZGlmaWNhdGlvbnMgb250IFxcdTAwZTl0XFx1MDBlOSBhcHBvcnRcXHUwMGU5ZXNcXG4gICAgY29uc3QgY3VycmVudFZhbHVlcyA9IEpTT04uc3RyaW5naWZ5KGZvcm1WYWx1ZXMpO1xcbiAgICBzZXRJc01vZGlmaWVkKGN1cnJlbnRWYWx1ZXMgIT09IG9yaWdpbmFsVmFsdWVzKTtcXG4gIH0sIFtmb3JtVmFsdWVzLCBvcmlnaW5hbFZhbHVlcywgaW5pdGlhbERhdGFdKTtcIiwgXCJuZXdfc3RyXCI6IFwiICAvLyBFZmZldCBwb3VyIGluaXRpYWxpc2VyIGxlcyB2YWxldXJzIG9yaWdpbmFsZXNcXG4gIHVzZUVmZmVjdCgoKSA9PiB7XFxuICAgIC8vIENoYXF1ZSBmb2lzIHF1ZSBpbml0aWFsRGF0YSBjaGFuZ2UsIG1ldHRyZSBcXHUwMGUwIGpvdXIgbGVzIHZhbGV1cnMgb3JpZ2luYWxlc1xcbiAgICBjb25zdCBuZXdPcmlnaW5hbFZhbHVlcyA9IEpTT04uc3RyaW5naWZ5KGNvbnZlcnRCb29rRGF0YVRvRm9ybVZhbHVlcyhpbml0aWFsRGF0YSkpO1xcbiAgICBzZXRPcmlnaW5hbFZhbHVlcyhuZXdPcmlnaW5hbFZhbHVlcyk7XFxuICB9LCBbaW5pdGlhbERhdGFdKTtcXG4gIFxcbiAgLy8gRWZmZXQgcG91ciBkXFx1MDBlOXRlY3RlciBsZXMgbW9kaWZpY2F0aW9uc1xcbiAgdXNlRWZmZWN0KCgpID0+IHtcXG4gICAgaWYgKG9yaWdpbmFsVmFsdWVzKSB7XFxuICAgICAgLy8gVlxcdTAwZTlyaWZpZXIgc2kgZGVzIG1vZGlmaWNhdGlvbnMgb250IFxcdTAwZTl0XFx1MDBlOSBhcHBvcnRcXHUwMGU5ZXNcXG4gICAgICBjb25zdCBjdXJyZW50VmFsdWVzID0gSlNPTi5zdHJpbmdpZnkoZm9ybVZhbHVlcyk7XFxuICAgICAgc2V0SXNNb2RpZmllZChjdXJyZW50VmFsdWVzICE9PSBvcmlnaW5hbFZhbHVlcyk7XFxuICAgIH1cXG4gIH0sIFtmb3JtVmFsdWVzLCBvcmlnaW5hbFZhbHVlc10pO1wiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJcIjogODQsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJcIjogOTN9XX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkplIGNvbXByZW5kcyBsZSBwcm9ibMOobWUuIExhIGZvbmN0aW9uIGByZXNldE1vZGlmaWVkU3RhdGVgIG5lIGZvbmN0aW9ubmUgcGFzIGNvbW1lIHByw6l2dS4gVm91cyBzb3VoYWl0ZXogcXVlIGxvcnNxdWUgbGEgcmVxdcOqdGUgUFVUIGVzdCByw6l1c3NpZSBkYW5zIGxlIGNvbXBvc2FudCBwYXJlbnQsIGxlcyBkb25uw6llcyBtaXNlcyDDoCBqb3VyIHNvaWVudCBlbnZvecOpZXMgZW4gcHJvcHMgYXUgY29tcG9zYW50IGBCb29rRWRpdEZvcm0udHN4YCBldCBxdWUgY2VsYSBtZXR0ZSDDoCBqb3VyIGwnw6l0YXQgYGlzTW9kaWZpZWRgLlxuXG5Fc3NheW9ucyB1bmUgYXBwcm9jaGUgZGlmZsOpcmVudGUgZW4gdXRpbGlzYW50IGxlcyBwcm9wcyBldCBsZXMgZWZmZXRzIHBvdXIgcsOpc291ZHJlIGNlIHByb2Jsw6htZSA6XG5cbiMjIyAxLiBEJ2Fib3JkLCBtb2RpZmlvbnMgbGUgY29tcG9zYW50IEJvb2tFZGl0Rm9ybS50c3ggcG91ciBxdSdpbCByw6lhZ2lzc2UgYXV4IGNoYW5nZW1lbnRzIGRlIHByb3BzIDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjAsInRleHRfbm9kZSI6eyJjb250ZW50IjoicmVzZXRNb2RpZmllZFN0YXRlIHNlbWJsZSBuZSBwYXMgbWFyY2hlciwgamUgdmV1eCBxdWUgbG9yc3F1ZSBsYSByZXF1ZXRlIHB1dCBlc3QgZW52b3nDqSBldCBzdWNjZXNzIGRhbnMgQHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4ICwgbGEgZG9ubsOpZSBzb2l0IGVudm95w6kgZW4gcHJvcHMgYSBAc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeCAgZXQgcXVlIMOnYSBtZXR0ZSBhIGpvdXIgaXNNb2RpZmllZCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250IiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjMsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifX19XSwicmVzcG9uc2VfdGV4dCI6IkplIGNvbXByZW5kcyBsZSBwcm9ibMOobWUuIExhIGZvbmN0aW9uIGByZXNldE1vZGlmaWVkU3RhdGVgIG5lIGZvbmN0aW9ubmUgcGFzIGNvbW1lIHByw6l2dS4gVm91cyBzb3VoYWl0ZXogcXVlIGxvcnNxdWUgbGEgcmVxdcOqdGUgUFVUIGVzdCByw6l1c3NpZSBkYW5zIGxlIGNvbXBvc2FudCBwYXJlbnQsIGxlcyBkb25uw6llcyBtaXNlcyDDoCBqb3VyIHNvaWVudCBlbnZvecOpZXMgZW4gcHJvcHMgYXUgY29tcG9zYW50IGBCb29rRWRpdEZvcm0udHN4YCBldCBxdWUgY2VsYSBtZXR0ZSDDoCBqb3VyIGwnw6l0YXQgYGlzTW9kaWZpZWRgLlxuXG5Fc3NheW9ucyB1bmUgYXBwcm9jaGUgZGlmZsOpcmVudGUgZW4gdXRpbGlzYW50IGxlcyBwcm9wcyBldCBsZXMgZWZmZXRzIHBvdXIgcsOpc291ZHJlIGNlIHByb2Jsw6htZSA6XG5cbiMjIyAxLiBEJ2Fib3JkLCBtb2RpZmlvbnMgbGUgY29tcG9zYW50IEJvb2tFZGl0Rm9ybS50c3ggcG91ciBxdSdpbCByw6lhZ2lzc2UgYXV4IGNoYW5nZW1lbnRzIGRlIHByb3BzIDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIyMGUxMjAxNi02MmQ1LTQwN2UtYmQ1NS0yNDcyMjhjOGFjZjciLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxRjN2Zjc3TFJqYW91ZE1OazJuNzZZaSIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4XCIsIFwidmlld19yYW5nZVwiOiBbODAsIDk1XX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkplIHZvaXMgcXVlIGxlIGNvbnRlbnUgZHUgZmljaGllciBhIMOpdMOpIG1vZGlmacOpLiBWw6lyaWZpb25zIGxlIGNvbnRlbnUgYWN0dWVsIDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkZhaWxlZCB0byBlZGl0IHRoZSBmaWxlIHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3guIFNlZSBiZWxvdyBmb3IgZGV0YWlscy5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcbk5vIHJlcGxhY2VtZW50IHdhcyBwZXJmb3JtZWQsIG9sZFN0ciBkaWQgbm90IGFwcGVhciB2ZXJiYXRpbSBpbiBzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4LlxuVGhlIGNvbnRlbnQgaW4gdGhlIHNwZWNpZmllZCByZWdpb24gaXM6XG4gICAgODBcdCAgLy8gU3VydmVpbGxlciBsZXMgY2hhbmdlbWVudHMgZGFucyBsZSBmb3JtdWxhaXJlXG4gICAgODFcdCAgY29uc3QgZm9ybVZhbHVlcyA9IHdhdGNoKCk7XG4gICAgODJcdFxuICAgIDgzXHQgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgODRcdCAgICBpZiAoIW9yaWdpbmFsVmFsdWVzKSB7XG4gICAgODVcdCAgICAgIHNldE9yaWdpbmFsVmFsdWVzKEpTT04uc3RyaW5naWZ5KGNvbnZlcnRCb29rRGF0YVRvRm9ybVZhbHVlcyhpbml0aWFsRGF0YSkpKTtcbiAgICA4Nlx0ICAgIH1cbiAgICA4N1x0XG4gICAgODhcdCAgICBjb25zb2xlLmxvZygnZm9ybVZhbHVlcycsIGZvcm1WYWx1ZXMpO1xuICAgIDg5XHQgICAgY29uc3QgY3VycmVudFZhbHVlcyA9IEpTT04uc3RyaW5naWZ5KGZvcm1WYWx1ZXMpO1xuICAgIDkwXHQgICAgc2V0SXNNb2RpZmllZChjdXJyZW50VmFsdWVzICE9PSBvcmlnaW5hbFZhbHVlcyk7XG4gICAgOTFcdCAgfSwgW2Zvcm1WYWx1ZXMsIG9yaWdpbmFsVmFsdWVzLCBpbml0aWFsRGF0YV0pO1xuICAgIDkyXHRcbiAgICA5M1x0ICBjb25zdCBoYW5kbGVGb3JtU3VibWl0ID0gKGRhdGE6IEJvb2tGb3JtVmFsdWVzVHlwZSkgPT4ge1xuICAgIDk0XHQgICAgaWYgKCFpc01vZGlmaWVkKSB7XG4gICAgOTVcdCAgICAgIHJvdXRlci5wdXNoKCcvJyk7XG4gICAgOTZcdCAgICAgIHJldHVybjtcbiAgICA5N1x0ICAgIH1cblxuRGlmZiBiZXR3ZWVuIG9sZFN0ciBhbmQgdGhlIHNwZWNpZmllZCByZWdpb24gaXM6XG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4tLS0gb2xkU3RyXG4rKysgcmVnaW9uQ29udGVudFxuQEAgLTEsMTAgKzEsMTAgQEBcbi0gIHVzZUVmZmVjdCgoKSA9PiB7XG4tICAgIC8vIFNhdXZlZ2FyZGVyIGxlcyB2YWxldXJzIGluaXRpYWxlcyBwb3VyIGNvbXBhcmFpc29uXG4gICAgIGlmICghb3JpZ2luYWxWYWx1ZXMpIHtcbiAgICAgICBzZXRPcmlnaW5hbFZhbHVlcyhKU09OLnN0cmluZ2lmeShjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMoaW5pdGlhbERhdGEpKSk7XG4gICAgIH1cbiBcbi0gICAgLy8gVsOpcmlmaWVyIHNpIGRlcyBtb2RpZmljYXRpb25zIG9udCDDqXTDqSBhcHBvcnTDqWVzXG4rICAgIGNvbnNvbGUubG9nKCdmb3JtVmFsdWVzJywgZm9ybVZhbHVlcyk7XG4gICAgIGNvbnN0IGN1cnJlbnRWYWx1ZXMgPSBKU09OLnN0cmluZ2lmeShmb3JtVmFsdWVzKTtcbiAgICAgc2V0SXNNb2RpZmllZChjdXJyZW50VmFsdWVzICE9PSBvcmlnaW5hbFZhbHVlcyk7XG4gICB9LCBbZm9ybVZhbHVlcywgb3JpZ2luYWxWYWx1ZXMsIGluaXRpYWxEYXRhXSk7XG4rXG4rICBjb25zdCBoYW5kbGVGb3JtU3VibWl0ID0gKGRhdGE6IEJvb2tGb3JtVmFsdWVzVHlwZSkgPT4ge1xuXG5cbkZpeCBmYWlsZWQgc3RyX3JlcGxhY2VfZW50cmllcyBhY2NvcmRpbmdseSBhbmQgdHJ5IGFnYWluLlxuIiwiaXNfZXJyb3IiOnRydWUsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxOVFVS1FrZEJzRGpER21oNWhvRzI0RiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250IiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjMsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifX19XSwicmVzcG9uc2VfdGV4dCI6IkplIHZvaXMgcXVlIGxlIGNvbnRlbnUgZHUgZmljaGllciBhIMOpdMOpIG1vZGlmacOpLiBWw6lyaWZpb25zIGxlIGNvbnRlbnUgYWN0dWVsIDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI1NTUzNDIwMS00M2FlLTQ5YmUtOGViNS1mMzM3MWNhN2QzNDYiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxN2RGWFRqWlIyTjRWd3FWTkNrWTZZdSIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwic3RyX3JlcGxhY2VcIiwgXCJwYXRoXCI6IFwic3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeFwiLCBcInN0cl9yZXBsYWNlX2VudHJpZXNcIjogW3tcIm9sZF9zdHJcIjogXCIgIHVzZUVmZmVjdCgoKSA9PiB7XFxuICAgIGlmICghb3JpZ2luYWxWYWx1ZXMpIHtcXG4gICAgICBzZXRPcmlnaW5hbFZhbHVlcyhKU09OLnN0cmluZ2lmeShjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMoaW5pdGlhbERhdGEpKSk7XFxuICAgIH1cXG5cXG4gICAgY29uc29sZS5sb2coJ2Zvcm1WYWx1ZXMnLCBmb3JtVmFsdWVzKTtcXG4gICAgY29uc3QgY3VycmVudFZhbHVlcyA9IEpTT04uc3RyaW5naWZ5KGZvcm1WYWx1ZXMpO1xcbiAgICBzZXRJc01vZGlmaWVkKGN1cnJlbnRWYWx1ZXMgIT09IG9yaWdpbmFsVmFsdWVzKTtcXG4gIH0sIFtmb3JtVmFsdWVzLCBvcmlnaW5hbFZhbHVlcywgaW5pdGlhbERhdGFdKTtcIiwgXCJuZXdfc3RyXCI6IFwiICAvLyBFZmZldCBwb3VyIGluaXRpYWxpc2VyIGxlcyB2YWxldXJzIG9yaWdpbmFsZXNcXG4gIHVzZUVmZmVjdCgoKSA9PiB7XFxuICAgIC8vIENoYXF1ZSBmb2lzIHF1ZSBpbml0aWFsRGF0YSBjaGFuZ2UsIG1ldHRyZSBcXHUwMGUwIGpvdXIgbGVzIHZhbGV1cnMgb3JpZ2luYWxlc1xcbiAgICBjb25zdCBuZXdPcmlnaW5hbFZhbHVlcyA9IEpTT04uc3RyaW5naWZ5KGNvbnZlcnRCb29rRGF0YVRvRm9ybVZhbHVlcyhpbml0aWFsRGF0YSkpO1xcbiAgICBzZXRPcmlnaW5hbFZhbHVlcyhuZXdPcmlnaW5hbFZhbHVlcyk7XFxuICB9LCBbaW5pdGlhbERhdGFdKTtcXG4gIFxcbiAgLy8gRWZmZXQgcG91ciBkXFx1MDBlOXRlY3RlciBsZXMgbW9kaWZpY2F0aW9uc1xcbiAgdXNlRWZmZWN0KCgpID0+IHtcXG4gICAgaWYgKG9yaWdpbmFsVmFsdWVzKSB7XFxuICAgICAgLy8gVlxcdTAwZTlyaWZpZXIgc2kgZGVzIG1vZGlmaWNhdGlvbnMgb250IFxcdTAwZTl0XFx1MDBlOSBhcHBvcnRcXHUwMGU5ZXNcXG4gICAgICBjb25zdCBjdXJyZW50VmFsdWVzID0gSlNPTi5zdHJpbmdpZnkoZm9ybVZhbHVlcyk7XFxuICAgICAgc2V0SXNNb2RpZmllZChjdXJyZW50VmFsdWVzICE9PSBvcmlnaW5hbFZhbHVlcyk7XFxuICAgIH1cXG4gIH0sIFtmb3JtVmFsdWVzLCBvcmlnaW5hbFZhbHVlc10pO1wiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJcIjogODMsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJcIjogOTF9XX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6Ik1haW50ZW5hbnQsIGZhaXNvbnMgbGVzIG1vZGlmaWNhdGlvbnMgYXBwcm9wcmnDqWVzIDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeDpcbiAgICA4MFx0ICAvLyBTdXJ2ZWlsbGVyIGxlcyBjaGFuZ2VtZW50cyBkYW5zIGxlIGZvcm11bGFpcmVcbiAgICA4MVx0ICBjb25zdCBmb3JtVmFsdWVzID0gd2F0Y2goKTtcbiAgICA4Mlx0XG4gICAgODNcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICA4NFx0ICAgIGlmICghb3JpZ2luYWxWYWx1ZXMpIHtcbiAgICA4NVx0ICAgICAgc2V0T3JpZ2luYWxWYWx1ZXMoSlNPTi5zdHJpbmdpZnkoY29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzKGluaXRpYWxEYXRhKSkpO1xuICAgIDg2XHQgICAgfVxuICAgIDg3XHRcbiAgICA4OFx0ICAgIGNvbnNvbGUubG9nKCdmb3JtVmFsdWVzJywgZm9ybVZhbHVlcyk7XG4gICAgODlcdCAgICBjb25zdCBjdXJyZW50VmFsdWVzID0gSlNPTi5zdHJpbmdpZnkoZm9ybVZhbHVlcyk7XG4gICAgOTBcdCAgICBzZXRJc01vZGlmaWVkKGN1cnJlbnRWYWx1ZXMgIT09IG9yaWdpbmFsVmFsdWVzKTtcbiAgICA5MVx0ICB9LCBbZm9ybVZhbHVlcywgb3JpZ2luYWxWYWx1ZXMsIGluaXRpYWxEYXRhXSk7XG4gICAgOTJcdFxuICAgIDkzXHQgIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XG4gICAgOTRcdCAgICBpZiAoIWlzTW9kaWZpZWQpIHtcbiAgICA5NVx0ICAgICAgcm91dGVyLnB1c2goJy8nKTtcblRvdGFsIGxpbmVzIGluIGZpbGU6IDM2MlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMUYzdmY3N0xSamFvdWRNTmsybjc2WWkifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCIsImZvbGRlclJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjozLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In19fV0sInJlc3BvbnNlX3RleHQiOiJNYWludGVuYW50LCBmYWlzb25zIGxlcyBtb2RpZmljYXRpb25zIGFwcHJvcHJpw6llcyA6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiYzVlOWQxZWItZTA3ZC00MmIxLWFhZWMtZWRlNmM4NjIzMzY5IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMVc0OHBHaWJaTmtrV3kzV0xiWWJyYXgiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInN0cl9yZXBsYWNlXCIsIFwicGF0aFwiOiBcInNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3hcIiwgXCJzdHJfcmVwbGFjZV9lbnRyaWVzXCI6IFt7XCJvbGRfc3RyXCI6IFwiaW50ZXJmYWNlIEJvb2tFZGl0Rm9ybVByb3BzIHtcXG4gIGluaXRpYWxEYXRhPzogQm9va0RhdGE7XFxuICBvblN1Ym1pdD86IChkYXRhOiBCb29rRGF0YSwgcmVzZXRNb2RpZmllZFN0YXRlPzogKCkgPT4gdm9pZCkgPT4gdm9pZDtcXG59XCIsIFwibmV3X3N0clwiOiBcImludGVyZmFjZSBCb29rRWRpdEZvcm1Qcm9wcyB7XFxuICBpbml0aWFsRGF0YT86IEJvb2tEYXRhO1xcbiAgb25TdWJtaXQ/OiAoZGF0YTogQm9va0RhdGEpID0+IHZvaWQ7XFxufVwiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJcIjogNTMsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJcIjogNTZ9LCB7XCJvbGRfc3RyXCI6IFwiICBjb25zdCBoYW5kbGVGb3JtU3VibWl0ID0gKGRhdGE6IEJvb2tGb3JtVmFsdWVzVHlwZSkgPT4ge1xcbiAgICAvLyBTaSBhdWN1bmUgbW9kaWZpY2F0aW9uLCByZWRpcmlnZXIgdmVycyBsYSBwYWdlIGQnYWNjdWVpbFxcbiAgICBpZiAoIWlzTW9kaWZpZWQpIHtcXG4gICAgICByb3V0ZXIucHVzaCgnLycpO1xcbiAgICAgIHJldHVybjtcXG4gICAgfVxcbiAgICBcXG4gICAgLy8gU2kgZGVzIG1vZGlmaWNhdGlvbnMgb250IFxcdTAwZTl0XFx1MDBlOSBlZmZlY3R1XFx1MDBlOWVzLCBzb3VtZXR0cmUgbGVzIGRvbm5cXHUwMGU5ZXNcXG4gICAgc2V0SXNTYXZpbmcodHJ1ZSk7XFxuICAgIGNvbnN0IGJvb2tEYXRhID0gY29udmVydEZvcm1WYWx1ZXNUb0Jvb2tEYXRhKGRhdGEpO1xcbiAgICBcXG4gICAgaWYgKG9uU3VibWl0KSB7XFxuICAgICAgLy8gUGFzc2VyIGxlcyBkb25uXFx1MDBlOWVzIGF1IGNvbXBvc2FudCBwYXJlbnQgcXVpIGdcXHUwMGU4cmVyYSBsYSByZXF1XFx1MDBlYXRlIFBVVFxcbiAgICAgIG9uU3VibWl0KGJvb2tEYXRhKTtcXG4gICAgfVxcbiAgICBcXG4gICAgLy8gUlxcdTAwZTlpbml0aWFsaXNlciBsJ1xcdTAwZTl0YXQgZGUgc2F1dmVnYXJkZSBhcHJcXHUwMGU4cyB1biBjb3VydCBkXFx1MDBlOWxhaVxcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcXG4gICAgICBzZXRJc1NhdmluZyhmYWxzZSk7XFxuICAgIH0sIDEwMDApO1xcbiAgfTtcIiwgXCJuZXdfc3RyXCI6IFwiICBjb25zdCBoYW5kbGVGb3JtU3VibWl0ID0gKGRhdGE6IEJvb2tGb3JtVmFsdWVzVHlwZSkgPT4ge1xcbiAgICAvLyBTaSBhdWN1bmUgbW9kaWZpY2F0aW9uLCByZWRpcmlnZXIgdmVycyBsYSBwYWdlIGQnYWNjdWVpbFxcbiAgICBpZiAoIWlzTW9kaWZpZWQpIHtcXG4gICAgICByb3V0ZXIucHVzaCgnLycpO1xcbiAgICAgIHJldHVybjtcXG4gICAgfVxcbiAgICBcXG4gICAgLy8gU2kgZGVzIG1vZGlmaWNhdGlvbnMgb250IFxcdTAwZTl0XFx1MDBlOSBlZmZlY3R1XFx1MDBlOWVzLCBzb3VtZXR0cmUgbGVzIGRvbm5cXHUwMGU5ZXNcXG4gICAgc2V0SXNTYXZpbmcodHJ1ZSk7XFxuICAgIGNvbnN0IGJvb2tEYXRhID0gY29udmVydEZvcm1WYWx1ZXNUb0Jvb2tEYXRhKGRhdGEpO1xcbiAgICBcXG4gICAgaWYgKG9uU3VibWl0KSB7XFxuICAgICAgLy8gUGFzc2VyIGxlcyBkb25uXFx1MDBlOWVzIGF1IGNvbXBvc2FudCBwYXJlbnQgcXVpIGdcXHUwMGU4cmVyYSBsYSByZXF1XFx1MDBlYXRlIFBVVFxcbiAgICAgIG9uU3VibWl0KGJvb2tEYXRhKTtcXG4gICAgfVxcbiAgICBcXG4gICAgLy8gUlxcdTAwZTlpbml0aWFsaXNlciBsJ1xcdTAwZTl0YXQgZGUgc2F1dmVnYXJkZSBhcHJcXHUwMGU4cyB1biBjb3VydCBkXFx1MDBlOWxhaVxcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcXG4gICAgICBzZXRJc1NhdmluZyhmYWxzZSk7XFxuICAgIH0sIDEwMDApO1xcbiAgfTtcIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXCI6IDk5LCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXCI6IDExOX1dfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTWFpbnRlbmFudCwgc2ltcGxpZmlvbnMgbGEgZm9uY3Rpb24gYGhhbmRsZUZvcm1TdWJtaXRgIGV0IHN1cHByaW1vbnMgbGUgY2FsbGJhY2sgYHJlc2V0TW9kaWZpZWRTdGF0ZWAgcHVpc3F1ZSBub3VzIHV0aWxpc29ucyBtYWludGVuYW50IGxlcyBwcm9wcyBwb3VyIG1ldHRyZSDDoCBqb3VyIGwnw6l0YXQgOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgNzlcdFxuICAgIDgwXHQgIC8vIFN1cnZlaWxsZXIgbGVzIGNoYW5nZW1lbnRzIGRhbnMgbGUgZm9ybXVsYWlyZVxuICAgIDgxXHQgIGNvbnN0IGZvcm1WYWx1ZXMgPSB3YXRjaCgpO1xuICAgIDgyXHRcbiAgICA4M1x0ICAvLyBFZmZldCBwb3VyIGluaXRpYWxpc2VyIGxlcyB2YWxldXJzIG9yaWdpbmFsZXNcbiAgICA4NFx0ICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIDg1XHQgICAgLy8gQ2hhcXVlIGZvaXMgcXVlIGluaXRpYWxEYXRhIGNoYW5nZSwgbWV0dHJlIMOgIGpvdXIgbGVzIHZhbGV1cnMgb3JpZ2luYWxlc1xuICAgIDg2XHQgICAgY29uc3QgbmV3T3JpZ2luYWxWYWx1ZXMgPSBKU09OLnN0cmluZ2lmeShjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMoaW5pdGlhbERhdGEpKTtcbiAgICA4N1x0ICAgIHNldE9yaWdpbmFsVmFsdWVzKG5ld09yaWdpbmFsVmFsdWVzKTtcbiAgICA4OFx0ICB9LCBbaW5pdGlhbERhdGFdKTtcbiAgICA4OVx0XG4gICAgOTBcdCAgLy8gRWZmZXQgcG91ciBkw6l0ZWN0ZXIgbGVzIG1vZGlmaWNhdGlvbnNcbiAgICA5MVx0ICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIDkyXHQgICAgaWYgKG9yaWdpbmFsVmFsdWVzKSB7XG4gICAgOTNcdCAgICAgIC8vIFbDqXJpZmllciBzaSBkZXMgbW9kaWZpY2F0aW9ucyBvbnQgw6l0w6kgYXBwb3J0w6llc1xuICAgIDk0XHQgICAgICBjb25zdCBjdXJyZW50VmFsdWVzID0gSlNPTi5zdHJpbmdpZnkoZm9ybVZhbHVlcyk7XG4gICAgOTVcdCAgICAgIHNldElzTW9kaWZpZWQoY3VycmVudFZhbHVlcyAhPT0gb3JpZ2luYWxWYWx1ZXMpO1xuICAgIDk2XHQgICAgfVxuICAgIDk3XHQgIH0sIFtmb3JtVmFsdWVzLCBvcmlnaW5hbFZhbHVlc10pO1xuICAgIDk4XHRcbiAgICA5OVx0ICBjb25zdCBoYW5kbGVGb3JtU3VibWl0ID0gKGRhdGE6IEJvb2tGb3JtVmFsdWVzVHlwZSkgPT4ge1xuICAgMTAwXHQgICAgaWYgKCFpc01vZGlmaWVkKSB7XG4gICAxMDFcdCAgICAgIHJvdXRlci5wdXNoKCcvJyk7XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDE3ZEZYVGpaUjJONFZ3cVZOQ2tZNll1In19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQiLCJmb2xkZXJSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MywiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiTWFpbnRlbmFudCwgc2ltcGxpZmlvbnMgbGEgZm9uY3Rpb24gYGhhbmRsZUZvcm1TdWJtaXRgIGV0IHN1cHByaW1vbnMgbGUgY2FsbGJhY2sgYHJlc2V0TW9kaWZpZWRTdGF0ZWAgcHVpc3F1ZSBub3VzIHV0aWxpc29ucyBtYWludGVuYW50IGxlcyBwcm9wcyBwb3VyIG1ldHRyZSDDoCBqb3VyIGwnw6l0YXQgOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6Ijg5ZjRlYzEzLTcyNjMtNGMzMy1iMmM5LTBkZTM5MDQ3OGQyMCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFRRFFXREhycjZMWDJLNzVrOGNwazltIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4XCIsIFwic3RyX3JlcGxhY2VfZW50cmllc1wiOiBbe1wib2xkX3N0clwiOiBcIiAgY29uc3QgaGFuZGxlRm9ybVN1Ym1pdCA9IChkYXRhOiBCb29rRm9ybVZhbHVlc1R5cGUpID0+IHtcXG4gICAgaWYgKCFpc01vZGlmaWVkKSB7XFxuICAgICAgcm91dGVyLnB1c2goJy8nKTtcXG4gICAgICByZXR1cm47XFxuICAgIH1cXG5cXG4gICAgc2V0SXNTYXZpbmcodHJ1ZSk7XFxuICAgIGNvbnN0IGJvb2tEYXRhID0gY29udmVydEZvcm1WYWx1ZXNUb0Jvb2tEYXRhKGRhdGEpO1xcblxcbiAgICBpZiAob25TdWJtaXQpIHtcXG4gICAgICBjb25zdCByZXNldE1vZGlmaWVkU3RhdGUgPSAoKSA9PiB7XFxuICAgICAgICBzZXRJc01vZGlmaWVkKGZhbHNlKTtcXG4gICAgICAgIHNldE9yaWdpbmFsVmFsdWVzKEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcXG4gICAgICB9O1xcblxcbiAgICAgIG9uU3VibWl0KGJvb2tEYXRhLCByZXNldE1vZGlmaWVkU3RhdGUpO1xcbiAgICB9XFxuXFxuICAgICAgc2V0SXNTYXZpbmcoZmFsc2UpO1xcbiAgfTtcIiwgXCJuZXdfc3RyXCI6IFwiICBjb25zdCBoYW5kbGVGb3JtU3VibWl0ID0gKGRhdGE6IEJvb2tGb3JtVmFsdWVzVHlwZSkgPT4ge1xcbiAgICAvLyBTaSBhdWN1bmUgbW9kaWZpY2F0aW9uLCByZWRpcmlnZXIgdmVycyBsYSBwYWdlIGQnYWNjdWVpbFxcbiAgICBpZiAoIWlzTW9kaWZpZWQpIHtcXG4gICAgICByb3V0ZXIucHVzaCgnLycpO1xcbiAgICAgIHJldHVybjtcXG4gICAgfVxcbiAgICBcXG4gICAgLy8gU2kgZGVzIG1vZGlmaWNhdGlvbnMgb250IFxcdTAwZTl0XFx1MDBlOSBlZmZlY3R1XFx1MDBlOWVzLCBzb3VtZXR0cmUgbGVzIGRvbm5cXHUwMGU5ZXNcXG4gICAgc2V0SXNTYXZpbmcodHJ1ZSk7XFxuICAgIGNvbnN0IGJvb2tEYXRhID0gY29udmVydEZvcm1WYWx1ZXNUb0Jvb2tEYXRhKGRhdGEpO1xcbiAgICBcXG4gICAgaWYgKG9uU3VibWl0KSB7XFxuICAgICAgLy8gUGFzc2VyIGxlcyBkb25uXFx1MDBlOWVzIGF1IGNvbXBvc2FudCBwYXJlbnQgcXVpIGdcXHUwMGU4cmVyYSBsYSByZXF1XFx1MDBlYXRlIFBVVFxcbiAgICAgIG9uU3VibWl0KGJvb2tEYXRhKTtcXG4gICAgfVxcbiAgICBcXG4gICAgLy8gUlxcdTAwZTlpbml0aWFsaXNlciBsJ1xcdTAwZTl0YXQgZGUgc2F1dmVnYXJkZSBhcHJcXHUwMGU4cyB1biBjb3VydCBkXFx1MDBlOWxhaVxcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcXG4gICAgICBzZXRJc1NhdmluZyhmYWxzZSk7XFxuICAgIH0sIDEwMDApO1xcbiAgfTtcIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXCI6IDk5LCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXCI6IDExOH1dfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSmUgdm9pcyBxdWUgbGUgY29udGVudSBkZSBsYSBmb25jdGlvbiBgaGFuZGxlRm9ybVN1Ym1pdGAgYSDDqWdhbGVtZW50IMOpdMOpIG1vZGlmacOpLiBNZXR0b25zIMOgIGpvdXIgY2V0dGUgZm9uY3Rpb24gcG91ciBxdSdlbGxlIGNvcnJlc3BvbmRlIMOgIG5vdHJlIG5vdXZlbGxlIGFwcHJvY2hlIDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlBhcnRpYWxseSBlZGl0ZWQgdGhlIGZpbGUgc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeC4gU2VlIGJlbG93IGZvciBkZXRhaWxzLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuTm8gcmVwbGFjZW1lbnQgd2FzIHBlcmZvcm1lZCwgb2xkU3RyIGRpZCBub3QgYXBwZWFyIHZlcmJhdGltIGluIHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3guXG5UaGUgY29udGVudCBpbiB0aGUgc3BlY2lmaWVkIHJlZ2lvbiBpczpcbiAgICA5NVx0ICAgICAgc2V0SXNNb2RpZmllZChjdXJyZW50VmFsdWVzICE9PSBvcmlnaW5hbFZhbHVlcyk7XG4gICAgOTZcdCAgICB9XG4gICAgOTdcdCAgfSwgW2Zvcm1WYWx1ZXMsIG9yaWdpbmFsVmFsdWVzXSk7XG4gICAgOThcdFxuICAgIDk5XHQgIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XG4gICAxMDBcdCAgICBpZiAoIWlzTW9kaWZpZWQpIHtcbiAgIDEwMVx0ICAgICAgcm91dGVyLnB1c2goJy8nKTtcbiAgIDEwMlx0ICAgICAgcmV0dXJuO1xuICAgMTAzXHQgICAgfVxuICAgMTA0XHRcbiAgIDEwNVx0ICAgIHNldElzU2F2aW5nKHRydWUpO1xuICAgMTA2XHQgICAgY29uc3QgYm9va0RhdGEgPSBjb252ZXJ0Rm9ybVZhbHVlc1RvQm9va0RhdGEoZGF0YSk7XG4gICAxMDdcdFxuICAgMTA4XHQgICAgaWYgKG9uU3VibWl0KSB7XG4gICAxMDlcdCAgICAgIGNvbnN0IHJlc2V0TW9kaWZpZWRTdGF0ZSA9ICgpID0+IHtcbiAgIDExMFx0ICAgICAgICBzZXRJc01vZGlmaWVkKGZhbHNlKTtcbiAgIDExMVx0ICAgICAgICBzZXRPcmlnaW5hbFZhbHVlcyhKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAxMTJcdCAgICAgIH07XG4gICAxMTNcdFxuICAgMTE0XHQgICAgICBvblN1Ym1pdChib29rRGF0YSwgcmVzZXRNb2RpZmllZFN0YXRlKTtcbiAgIDExNVx0ICAgIH1cbiAgIDExNlx0XG4gICAxMTdcdCAgICAgIHNldElzU2F2aW5nKGZhbHNlKTtcbiAgIDExOFx0ICB9O1xuICAgMTE5XHRcbiAgIDEyMFx0ICBjb25zdCBoYW5kbGVSZXR1cm5Ib21lID0gKCkgPT4ge1xuICAgMTIxXHQgICAgcm91dGVyLnB1c2goJy8nKTtcbiAgIDEyMlx0ICB9O1xuICAgMTIzXHRcblxuRGlmZiBiZXR3ZWVuIG9sZFN0ciBhbmQgdGhlIHNwZWNpZmllZCByZWdpb24gaXM6XG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4tLS0gb2xkU3RyXG4rKysgcmVnaW9uQ29udGVudFxuQEAgLTEsMjEgKzEsMjEgQEBcbiAgIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XG4tICAgIC8vIFNpIGF1Y3VuZSBtb2RpZmljYXRpb24sIHJlZGlyaWdlciB2ZXJzIGxhIHBhZ2UgZCdhY2N1ZWlsXG4gICAgIGlmICghaXNNb2RpZmllZCkge1xuICAgICAgIHJvdXRlci5wdXNoKCcvJyk7XG4gICAgICAgcmV0dXJuO1xuICAgICB9XG4gXG4tICAgIC8vIFNpIGRlcyBtb2RpZmljYXRpb25zIG9udCDDqXTDqSBlZmZlY3R1w6llcywgc291bWV0dHJlIGxlcyBkb25uw6llc1xuICAgICBzZXRJc1NhdmluZyh0cnVlKTtcbiAgICAgY29uc3QgYm9va0RhdGEgPSBjb252ZXJ0Rm9ybVZhbHVlc1RvQm9va0RhdGEoZGF0YSk7XG4gXG4gICAgIGlmIChvblN1Ym1pdCkge1xuLSAgICAgIC8vIFBhc3NlciBsZXMgZG9ubsOpZXMgYXUgY29tcG9zYW50IHBhcmVudCBxdWkgZ8OocmVyYSBsYSByZXF1w6p0ZSBQVVRcbi0gICAgICBvblN1Ym1pdChib29rRGF0YSk7XG4rICAgICAgY29uc3QgcmVzZXRNb2RpZmllZFN0YXRlID0gKCkgPT4ge1xuKyAgICAgICAgc2V0SXNNb2RpZmllZChmYWxzZSk7XG4rICAgICAgICBzZXRPcmlnaW5hbFZhbHVlcyhKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4rICAgICAgfTtcbitcbisgICAgICBvblN1Ym1pdChib29rRGF0YSwgcmVzZXRNb2RpZmllZFN0YXRlKTtcbiAgICAgfVxuIFxuLSAgICAvLyBSw6lpbml0aWFsaXNlciBsJ8OpdGF0IGRlIHNhdXZlZ2FyZGUgYXByw6hzIHVuIGNvdXJ0IGTDqWxhaVxuLSAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICBzZXRJc1NhdmluZyhmYWxzZSk7XG4tICAgIH0sIDEwMDApO1xuICAgfTtcbitcblxuXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlX2VudHJpZXNbMV06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICA0OVx0ICAgIHJlY29tbWVuZGF0aW9uczogdmFsdWVzLnJlY29tbWVuZGF0aW9ucyB8fCBbXSxcbiAgICA1MFx0ICB9O1xuICAgIDUxXHR9O1xuICAgIDUyXHRcbiAgICA1M1x0aW50ZXJmYWNlIEJvb2tFZGl0Rm9ybVByb3BzIHtcbiAgICA1NFx0ICBpbml0aWFsRGF0YT86IEJvb2tEYXRhO1xuICAgIDU1XHQgIG9uU3VibWl0PzogKGRhdGE6IEJvb2tEYXRhKSA9PiB2b2lkO1xuICAgIDU2XHR9XG4gICAgNTdcdFxuICAgIDU4XHRleHBvcnQgZnVuY3Rpb24gQm9va0VkaXRGb3JtKHsgaW5pdGlhbERhdGEsIG9uU3VibWl0IH06IEJvb2tFZGl0Rm9ybVByb3BzKSB7XG4gICAgNTlcdCAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG4gICAgNjBcdCAgY29uc3QgW2lzU2F2aW5nLCBzZXRJc1NhdmluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbkZpeCBmYWlsZWQgc3RyX3JlcGxhY2VfZW50cmllcyBhY2NvcmRpbmdseSBhbmQgdHJ5IGFnYWluLlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMVc0OHBHaWJaTmtrV3kzV0xiWWJyYXgifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCIsImZvbGRlclJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjozLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In19fV0sInJlc3BvbnNlX3RleHQiOiJKZSB2b2lzIHF1ZSBsZSBjb250ZW51IGRlIGxhIGZvbmN0aW9uIGBoYW5kbGVGb3JtU3VibWl0YCBhIMOpZ2FsZW1lbnQgw6l0w6kgbW9kaWZpw6kuIE1ldHRvbnMgw6Agam91ciBjZXR0ZSBmb25jdGlvbiBwb3VyIHF1J2VsbGUgY29ycmVzcG9uZGUgw6Agbm90cmUgbm91dmVsbGUgYXBwcm9jaGUgOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImE1NGUxZTAyLThmOGQtNDg1Ni1iNDYzLWUxNWJkZmZjOWQzZCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDE1aXZCZG5ZMVFLUUFuYkZpOHV5YXh6IiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeFwiLCBcInN0cl9yZXBsYWNlX2VudHJpZXNcIjogW3tcIm9sZF9zdHJcIjogXCIgICAgICAgICAgICAgICAgb25TdWJtaXQ9e2FzeW5jIChkYXRhLCByZXNldE1vZGlmaWVkU3RhdGUpID0+IHtcIiwgXCJuZXdfc3RyXCI6IFwiICAgICAgICAgICAgICAgIG9uU3VibWl0PXthc3luYyAoZGF0YSkgPT4ge1wiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJcIjogMTEyLCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXCI6IDExMn0sIHtcIm9sZF9zdHJcIjogXCIgICAgICAgICAgICAgICAgICAgICAgICAvLyBSXFx1MDBlOWluaXRpYWxpc2VyIGwnXFx1MDBlOXRhdCBpc01vZGlmaWVkIGRhbnMgbGUgY29tcG9zYW50IGVuZmFudFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNldE1vZGlmaWVkU3RhdGUpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TW9kaWZpZWRTdGF0ZSgpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cIiwgXCJuZXdfc3RyXCI6IFwiICAgICAgICAgICAgICAgICAgICAgICAgLy8gTCdcXHUwMGU5dGF0IGlzTW9kaWZpZWQgc2VyYSByXFx1MDBlOWluaXRpYWxpc1xcdTAwZTkgYXV0b21hdGlxdWVtZW50IGdyXFx1MDBlMmNlIGF1eCBwcm9wc1wiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJcIjogMTU1LCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXCI6IDE1OH0sIHtcIm9sZF9zdHJcIjogXCIgICAgICAgICAgICAgICAgICAgICAgLy8gUlxcdTAwZTlpbml0aWFsaXNlciBsJ1xcdTAwZTl0YXQgaXNNb2RpZmllZCBkYW5zIGxlIGNvbXBvc2FudCBlbmZhbnRcXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc2V0TW9kaWZpZWRTdGF0ZSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TW9kaWZpZWRTdGF0ZSgpO1xcbiAgICAgICAgICAgICAgICAgICAgICB9XCIsIFwibmV3X3N0clwiOiBcIiAgICAgICAgICAgICAgICAgICAgICAvLyBMJ1xcdTAwZTl0YXQgaXNNb2RpZmllZCBzZXJhIHJcXHUwMGU5aW5pdGlhbGlzXFx1MDBlOSBhdXRvbWF0aXF1ZW1lbnQgZ3JcXHUwMGUyY2UgYXV4IHByb3BzXCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlclwiOiAxNjYsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJcIjogMTY5fV19In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJNYWludGVuYW50LCBtZXR0b25zIMOgIGpvdXIgbGUgY29tcG9zYW50IHBhcmVudCBwb3VyIHF1J2lsIG4ndXRpbGlzZSBwbHVzIGxlIGNhbGxiYWNrIGByZXNldE1vZGlmaWVkU3RhdGVgIDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeC5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgIDk1XHQgICAgICBzZXRJc01vZGlmaWVkKGN1cnJlbnRWYWx1ZXMgIT09IG9yaWdpbmFsVmFsdWVzKTtcbiAgICA5Nlx0ICAgIH1cbiAgICA5N1x0ICB9LCBbZm9ybVZhbHVlcywgb3JpZ2luYWxWYWx1ZXNdKTtcbiAgICA5OFx0XG4gICAgOTlcdCAgY29uc3QgaGFuZGxlRm9ybVN1Ym1pdCA9IChkYXRhOiBCb29rRm9ybVZhbHVlc1R5cGUpID0+IHtcbiAgIDEwMFx0ICAgIC8vIFNpIGF1Y3VuZSBtb2RpZmljYXRpb24sIHJlZGlyaWdlciB2ZXJzIGxhIHBhZ2UgZCdhY2N1ZWlsXG4gICAxMDFcdCAgICBpZiAoIWlzTW9kaWZpZWQpIHtcbiAgIDEwMlx0ICAgICAgcm91dGVyLnB1c2goJy8nKTtcbiAgIDEwM1x0ICAgICAgcmV0dXJuO1xuICAgMTA0XHQgICAgfVxuICAgMTA1XHRcbiAgIDEwNlx0ICAgIC8vIFNpIGRlcyBtb2RpZmljYXRpb25zIG9udCDDqXTDqSBlZmZlY3R1w6llcywgc291bWV0dHJlIGxlcyBkb25uw6llc1xuICAgMTA3XHQgICAgc2V0SXNTYXZpbmcodHJ1ZSk7XG4gICAxMDhcdCAgICBjb25zdCBib29rRGF0YSA9IGNvbnZlcnRGb3JtVmFsdWVzVG9Cb29rRGF0YShkYXRhKTtcbiAgIDEwOVx0XG4gICAxMTBcdCAgICBpZiAob25TdWJtaXQpIHtcbiAgIDExMVx0ICAgICAgLy8gUGFzc2VyIGxlcyBkb25uw6llcyBhdSBjb21wb3NhbnQgcGFyZW50IHF1aSBnw6hyZXJhIGxhIHJlcXXDqnRlIFBVVFxuICAgMTEyXHQgICAgICBvblN1Ym1pdChib29rRGF0YSk7XG4gICAxMTNcdCAgICB9XG4gICAxMTRcdFxuICAgMTE1XHQgICAgLy8gUsOpaW5pdGlhbGlzZXIgbCfDqXRhdCBkZSBzYXV2ZWdhcmRlIGFwcsOocyB1biBjb3VydCBkw6lsYWlcbiAgIDExNlx0ICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgMTE3XHQgICAgICBzZXRJc1NhdmluZyhmYWxzZSk7XG4gICAxMThcdCAgICB9LCAxMDAwKTtcbiAgIDExOVx0ICB9O1xuICAgMTIwXHRcbiAgIDEyMVx0ICBjb25zdCBoYW5kbGVSZXR1cm5Ib21lID0gKCkgPT4ge1xuICAgMTIyXHQgICAgcm91dGVyLnB1c2goJy8nKTtcbiAgIDEyM1x0ICB9O1xuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxUURRV0RIcnI2TFgySzc1azhjcGs5bSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250IiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjMsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifX19XSwicmVzcG9uc2VfdGV4dCI6Ik1haW50ZW5hbnQsIG1ldHRvbnMgw6Agam91ciBsZSBjb21wb3NhbnQgcGFyZW50IHBvdXIgcXUnaWwgbid1dGlsaXNlIHBsdXMgbGUgY2FsbGJhY2sgYHJlc2V0TW9kaWZpZWRTdGF0ZWAgOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjBhODA3M2YyLTU1OTItNDA3ZS04ZmJmLTc2NzZjZmFmMWExYSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IlBhcmZhaXQgISBMZXMgbW9kaWZpY2F0aW9ucyBvbnQgw6l0w6kgZWZmZWN0dcOpZXMgYXZlYyBzdWNjw6hzLiBWb2ljaSB1biByw6lzdW3DqSBkZXMgY2hhbmdlbWVudHMgYXBwb3J0w6lzIDpcblxuIyMjIDEuIERhbnMgbGUgZmljaGllciBgc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeGAgOlxuXG4xLiBTaW1wbGlmaWNhdGlvbiBkZSBsJ2ludGVyZmFjZSBgQm9va0VkaXRGb3JtUHJvcHNgIHBvdXIgcmV2ZW5pciDDoCBsYSB2ZXJzaW9uIG9yaWdpbmFsZSBzYW5zIGxlIGNhbGxiYWNrIGByZXNldE1vZGlmaWVkU3RhdGVgXG4yLiBTw6lwYXJhdGlvbiBkZSBsJ2VmZmV0IGB1c2VFZmZlY3RgIGVuIGRldXggZWZmZXRzIGRpc3RpbmN0cyA6XG4gICAtIFVuIGVmZmV0IHF1aSBtZXQgw6Agam91ciBsZXMgdmFsZXVycyBvcmlnaW5hbGVzIGNoYXF1ZSBmb2lzIHF1ZSBgaW5pdGlhbERhdGFgIGNoYW5nZVxuICAgLSBVbiBlZmZldCBxdWkgZMOpdGVjdGUgbGVzIG1vZGlmaWNhdGlvbnMgZW4gY29tcGFyYW50IGxlcyB2YWxldXJzIGFjdHVlbGxlcyBhdmVjIGxlcyB2YWxldXJzIG9yaWdpbmFsZXNcbjMuIFNpbXBsaWZpY2F0aW9uIGRlIGxhIGZvbmN0aW9uIGBoYW5kbGVGb3JtU3VibWl0YCBwb3VyIHF1J2VsbGUgbid1dGlsaXNlIHBsdXMgbGUgY2FsbGJhY2sgYHJlc2V0TW9kaWZpZWRTdGF0ZWBcblxuIyMjIDIuIERhbnMgbGUgZmljaGllciBgc3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3hgIDpcblxuMS4gTWlzZSDDoCBqb3VyIGRlIGxhIGZvbmN0aW9uIGBvblN1Ym1pdGAgcG91ciBxdSdlbGxlIG4ndXRpbGlzZSBwbHVzIGxlIHBhcmFtw6h0cmUgYHJlc2V0TW9kaWZpZWRTdGF0ZWBcbjIuIFJlbXBsYWNlbWVudCBkZXMgYXBwZWxzIMOgIGByZXNldE1vZGlmaWVkU3RhdGVgIHBhciBkZXMgY29tbWVudGFpcmVzIGV4cGxpcXVhbnQgcXVlIGwnw6l0YXQgYGlzTW9kaWZpZWRgIHNlcmEgcsOpaW5pdGlhbGlzw6kgYXV0b21hdGlxdWVtZW50IGdyw6JjZSBhdXggcHJvcHNcblxuQ2V0dGUgYXBwcm9jaGUgZXN0IHBsdXMgcm9idXN0ZSBjYXIgOlxuMS4gRWxsZSB1dGlsaXNlIGxlIHN5c3TDqG1lIGRlIHByb3BzIGRlIFJlYWN0IHBvdXIgcHJvcGFnZXIgbGVzIGNoYW5nZW1lbnRzXG4yLiBDaGFxdWUgZm9pcyBxdWUgYGluaXRpYWxEYXRhYCBjaGFuZ2UgZGFucyBsZSBjb21wb3NhbnQgcGFyZW50LCBsJ2VmZmV0IGRhbnMgbGUgY29tcG9zYW50IGVuZmFudCBtZXQgw6Agam91ciBsZXMgdmFsZXVycyBvcmlnaW5hbGVzXG4zLiBMb3JzcXVlIGxlcyB2YWxldXJzIG9yaWdpbmFsZXMgc29udCBtaXNlcyDDoCBqb3VyLCBsJ2VmZmV0IGRlIGTDqXRlY3Rpb24gZGVzIG1vZGlmaWNhdGlvbnMgcmVjYWxjdWxlIGwnw6l0YXQgYGlzTW9kaWZpZWRgXG5cbk1haW50ZW5hbnQsIGxvcnNxdWUgdm91cyBtb2RpZmlleiBsZSBmb3JtdWxhaXJlIGV0IHNvdW1ldHRleiBsZXMgbW9kaWZpY2F0aW9ucyA6XG4xLiBMZXMgZG9ubsOpZXMgc29udCBlbnZvecOpZXMgYXUgYmFja2VuZCBldCBtaXNlcyDDoCBqb3VyIGRhbnMgbGEgYmFzZSBkZSBkb25uw6llc1xuMi4gTGUgY29tcG9zYW50IHBhcmVudCBtZXQgw6Agam91ciBzb24gw6l0YXQgYGJvb2tEYXRhYCBhdmVjIGxlcyBkb25uw6llcyByw6ljdXDDqXLDqWVzXG4zLiBDZXMgbm91dmVsbGVzIGRvbm7DqWVzIHNvbnQgcGFzc8OpZXMgYXUgY29tcG9zYW50IGVuZmFudCB2aWEgbGEgcHJvcCBgaW5pdGlhbERhdGFgXG40LiBMJ2VmZmV0IGRhbnMgbGUgY29tcG9zYW50IGVuZmFudCBkw6l0ZWN0ZSBsZSBjaGFuZ2VtZW50IGRlIGBpbml0aWFsRGF0YWAgZXQgbWV0IMOgIGpvdXIgbGVzIHZhbGV1cnMgb3JpZ2luYWxlc1xuNS4gTCdlZmZldCBkZSBkw6l0ZWN0aW9uIGRlcyBtb2RpZmljYXRpb25zIHJlY2FsY3VsZSBsJ8OpdGF0IGBpc01vZGlmaWVkYCBldCBsZSBtZXQgw6AgYGZhbHNlYCBwdWlzcXVlIGxlcyB2YWxldXJzIGFjdHVlbGxlcyBjb3JyZXNwb25kZW50IG1haW50ZW5hbnQgYXV4IHZhbGV1cnMgb3JpZ2luYWxlc1xuNi4gTGUgYm91dG9uIGFmZmljaGUgXCJSZXRvdXIgw6AgbCdhY2N1ZWlsXCIgcHVpc3F1ZSBsZXMgZG9ubsOpZXMgc29udCBtYWludGVuYW50IMOgIGpvdXJcblxuQ2V0dGUgc29sdXRpb24gZGV2cmFpdCByw6lzb3VkcmUgbGUgcHJvYmzDqG1lIHF1ZSB2b3VzIGF2ZXogc2lnbmFsw6ksIG/DuSBsZSBib3V0b24gcmVzdGFpdCBzdXIgXCJFbnJlZ2lzdHJlciBsZXMgbW9kaWZpY2F0aW9uc1wiIG3Dqm1lIGFwcsOocyB1bmUgbWlzZSDDoCBqb3VyIHLDqXVzc2llLlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeC5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgMTA2XHQgICAgICAgICAgICAgICl9XG4gICAxMDdcdFxuICAgMTA4XHQgICAgICAgICAgICAgIDxCb29rRWRpdEZvcm1cbiAgIDEwOVx0ICAgICAgICAgICAgICAgIGluaXRpYWxEYXRhPXtib29rRGF0YSB8fCB1bmRlZmluZWR9XG4gICAxMTBcdCAgICAgICAgICAgICAgICBvblN1Ym1pdD17YXN5bmMgKGRhdGEpID0+IHtcbiAgIDExMVx0ICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm7DqWVzIGR1IGZvcm11bGFpcmUgc291bWlzZXM6JywgZGF0YSk7XG4gICAxMTJcdFxuICAgMTEzXHQgICAgICAgICAgICAgICAgICB0cnkge1xuICAgMTE0XHQgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmlkKSB7XG5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1sxXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgMTQ5XHQgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShyZXNwb25zZS5kYXRhKSk7XG4gICAxNTBcdFxuICAgMTUxXHQgICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgnTW9kaWZpY2F0aW9ucyBlbnJlZ2lzdHLDqWVzIGF2ZWMgc3VjY8OocyEnKTtcbiAgIDE1Mlx0XG4gICAxNTNcdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIEwnw6l0YXQgaXNNb2RpZmllZCBzZXJhIHLDqWluaXRpYWxpc8OpIGF1dG9tYXRpcXVlbWVudCBncsOiY2UgYXV4IHByb3BzXG4gICAxNTRcdCAgICAgICAgICAgICAgICAgICAgICB9XG4gICAxNTVcdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgIDE1Nlx0ICAgICAgICAgICAgICAgICAgICAgIC8vIFBhcyBkJ0lELCBkb25jIG9uIG1ldCBzaW1wbGVtZW50IMOgIGpvdXIgbGUgc3RhdGVcbiAgIDE1N1x0ICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xuXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlX2VudHJpZXNbMl06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgIDE1N1x0ICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xuICAgMTU4XHQgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgMTU5XHQgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3Ryw6llcyBhdmVjIHN1Y2PDqHMhJyk7XG4gICAxNjBcdFxuICAgMTYxXHQgICAgICAgICAgICAgICAgICAgICAgLy8gTCfDqXRhdCBpc01vZGlmaWVkIHNlcmEgcsOpaW5pdGlhbGlzw6kgYXV0b21hdGlxdWVtZW50IGdyw6JjZSBhdXggcHJvcHNcbiAgIDE2Mlx0ICAgICAgICAgICAgICAgICAgICB9XG4gICAxNjNcdCAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxNjRcdCAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgbWlzZSDDoCBqb3VyIGRlcyBkb25uw6llczonLCBlcnJvcik7XG4gICAxNjVcdCAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1VuZSBlcnJldXIgZXN0IHN1cnZlbnVlIGxvcnMgZGUgbGEgbWlzZSDDoCBqb3VyIGRlcyBkb25uw6llcy4nKTtcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMTVpdkJkblkxUUtRQW5iRmk4dXlheHoifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCIsImZvbGRlclJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjozLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In19fV0sInJlc3BvbnNlX3RleHQiOiJQYXJmYWl0ICEgTGVzIG1vZGlmaWNhdGlvbnMgb250IMOpdMOpIGVmZmVjdHXDqWVzIGF2ZWMgc3VjY8Oocy4gVm9pY2kgdW4gcsOpc3Vtw6kgZGVzIGNoYW5nZW1lbnRzIGFwcG9ydMOpcyA6XG5cbiMjIyAxLiBEYW5zIGxlIGZpY2hpZXIgYHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3hgIDpcblxuMS4gU2ltcGxpZmljYXRpb24gZGUgbCdpbnRlcmZhY2UgYEJvb2tFZGl0Rm9ybVByb3BzYCBwb3VyIHJldmVuaXIgw6AgbGEgdmVyc2lvbiBvcmlnaW5hbGUgc2FucyBsZSBjYWxsYmFjayBgcmVzZXRNb2RpZmllZFN0YXRlYFxuMi4gU8OpcGFyYXRpb24gZGUgbCdlZmZldCBgdXNlRWZmZWN0YCBlbiBkZXV4IGVmZmV0cyBkaXN0aW5jdHMgOlxuICAgLSBVbiBlZmZldCBxdWkgbWV0IMOgIGpvdXIgbGVzIHZhbGV1cnMgb3JpZ2luYWxlcyBjaGFxdWUgZm9pcyBxdWUgYGluaXRpYWxEYXRhYCBjaGFuZ2VcbiAgIC0gVW4gZWZmZXQgcXVpIGTDqXRlY3RlIGxlcyBtb2RpZmljYXRpb25zIGVuIGNvbXBhcmFudCBsZXMgdmFsZXVycyBhY3R1ZWxsZXMgYXZlYyBsZXMgdmFsZXVycyBvcmlnaW5hbGVzXG4zLiBTaW1wbGlmaWNhdGlvbiBkZSBsYSBmb25jdGlvbiBgaGFuZGxlRm9ybVN1Ym1pdGAgcG91ciBxdSdlbGxlIG4ndXRpbGlzZSBwbHVzIGxlIGNhbGxiYWNrIGByZXNldE1vZGlmaWVkU3RhdGVgXG5cbiMjIyAyLiBEYW5zIGxlIGZpY2hpZXIgYHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4YCA6XG5cbjEuIE1pc2Ugw6Agam91ciBkZSBsYSBmb25jdGlvbiBgb25TdWJtaXRgIHBvdXIgcXUnZWxsZSBuJ3V0aWxpc2UgcGx1cyBsZSBwYXJhbcOodHJlIGByZXNldE1vZGlmaWVkU3RhdGVgXG4yLiBSZW1wbGFjZW1lbnQgZGVzIGFwcGVscyDDoCBgcmVzZXRNb2RpZmllZFN0YXRlYCBwYXIgZGVzIGNvbW1lbnRhaXJlcyBleHBsaXF1YW50IHF1ZSBsJ8OpdGF0IGBpc01vZGlmaWVkYCBzZXJhIHLDqWluaXRpYWxpc8OpIGF1dG9tYXRpcXVlbWVudCBncsOiY2UgYXV4IHByb3BzXG5cbkNldHRlIGFwcHJvY2hlIGVzdCBwbHVzIHJvYnVzdGUgY2FyIDpcbjEuIEVsbGUgdXRpbGlzZSBsZSBzeXN0w6htZSBkZSBwcm9wcyBkZSBSZWFjdCBwb3VyIHByb3BhZ2VyIGxlcyBjaGFuZ2VtZW50c1xuMi4gQ2hhcXVlIGZvaXMgcXVlIGBpbml0aWFsRGF0YWAgY2hhbmdlIGRhbnMgbGUgY29tcG9zYW50IHBhcmVudCwgbCdlZmZldCBkYW5zIGxlIGNvbXBvc2FudCBlbmZhbnQgbWV0IMOgIGpvdXIgbGVzIHZhbGV1cnMgb3JpZ2luYWxlc1xuMy4gTG9yc3F1ZSBsZXMgdmFsZXVycyBvcmlnaW5hbGVzIHNvbnQgbWlzZXMgw6Agam91ciwgbCdlZmZldCBkZSBkw6l0ZWN0aW9uIGRlcyBtb2RpZmljYXRpb25zIHJlY2FsY3VsZSBsJ8OpdGF0IGBpc01vZGlmaWVkYFxuXG5NYWludGVuYW50LCBsb3JzcXVlIHZvdXMgbW9kaWZpZXogbGUgZm9ybXVsYWlyZSBldCBzb3VtZXR0ZXogbGVzIG1vZGlmaWNhdGlvbnMgOlxuMS4gTGVzIGRvbm7DqWVzIHNvbnQgZW52b3nDqWVzIGF1IGJhY2tlbmQgZXQgbWlzZXMgw6Agam91ciBkYW5zIGxhIGJhc2UgZGUgZG9ubsOpZXNcbjIuIExlIGNvbXBvc2FudCBwYXJlbnQgbWV0IMOgIGpvdXIgc29uIMOpdGF0IGBib29rRGF0YWAgYXZlYyBsZXMgZG9ubsOpZXMgcsOpY3Vww6lyw6llc1xuMy4gQ2VzIG5vdXZlbGxlcyBkb25uw6llcyBzb250IHBhc3PDqWVzIGF1IGNvbXBvc2FudCBlbmZhbnQgdmlhIGxhIHByb3AgYGluaXRpYWxEYXRhYFxuNC4gTCdlZmZldCBkYW5zIGxlIGNvbXBvc2FudCBlbmZhbnQgZMOpdGVjdGUgbGUgY2hhbmdlbWVudCBkZSBgaW5pdGlhbERhdGFgIGV0IG1ldCDDoCBqb3VyIGxlcyB2YWxldXJzIG9yaWdpbmFsZXNcbjUuIEwnZWZmZXQgZGUgZMOpdGVjdGlvbiBkZXMgbW9kaWZpY2F0aW9ucyByZWNhbGN1bGUgbCfDqXRhdCBgaXNNb2RpZmllZGAgZXQgbGUgbWV0IMOgIGBmYWxzZWAgcHVpc3F1ZSBsZXMgdmFsZXVycyBhY3R1ZWxsZXMgY29ycmVzcG9uZGVudCBtYWludGVuYW50IGF1eCB2YWxldXJzIG9yaWdpbmFsZXNcbjYuIExlIGJvdXRvbiBhZmZpY2hlIFwiUmV0b3VyIMOgIGwnYWNjdWVpbFwiIHB1aXNxdWUgbGVzIGRvbm7DqWVzIHNvbnQgbWFpbnRlbmFudCDDoCBqb3VyXG5cbkNldHRlIHNvbHV0aW9uIGRldnJhaXQgcsOpc291ZHJlIGxlIHByb2Jsw6htZSBxdWUgdm91cyBhdmV6IHNpZ25hbMOpLCBvw7kgbGUgYm91dG9uIHJlc3RhaXQgc3VyIFwiRW5yZWdpc3RyZXIgbGVzIG1vZGlmaWNhdGlvbnNcIiBtw6ptZSBhcHLDqHMgdW5lIG1pc2Ugw6Agam91ciByw6l1c3NpZS5cbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsicmVxdWVzdF9pZCI6IjZiNTM4MjJiLTRmZjktNGM2MC05ODEwLTUyODBlOGJmN2FiOSIsInV1aWQiOiJkMGM4NDFlYi1lMjc0LTRmM2UtOTM2ZS1hMTU0MDE5ZWU2Y2IiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLWNoZWNrcG9pbnQtZGVsaW1pdGVyIiwic3RhdHVzIjoic3VjY2VzcyIsImZyb21UaW1lc3RhbXAiOjE3NDQzNzI0NTk0NzIsInRvVGltZXN0YW1wIjoxNzQ0MzcyOTUxODU3LCJzZWVuX3N0YXRlIjoic2VlbiJ9LHsicmVxdWVzdF9pZCI6ImE3OWYwOWI0LWE2ZjMtNGE5MC04NjMyLTNhOTg3YjEwMzZmMCIsInN0YXR1cyI6ImNhbmNlbGxlZCIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtdHVybi1kZWxpbWl0ZXIifSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiNDBiYjMwNTktY2JiYy00OWU5LTgzOTktMmU2MTYyMGI5NWUzIiwicmVxdWVzdF9tZXNzYWdlIjoiICAgICAgc2V0SXNNb2RpZmllZChjdXJyZW50VmFsdWVzICE9PSBvcmlnaW5hbFZhbHVlcyk7XG5OZSBmb25jdGlvbm5lIHBhcyBtw6ptZSBzaSBsZXMgb2JqZXRzIHNvbnQgaWRlbnRpcXVlLCDDp2EgcmV0b3VybmUgdHJ1ZSIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgICBzZXRJc01vZGlmaWVkKGN1cnJlbnRWYWx1ZXMgIT09IG9yaWdpbmFsVmFsdWVzKTsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Ik5lIGZvbmN0aW9ubmUgcGFzIG3Dqm1lIHNpIGxlcyBvYmpldHMgc29udCBpZGVudGlxdWUsIMOnYSByZXRvdXJuZSB0cnVlIn1dfV19LCJtZW50aW9uZWRfaXRlbXMiOltdLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxRVVNODh0eFhETXFIYWNSS0V1TTV0WSIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwic3RyX3JlcGxhY2VcIiwgXCJwYXRoXCI6IFwic3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeFwiLCBcInN0cl9yZXBsYWNlX2VudHJpZXNcIjogW3tcIm9sZF9zdHJcIjogXCIgIC8vIEVmZmV0IHBvdXIgZFxcdTAwZTl0ZWN0ZXIgbGVzIG1vZGlmaWNhdGlvbnNcXG4gIHVzZUVmZmVjdCgoKSA9PiB7XFxuICAgIGlmIChvcmlnaW5hbFZhbHVlcykge1xcbiAgICAgIC8vIFZcXHUwMGU5cmlmaWVyIHNpIGRlcyBtb2RpZmljYXRpb25zIG9udCBcXHUwMGU5dFxcdTAwZTkgYXBwb3J0XFx1MDBlOWVzXFxuICAgICAgY29uc3QgY3VycmVudFZhbHVlcyA9IEpTT04uc3RyaW5naWZ5KGZvcm1WYWx1ZXMpO1xcbiAgICAgIHNldElzTW9kaWZpZWQoY3VycmVudFZhbHVlcyAhPT0gb3JpZ2luYWxWYWx1ZXMpO1xcbiAgICB9XFxuICB9LCBbZm9ybVZhbHVlcywgb3JpZ2luYWxWYWx1ZXNdKTtcIiwgXCJuZXdfc3RyXCI6IFwiICAvLyBFZmZldCBwb3VyIGRcXHUwMGU5dGVjdGVyIGxlcyBtb2RpZmljYXRpb25zXFxuICB1c2VFZmZlY3QoKCkgPT4ge1xcbiAgICBpZiAob3JpZ2luYWxWYWx1ZXMpIHtcXG4gICAgICB0cnkge1xcbiAgICAgICAgLy8gUGFyc2VyIGxlcyB2YWxldXJzIG9yaWdpbmFsZXNcXG4gICAgICAgIGNvbnN0IG9yaWdpbmFsT2JqID0gSlNPTi5wYXJzZShvcmlnaW5hbFZhbHVlcyk7XFxuICAgICAgICBcXG4gICAgICAgIC8vIENvbXBhcmVyIGxlcyBwcm9wcmlcXHUwMGU5dFxcdTAwZTlzIGltcG9ydGFudGVzIHVuZSBwYXIgdW5lXFxuICAgICAgICBjb25zdCBpc0NoYW5nZWQgPSAoXFxuICAgICAgICAgIGZvcm1WYWx1ZXMuYXJyaXZhbFRpbWUgIT09IG9yaWdpbmFsT2JqLmFycml2YWxUaW1lIHx8XFxuICAgICAgICAgIGZvcm1WYWx1ZXMuYWNjZXNzSW5zdHJ1Y3Rpb25zICE9PSBvcmlnaW5hbE9iai5hY2Nlc3NJbnN0cnVjdGlvbnMgfHxcXG4gICAgICAgICAgZm9ybVZhbHVlcy5hcnJpdmFsQWRkaXRpb25hbEluZm8gIT09IG9yaWdpbmFsT2JqLmFycml2YWxBZGRpdGlvbmFsSW5mbyB8fFxcbiAgICAgICAgICBmb3JtVmFsdWVzLmRlcGFydHVyZVRpbWUgIT09IG9yaWdpbmFsT2JqLmRlcGFydHVyZVRpbWUgfHxcXG4gICAgICAgICAgZm9ybVZhbHVlcy5leGl0SW5zdHJ1Y3Rpb25zICE9PSBvcmlnaW5hbE9iai5leGl0SW5zdHJ1Y3Rpb25zIHx8XFxuICAgICAgICAgIGZvcm1WYWx1ZXMuZGVwYXJ0dXJlQWRkaXRpb25hbEluZm8gIT09IG9yaWdpbmFsT2JqLmRlcGFydHVyZUFkZGl0aW9uYWxJbmZvIHx8XFxuICAgICAgICAgIGZvcm1WYWx1ZXMud2lmaU5hbWUgIT09IG9yaWdpbmFsT2JqLndpZmlOYW1lIHx8XFxuICAgICAgICAgIGZvcm1WYWx1ZXMud2lmaVBhc3N3b3JkICE9PSBvcmlnaW5hbE9iai53aWZpUGFzc3dvcmQgfHxcXG4gICAgICAgICAgZm9ybVZhbHVlcy5ob3VzZVJ1bGVzICE9PSBvcmlnaW5hbE9iai5ob3VzZVJ1bGVzIHx8XFxuICAgICAgICAgIGZvcm1WYWx1ZXMub3duZXJDb250YWN0ICE9PSBvcmlnaW5hbE9iai5vd25lckNvbnRhY3QgfHxcXG4gICAgICAgICAgZm9ybVZhbHVlcy5vd25lck5hbWUgIT09IG9yaWdpbmFsT2JqLm93bmVyTmFtZSB8fFxcbiAgICAgICAgICBmb3JtVmFsdWVzLmdlbmVyYWxJbmZvICE9PSBvcmlnaW5hbE9iai5nZW5lcmFsSW5mbyB8fFxcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeShmb3JtVmFsdWVzLnJlY29tbWVuZGF0aW9ucykgIT09IEpTT04uc3RyaW5naWZ5KG9yaWdpbmFsT2JqLnJlY29tbWVuZGF0aW9ucylcXG4gICAgICAgICk7XFxuICAgICAgICBcXG4gICAgICAgIC8vIE1ldHRyZSBcXHUwMGUwIGpvdXIgbCdcXHUwMGU5dGF0IGlzTW9kaWZpZWRcXG4gICAgICAgIHNldElzTW9kaWZpZWQoaXNDaGFuZ2VkKTtcXG4gICAgICAgIFxcbiAgICAgICAgLy8gRGVidWdcXG4gICAgICAgIGNvbnNvbGUubG9nKCdpc01vZGlmaWVkOicsIGlzQ2hhbmdlZCk7XFxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBsb3JzIGRlIGxhIGNvbXBhcmFpc29uIGRlcyBvYmpldHM6JywgZXJyb3IpO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfSwgW2Zvcm1WYWx1ZXMsIG9yaWdpbmFsVmFsdWVzXSk7XCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlclwiOiA5MCwgXCJvbGRfc3RyX2VuZF9saW5lX251bWJlclwiOiA5N31dfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSmUgY29tcHJlbmRzIGxlIHByb2Jsw6htZS4gTGEgY29tcGFyYWlzb24gZCdvYmpldHMgZW4gSmF2YVNjcmlwdCBhdmVjIGAhPT1gIG5lIGZvbmN0aW9ubmUgcGFzIGNvbW1lIHByw6l2dSBsb3JzcXUnaWwgcydhZ2l0IGRlIGNvbXBhcmVyIGRlcyBvYmpldHMgc8OpcmlhbGlzw6lzIGVuIEpTT04uIE3Dqm1lIHNpIGxlcyBvYmpldHMgc2VtYmxlbnQgaWRlbnRpcXVlcywgbGEgY29tcGFyYWlzb24gZGUgY2hhw65uZXMgcGV1dCDDqWNob3VlciBlbiByYWlzb24gZGUgZGlmZsOpcmVuY2VzIHN1YnRpbGVzIGNvbW1lIGwnb3JkcmUgZGVzIHByb3ByacOpdMOpcyBvdSBkZXMgZXNwYWNlcy5cblxuRXNzYXlvbnMgdW5lIGFwcHJvY2hlIHBsdXMgcm9idXN0ZSBwb3VyIGNvbXBhcmVyIGxlcyBvYmpldHMgOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiIgICAgICBzZXRJc01vZGlmaWVkKGN1cnJlbnRWYWx1ZXMgIT09IG9yaWdpbmFsVmFsdWVzKTtcbk5lIGZvbmN0aW9ubmUgcGFzIG3Dqm1lIHNpIGxlcyBvYmpldHMgc29udCBpZGVudGlxdWUsIMOnYSByZXRvdXJuZSB0cnVlIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQiLCJmb2xkZXJSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MywiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiSmUgY29tcHJlbmRzIGxlIHByb2Jsw6htZS4gTGEgY29tcGFyYWlzb24gZCdvYmpldHMgZW4gSmF2YVNjcmlwdCBhdmVjIGAhPT1gIG5lIGZvbmN0aW9ubmUgcGFzIGNvbW1lIHByw6l2dSBsb3JzcXUnaWwgcydhZ2l0IGRlIGNvbXBhcmVyIGRlcyBvYmpldHMgc8OpcmlhbGlzw6lzIGVuIEpTT04uIE3Dqm1lIHNpIGxlcyBvYmpldHMgc2VtYmxlbnQgaWRlbnRpcXVlcywgbGEgY29tcGFyYWlzb24gZGUgY2hhw65uZXMgcGV1dCDDqWNob3VlciBlbiByYWlzb24gZGUgZGlmZsOpcmVuY2VzIHN1YnRpbGVzIGNvbW1lIGwnb3JkcmUgZGVzIHByb3ByacOpdMOpcyBvdSBkZXMgZXNwYWNlcy5cblxuRXNzYXlvbnMgdW5lIGFwcHJvY2hlIHBsdXMgcm9idXN0ZSBwb3VyIGNvbXBhcmVyIGxlcyBvYmpldHMgOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImE0OTYzOTEwLTQxYTAtNDljNS05M2NhLWZiZDI5OGRjYjE1OCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDE3aEFFWEhoQUN1RWJSb0hWRkhiM0RXIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJ2aWV3XCIsIFwicGF0aFwiOiBcInNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3hcIiwgXCJ2aWV3X3JhbmdlXCI6IFs4MCwgMTEwXX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkplIHZvaXMgcXVlIGxlIGZpY2hpZXIgYSDDqXTDqSBtb2RpZmnDqSBkYXZhbnRhZ2UuIFbDqXJpZmlvbnMgbGUgY29udGVudSBhY3R1ZWwgOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiRmFpbGVkIHRvIGVkaXQgdGhlIGZpbGUgc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeC4gU2VlIGJlbG93IGZvciBkZXRhaWxzLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuTm8gcmVwbGFjZW1lbnQgd2FzIHBlcmZvcm1lZCwgb2xkU3RyIGRpZCBub3QgYXBwZWFyIHZlcmJhdGltIGluIHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3guXG5UaGUgY29udGVudCBpbiB0aGUgc3BlY2lmaWVkIHJlZ2lvbiBpczpcbiAgICA4Nlx0ICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIDg3XHQgICAgY29uc29sZS53YXJuKCdpbml0aWFsRGF0YScsIGluaXRpYWxEYXRhKVxuICAgIDg4XHQgICAgLy8gQ2hhcXVlIGZvaXMgcXVlIGluaXRpYWxEYXRhIGNoYW5nZSwgbWV0dHJlIMOgIGpvdXIgbGVzIHZhbGV1cnMgb3JpZ2luYWxlc1xuICAgIDg5XHQgICAgY29uc3QgbmV3T3JpZ2luYWxWYWx1ZXMgPSBKU09OLnN0cmluZ2lmeShjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMoaW5pdGlhbERhdGEpKTtcbiAgICA5MFx0ICAgIHNldE9yaWdpbmFsVmFsdWVzKG5ld09yaWdpbmFsVmFsdWVzKTtcbiAgICA5MVx0ICB9LCBbaW5pdGlhbERhdGFdKTtcbiAgICA5Mlx0XG4gICAgOTNcdCAgLy8gRWZmZXQgcG91ciBkw6l0ZWN0ZXIgbGVzIG1vZGlmaWNhdGlvbnNcbiAgICA5NFx0ICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIDk1XHQgICAgaWYgKG9yaWdpbmFsVmFsdWVzICYmIGZvcm1WYWx1ZXMpIHtcbiAgICA5Nlx0ICAgICAgLy8gU3VwcG9zb25zIHF1J29uIGEgcHLDqWFsYWJsZW1lbnQgbm9ybWFsaXPDqSBsZXMgdmFsZXVyc1xuICAgIDk3XHQgICAgICBjb25zdCBub3JtYWxpemVkT3JpZ2luYWwgPSBub3JtYWxpemVGbGlnaHREYXRhKGAke2NvbnZlcnRCb29rRGF0YVRvRm9ybVZhbHVlcyhpbml0aWFsRGF0YSl9YCk7XG4gICAgOThcdCAgICAgIGNvbnN0IG5vcm1hbGl6ZWRDdXJyZW50ID0gbm9ybWFsaXplRmxpZ2h0RGF0YShgJHtmb3JtVmFsdWVzfWApO1xuICAgIDk5XHQgICAgICBjb25zdCBtb2RpZmllZCA9ICFpc0VxdWFsKG5vcm1hbGl6ZWRDdXJyZW50LCBub3JtYWxpemVkT3JpZ2luYWwpO1xuICAgMTAwXHQgICAgICBjb25zb2xlLmxvZygnaXNNb2RpZmllZCcsIG1vZGlmaWVkKTtcbiAgIDEwMVx0ICAgICAgc2V0SXNNb2RpZmllZChtb2RpZmllZCk7XG5cbkRpZmYgYmV0d2VlbiBvbGRTdHIgYW5kIHRoZSBzcGVjaWZpZWQgcmVnaW9uIGlzOlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLS0tIG9sZFN0clxuKysrIHJlZ2lvbkNvbnRlbnRcbkBAIC0xLDggKzEsOCBAQFxuKyAgICBzZXRPcmlnaW5hbFZhbHVlcyhuZXdPcmlnaW5hbFZhbHVlcyk7XG4rICB9LCBbaW5pdGlhbERhdGFdKTtcbitcbiAgIC8vIEVmZmV0IHBvdXIgZMOpdGVjdGVyIGxlcyBtb2RpZmljYXRpb25zXG4gICB1c2VFZmZlY3QoKCkgPT4ge1xuLSAgICBpZiAob3JpZ2luYWxWYWx1ZXMpIHtcbi0gICAgICAvLyBWw6lyaWZpZXIgc2kgZGVzIG1vZGlmaWNhdGlvbnMgb250IMOpdMOpIGFwcG9ydMOpZXNcbi0gICAgICBjb25zdCBjdXJyZW50VmFsdWVzID0gSlNPTi5zdHJpbmdpZnkoZm9ybVZhbHVlcyk7XG4tICAgICAgc2V0SXNNb2RpZmllZChjdXJyZW50VmFsdWVzICE9PSBvcmlnaW5hbFZhbHVlcyk7XG4tICAgIH1cbi0gIH0sIFtmb3JtVmFsdWVzLCBvcmlnaW5hbFZhbHVlc10pO1xuKyAgICBpZiAob3JpZ2luYWxWYWx1ZXMgJiYgZm9ybVZhbHVlcykge1xuKyAgICAgIC8vIFN1cHBvc29ucyBxdSdvbiBhIHByw6lhbGFibGVtZW50IG5vcm1hbGlzw6kgbGVzIHZhbGV1cnNcbisgICAgICBjb25zdCBub3JtYWxpemVkT3JpZ2luYWwgPSBub3JtYWxpemVGbGlnaHREYXRhKGAke2NvbnZlcnRCb29rRGF0YVRvRm9ybVZhbHVlcyhpbml0aWFsRGF0YSl9YCk7XG5cblxuRml4IGZhaWxlZCBzdHJfcmVwbGFjZV9lbnRyaWVzIGFjY29yZGluZ2x5IGFuZCB0cnkgYWdhaW4uXG4iLCJpc19lcnJvciI6dHJ1ZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDFFVU04OHR4WERNcUhhY1JLRXVNNXRZIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQiLCJmb2xkZXJSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6MywiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiSmUgdm9pcyBxdWUgbGUgZmljaGllciBhIMOpdMOpIG1vZGlmacOpIGRhdmFudGFnZS4gVsOpcmlmaW9ucyBsZSBjb250ZW51IGFjdHVlbCA6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiOWE5NjkyNTItZTcwMi00ZDJiLWFmMzItYmNkODhjZTA2NWMxIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMTUzdkh3WUw2WGVnUGg5R3lTWVZLdTEiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInN0cl9yZXBsYWNlXCIsIFwicGF0aFwiOiBcInNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3hcIiwgXCJzdHJfcmVwbGFjZV9lbnRyaWVzXCI6IFt7XCJvbGRfc3RyXCI6IFwiJ3VzZSBjbGllbnQnO1xcblxcbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XFxuaW1wb3J0IHsgdXNlRm9ybSwgdXNlRmllbGRBcnJheSB9IGZyb20gJ3JlYWN0LWhvb2stZm9ybSc7XFxuaW1wb3J0IHsgem9kUmVzb2x2ZXIgfSBmcm9tICdAaG9va2Zvcm0vcmVzb2x2ZXJzL3pvZCc7XFxuaW1wb3J0IHsgQm9va0RhdGEgfSBmcm9tICdAL3R5cGVzL0Jvb2tEYXRhJztcXG5pbXBvcnQgeyBCb29rRm9ybVNjaGVtYSwgQm9va0Zvcm1WYWx1ZXNUeXBlIH0gZnJvbSAnLi9zY2hlbWFzL0Jvb2tGb3JtU2NoZW1hJztcXG5pbXBvcnQgSW5wdXRGb3JtIGZyb20gJy4vSW5wdXRGb3JtJztcXG5pbXBvcnQgeyBQbHVzQ2lyY2xlLCBQYWxtdHJlZSwgUGxhbmUsIEhvbWUsIE1hcFBpbiwgQXJyb3dMZWZ0IH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcXG5pbXBvcnQgUmVjb21tZW5kYXRpb24gZnJvbSAnLi9SZWNvbW1lbmRhdGlvbic7XFxuaW1wb3J0IHsgbW90aW9uIH0gZnJvbSAnZnJhbWVyLW1vdGlvbic7XFxuaW1wb3J0IHsgQWNjb3JkaW9uLCBBY2NvcmRpb25Db250ZW50LCBBY2NvcmRpb25JdGVtLCBBY2NvcmRpb25UcmlnZ2VyIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2FjY29yZGlvbic7XFxuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9uYXZpZ2F0aW9uJztcXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1wiLCBcIm5ld19zdHJcIjogXCIndXNlIGNsaWVudCc7XFxuXFxuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcXG5pbXBvcnQgeyB1c2VGb3JtLCB1c2VGaWVsZEFycmF5IH0gZnJvbSAncmVhY3QtaG9vay1mb3JtJztcXG5pbXBvcnQgeyB6b2RSZXNvbHZlciB9IGZyb20gJ0Bob29rZm9ybS9yZXNvbHZlcnMvem9kJztcXG5pbXBvcnQgeyBCb29rRGF0YSB9IGZyb20gJ0AvdHlwZXMvQm9va0RhdGEnO1xcbmltcG9ydCB7IEJvb2tGb3JtU2NoZW1hLCBCb29rRm9ybVZhbHVlc1R5cGUgfSBmcm9tICcuL3NjaGVtYXMvQm9va0Zvcm1TY2hlbWEnO1xcbmltcG9ydCBJbnB1dEZvcm0gZnJvbSAnLi9JbnB1dEZvcm0nO1xcbmltcG9ydCB7IFBsdXNDaXJjbGUsIFBhbG10cmVlLCBQbGFuZSwgSG9tZSwgTWFwUGluLCBBcnJvd0xlZnQgfSBmcm9tICdsdWNpZGUtcmVhY3QnO1xcbmltcG9ydCBSZWNvbW1lbmRhdGlvbiBmcm9tICcuL1JlY29tbWVuZGF0aW9uJztcXG5pbXBvcnQgeyBtb3Rpb24gfSBmcm9tICdmcmFtZXItbW90aW9uJztcXG5pbXBvcnQgeyBBY2NvcmRpb24sIEFjY29yZGlvbkNvbnRlbnQsIEFjY29yZGlvbkl0ZW0sIEFjY29yZGlvblRyaWdnZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvYWNjb3JkaW9uJztcXG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tICduZXh0L25hdmlnYXRpb24nO1xcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XFxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXCI6IDEsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJcIjogMTR9LCB7XCJvbGRfc3RyXCI6IFwiICAgICAgLy8gU3VwcG9zb25zIHF1J29uIGEgcHJcXHUwMGU5YWxhYmxlbWVudCBub3JtYWxpc1xcdTAwZTkgbGVzIHZhbGV1cnNcXG4gICAgICBjb25zdCBub3JtYWxpemVkT3JpZ2luYWwgPSBub3JtYWxpemVGbGlnaHREYXRhKGAke2NvbnZlcnRCb29rRGF0YVRvRm9ybVZhbHVlcyhpbml0aWFsRGF0YSl9YCk7XFxuICAgICAgY29uc3Qgbm9ybWFsaXplZEN1cnJlbnQgPSBub3JtYWxpemVGbGlnaHREYXRhKGAke2Zvcm1WYWx1ZXN9YCk7XFxuICAgICAgY29uc3QgbW9kaWZpZWQgPSAhaXNFcXVhbChub3JtYWxpemVkQ3VycmVudCwgbm9ybWFsaXplZE9yaWdpbmFsKTtcXG4gICAgICBjb25zb2xlLmxvZygnaXNNb2RpZmllZCcsIG1vZGlmaWVkKTtcXG4gICAgICBzZXRJc01vZGlmaWVkKG1vZGlmaWVkKTtcIiwgXCJuZXdfc3RyXCI6IFwiICAgICAgdHJ5IHtcXG4gICAgICAgIC8vIENvbXBhcmVyIGxlcyBvYmpldHMgZW4gaWdub3JhbnQgbGVzIHByb3ByaVxcdTAwZTl0XFx1MDBlOXMgbm9uIHBlcnRpbmVudGVzXFxuICAgICAgICBjb25zdCBvcmlnaW5hbE9iaiA9IEpTT04ucGFyc2Uob3JpZ2luYWxWYWx1ZXMpO1xcbiAgICAgICAgXFxuICAgICAgICAvLyBVdGlsaXNlciB1bmUgY29tcGFyYWlzb24gcHJvZm9uZGUgcG91ciBkXFx1MDBlOXRlY3RlciBsZXMgbW9kaWZpY2F0aW9uc1xcbiAgICAgICAgY29uc3QgbW9kaWZpZWQgPSAhXy5pc0VxdWFsKGZvcm1WYWx1ZXMsIG9yaWdpbmFsT2JqKTtcXG4gICAgICAgIGNvbnNvbGUubG9nKCdpc01vZGlmaWVkJywgbW9kaWZpZWQpO1xcbiAgICAgICAgc2V0SXNNb2RpZmllZChtb2RpZmllZCk7XFxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBsb3JzIGRlIGxhIGNvbXBhcmFpc29uIGRlcyBvYmpldHM6JywgZXJyb3IpO1xcbiAgICAgIH1cIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXCI6IDk2LCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXCI6IDEwMX1dfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSmUgdm9pcyBxdSdpbCB5IGEgZMOpasOgIHVuZSB0ZW50YXRpdmUgZGUgcsOpc29sdXRpb24gZHUgcHJvYmzDqG1lIGF2ZWMgZGVzIGZvbmN0aW9ucyBgbm9ybWFsaXplRmxpZ2h0RGF0YWAgZXQgYGlzRXF1YWxgIHF1aSBuZSBzb250IHBhcyBkw6lmaW5pZXMuIEFqb3V0b25zIGNlcyBmb25jdGlvbnMgZXQgY29ycmlnZW9ucyBsZSBjb2RlIDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeDpcbiAgICA4MFx0ICB9KTtcbiAgICA4MVx0XG4gICAgODJcdCAgLy8gU3VydmVpbGxlciBsZXMgY2hhbmdlbWVudHMgZGFucyBsZSBmb3JtdWxhaXJlXG4gICAgODNcdCAgY29uc3QgZm9ybVZhbHVlcyA9IHdhdGNoKCk7XG4gICAgODRcdFxuICAgIDg1XHQgIC8vIEVmZmV0IHBvdXIgaW5pdGlhbGlzZXIgbGVzIHZhbGV1cnMgb3JpZ2luYWxlc1xuICAgIDg2XHQgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgODdcdCAgICBjb25zb2xlLndhcm4oJ2luaXRpYWxEYXRhJywgaW5pdGlhbERhdGEpXG4gICAgODhcdCAgICAvLyBDaGFxdWUgZm9pcyBxdWUgaW5pdGlhbERhdGEgY2hhbmdlLCBtZXR0cmUgw6Agam91ciBsZXMgdmFsZXVycyBvcmlnaW5hbGVzXG4gICAgODlcdCAgICBjb25zdCBuZXdPcmlnaW5hbFZhbHVlcyA9IEpTT04uc3RyaW5naWZ5KGNvbnZlcnRCb29rRGF0YVRvRm9ybVZhbHVlcyhpbml0aWFsRGF0YSkpO1xuICAgIDkwXHQgICAgc2V0T3JpZ2luYWxWYWx1ZXMobmV3T3JpZ2luYWxWYWx1ZXMpO1xuICAgIDkxXHQgIH0sIFtpbml0aWFsRGF0YV0pO1xuICAgIDkyXHRcbiAgICA5M1x0ICAvLyBFZmZldCBwb3VyIGTDqXRlY3RlciBsZXMgbW9kaWZpY2F0aW9uc1xuICAgIDk0XHQgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgOTVcdCAgICBpZiAob3JpZ2luYWxWYWx1ZXMgJiYgZm9ybVZhbHVlcykge1xuICAgIDk2XHQgICAgICAvLyBTdXBwb3NvbnMgcXUnb24gYSBwcsOpYWxhYmxlbWVudCBub3JtYWxpc8OpIGxlcyB2YWxldXJzXG4gICAgOTdcdCAgICAgIGNvbnN0IG5vcm1hbGl6ZWRPcmlnaW5hbCA9IG5vcm1hbGl6ZUZsaWdodERhdGEoYCR7Y29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzKGluaXRpYWxEYXRhKX1gKTtcbiAgICA5OFx0ICAgICAgY29uc3Qgbm9ybWFsaXplZEN1cnJlbnQgPSBub3JtYWxpemVGbGlnaHREYXRhKGAke2Zvcm1WYWx1ZXN9YCk7XG4gICAgOTlcdCAgICAgIGNvbnN0IG1vZGlmaWVkID0gIWlzRXF1YWwobm9ybWFsaXplZEN1cnJlbnQsIG5vcm1hbGl6ZWRPcmlnaW5hbCk7XG4gICAxMDBcdCAgICAgIGNvbnNvbGUubG9nKCdpc01vZGlmaWVkJywgbW9kaWZpZWQpO1xuICAgMTAxXHQgICAgICBzZXRJc01vZGlmaWVkKG1vZGlmaWVkKTtcbiAgIDEwMlx0ICAgIH1cbiAgIDEwM1x0ICB9LCBbZm9ybVZhbHVlcywgb3JpZ2luYWxWYWx1ZXNdKTtcbiAgIDEwNFx0XG4gICAxMDVcdCAgY29uc3QgaGFuZGxlRm9ybVN1Ym1pdCA9IChkYXRhOiBCb29rRm9ybVZhbHVlc1R5cGUpID0+IHtcbiAgIDEwNlx0ICAgIC8vIFNpIGF1Y3VuZSBtb2RpZmljYXRpb24sIHJlZGlyaWdlciB2ZXJzIGxhIHBhZ2UgZCdhY2N1ZWlsXG4gICAxMDdcdCAgICBpZiAoIWlzTW9kaWZpZWQpIHtcbiAgIDEwOFx0ICAgICAgcm91dGVyLnB1c2goJy8nKTtcbiAgIDEwOVx0ICAgICAgcmV0dXJuO1xuICAgMTEwXHQgICAgfVxuVG90YWwgbGluZXMgaW4gZmlsZTogMzc1XG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxN2hBRVhIaEFDdUViUm9IVkZIYjNEVyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250IiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjMsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifX19XSwicmVzcG9uc2VfdGV4dCI6IkplIHZvaXMgcXUnaWwgeSBhIGTDqWrDoCB1bmUgdGVudGF0aXZlIGRlIHLDqXNvbHV0aW9uIGR1IHByb2Jsw6htZSBhdmVjIGRlcyBmb25jdGlvbnMgYG5vcm1hbGl6ZUZsaWdodERhdGFgIGV0IGBpc0VxdWFsYCBxdWkgbmUgc29udCBwYXMgZMOpZmluaWVzLiBBam91dG9ucyBjZXMgZm9uY3Rpb25zIGV0IGNvcnJpZ2VvbnMgbGUgY29kZSA6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMzk0Njg1MzItYzlkNi00Y2ZiLWI4OTgtNzFjMjFmNjRlOWZjIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMVJKWW9McTZwUEtzWTRpVm84c0Nwc00iLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInN0cl9yZXBsYWNlXCIsIFwicGF0aFwiOiBcInNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3hcIiwgXCJzdHJfcmVwbGFjZV9lbnRyaWVzXCI6IFt7XCJvbGRfc3RyXCI6IFwiaW1wb3J0IHtub3JtYWxpemVGbGlnaHREYXRhfSBmcm9tIFxcXCJuZXh0L2Rpc3QvY2xpZW50L2ZsaWdodC1kYXRhLWhlbHBlcnNcXFwiO1xcbmltcG9ydCBpc0VxdWFsIGZyb20gJ2xvZGFzaC5pc2VxdWFsJztcIiwgXCJuZXdfc3RyXCI6IFwiaW1wb3J0IGlzRXF1YWwgZnJvbSAnbG9kYXNoLmlzZXF1YWwnO1wiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJcIjogMTQsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJcIjogMTV9LCB7XCJvbGRfc3RyXCI6IFwiICAgICAgICAvLyBVdGlsaXNlciB1bmUgY29tcGFyYWlzb24gcHJvZm9uZGUgcG91ciBkXFx1MDBlOXRlY3RlciBsZXMgbW9kaWZpY2F0aW9uc1xcbiAgICAgICAgY29uc3QgbW9kaWZpZWQgPSAhXy5pc0VxdWFsKGZvcm1WYWx1ZXMsIG9yaWdpbmFsT2JqKTtcXG4gICAgICAgIGNvbnNvbGUubG9nKCdpc01vZGlmaWVkJywgbW9kaWZpZWQpO1xcbiAgICAgICAgc2V0SXNNb2RpZmllZChtb2RpZmllZCk7XCIsIFwibmV3X3N0clwiOiBcIiAgICAgICAgLy8gVXRpbGlzZXIgdW5lIGNvbXBhcmFpc29uIHByb2ZvbmRlIHBvdXIgZFxcdTAwZTl0ZWN0ZXIgbGVzIG1vZGlmaWNhdGlvbnNcXG4gICAgICAgIGNvbnN0IG1vZGlmaWVkID0gIWlzRXF1YWwoZm9ybVZhbHVlcywgb3JpZ2luYWxPYmopO1xcbiAgICAgICAgY29uc29sZS5sb2coJ2lzTW9kaWZpZWQnLCBtb2RpZmllZCk7XFxuICAgICAgICBzZXRJc01vZGlmaWVkKG1vZGlmaWVkKTtcIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXCI6IDEwMCwgXCJvbGRfc3RyX2VuZF9saW5lX251bWJlclwiOiAxMDN9XX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkplIHZvaXMgcXVlIGxlIGZpY2hpZXIgYSDDqXTDqSBtb2RpZmnDqSBwb3VyIHV0aWxpc2VyIGRlcyBpbXBvcnRzIHNww6ljaWZpcXVlcy4gTWV0dG9ucyDDoCBqb3VyIGxlcyBpbXBvcnRzIHBvdXIgdXRpbGlzZXIgbG9kYXNoLmlzRXF1YWwgOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJ1bnNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJQYXJ0aWFsbHkgZWRpdGVkIHRoZSBmaWxlIHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3guIFNlZSBiZWxvdyBmb3IgZGV0YWlscy5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcbk5vIHJlcGxhY2VtZW50IHdhcyBwZXJmb3JtZWQsIG9sZFN0ciBkaWQgbm90IGFwcGVhciB2ZXJiYXRpbSBpbiBzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4LlxuVGhlIGNvbnRlbnQgaW4gdGhlIHNwZWNpZmllZCByZWdpb24gaXM6XG4gICAgIDFcdCd1c2UgY2xpZW50JztcbiAgICAgMlx0XG4gICAgIDNcdGltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG4gICAgIDRcdGltcG9ydCB7IHVzZUZvcm0sIHVzZUZpZWxkQXJyYXkgfSBmcm9tICdyZWFjdC1ob29rLWZvcm0nO1xuICAgICA1XHRpbXBvcnQgeyB6b2RSZXNvbHZlciB9IGZyb20gJ0Bob29rZm9ybS9yZXNvbHZlcnMvem9kJztcbiAgICAgNlx0aW1wb3J0IHsgQm9va0RhdGEgfSBmcm9tICdAL3R5cGVzL0Jvb2tEYXRhJztcbiAgICAgN1x0aW1wb3J0IHsgQm9va0Zvcm1TY2hlbWEsIEJvb2tGb3JtVmFsdWVzVHlwZSB9IGZyb20gJy4vc2NoZW1hcy9Cb29rRm9ybVNjaGVtYSc7XG4gICAgIDhcdGltcG9ydCBJbnB1dEZvcm0gZnJvbSAnLi9JbnB1dEZvcm0nO1xuICAgICA5XHRpbXBvcnQgeyBQbHVzQ2lyY2xlLCBQYWxtdHJlZSwgUGxhbmUsIEhvbWUsIE1hcFBpbiwgQXJyb3dMZWZ0IH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcbiAgICAxMFx0aW1wb3J0IFJlY29tbWVuZGF0aW9uIGZyb20gJy4vUmVjb21tZW5kYXRpb24nO1xuICAgIDExXHRpbXBvcnQgeyBtb3Rpb24gfSBmcm9tICdmcmFtZXItbW90aW9uJztcbiAgICAxMlx0aW1wb3J0IHsgQWNjb3JkaW9uLCBBY2NvcmRpb25Db250ZW50LCBBY2NvcmRpb25JdGVtLCBBY2NvcmRpb25UcmlnZ2VyIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2FjY29yZGlvbic7XG4gICAgMTNcdGltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ25leHQvbmF2aWdhdGlvbic7XG4gICAgMTRcdGltcG9ydCB7bm9ybWFsaXplRmxpZ2h0RGF0YX0gZnJvbSBcIm5leHQvZGlzdC9jbGllbnQvZmxpZ2h0LWRhdGEtaGVscGVyc1wiO1xuICAgIDE1XHRpbXBvcnQgaXNFcXVhbCBmcm9tICdsb2Rhc2guaXNlcXVhbCc7XG4gICAgMTZcdFxuICAgIDE3XHRjb25zdCBjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMgPSAoZGF0YTogQm9va0RhdGEgfCB1bmRlZmluZWQpOiBCb29rRm9ybVZhbHVlc1R5cGUgPT4ge1xuICAgIDE4XHQgIHJldHVybiB7XG5cbkRpZmYgYmV0d2VlbiBvbGRTdHIgYW5kIHRoZSBzcGVjaWZpZWQgcmVnaW9uIGlzOlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLS0tIG9sZFN0clxuKysrIHJlZ2lvbkNvbnRlbnRcbkBAIC0xMSw0ICsxMSw0IEBAXG4gaW1wb3J0IHsgbW90aW9uIH0gZnJvbSAnZnJhbWVyLW1vdGlvbic7XG4gaW1wb3J0IHsgQWNjb3JkaW9uLCBBY2NvcmRpb25Db250ZW50LCBBY2NvcmRpb25JdGVtLCBBY2NvcmRpb25UcmlnZ2VyIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2FjY29yZGlvbic7XG4gaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9uYXZpZ2F0aW9uJztcbi1pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuK2ltcG9ydCB7bm9ybWFsaXplRmxpZ2h0RGF0YX0gZnJvbSBcIm5leHQvZGlzdC9jbGllbnQvZmxpZ2h0LWRhdGEtaGVscGVyc1wiO1xuXG5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1sxXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgIDkyXHRcbiAgICA5M1x0ICAvLyBFZmZldCBwb3VyIGTDqXRlY3RlciBsZXMgbW9kaWZpY2F0aW9uc1xuICAgIDk0XHQgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgOTVcdCAgICBpZiAob3JpZ2luYWxWYWx1ZXMgJiYgZm9ybVZhbHVlcykge1xuICAgIDk2XHQgICAgICB0cnkge1xuICAgIDk3XHQgICAgICAgIC8vIENvbXBhcmVyIGxlcyBvYmpldHMgZW4gaWdub3JhbnQgbGVzIHByb3ByacOpdMOpcyBub24gcGVydGluZW50ZXNcbiAgICA5OFx0ICAgICAgICBjb25zdCBvcmlnaW5hbE9iaiA9IEpTT04ucGFyc2Uob3JpZ2luYWxWYWx1ZXMpO1xuICAgIDk5XHRcbiAgIDEwMFx0ICAgICAgICAvLyBVdGlsaXNlciB1bmUgY29tcGFyYWlzb24gcHJvZm9uZGUgcG91ciBkw6l0ZWN0ZXIgbGVzIG1vZGlmaWNhdGlvbnNcbiAgIDEwMVx0ICAgICAgICBjb25zdCBtb2RpZmllZCA9ICFfLmlzRXF1YWwoZm9ybVZhbHVlcywgb3JpZ2luYWxPYmopO1xuICAgMTAyXHQgICAgICAgIGNvbnNvbGUubG9nKCdpc01vZGlmaWVkJywgbW9kaWZpZWQpO1xuICAgMTAzXHQgICAgICAgIHNldElzTW9kaWZpZWQobW9kaWZpZWQpO1xuICAgMTA0XHQgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgMTA1XHQgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBsb3JzIGRlIGxhIGNvbXBhcmFpc29uIGRlcyBvYmpldHM6JywgZXJyb3IpO1xuICAgMTA2XHQgICAgICB9XG4gICAxMDdcdCAgICB9XG4gICAxMDhcdCAgfSwgW2Zvcm1WYWx1ZXMsIG9yaWdpbmFsVmFsdWVzXSk7XG4gICAxMDlcdFxuICAgMTEwXHQgIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XG5cbkZpeCBmYWlsZWQgc3RyX3JlcGxhY2VfZW50cmllcyBhY2NvcmRpbmdseSBhbmQgdHJ5IGFnYWluLlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMTUzdkh3WUw2WGVnUGg5R3lTWVZLdTEifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCIsImZvbGRlclJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjozLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In19fV0sInJlc3BvbnNlX3RleHQiOiJKZSB2b2lzIHF1ZSBsZSBmaWNoaWVyIGEgw6l0w6kgbW9kaWZpw6kgcG91ciB1dGlsaXNlciBkZXMgaW1wb3J0cyBzcMOpY2lmaXF1ZXMuIE1ldHRvbnMgw6Agam91ciBsZXMgaW1wb3J0cyBwb3VyIHV0aWxpc2VyIGxvZGFzaC5pc0VxdWFsIDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJhMTcwM2YyZC0zYWQ4LTQ3MGQtOGFlNC05ZjQ0OGUyZjk1ODAiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxQWtIdHpNWVkyQUo1amR6Ym15azlnZyIsInRvb2xfbmFtZSI6ImxhdW5jaC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJucG0gaW5zdGFsbCBsb2Rhc2guaXNlcXVhbFwiLCBcIndhaXRcIjogdHJ1ZSwgXCJtYXhfd2FpdF9zZWNvbmRzXCI6IDEyMH0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6Ik1haW50ZW5hbnQsIG5vdXMgZGV2b25zIGluc3RhbGxlciBsZSBwYWNrYWdlIGxvZGFzaC5pc0VxdWFsIHBvdXIgcXVlIGNlbGEgZm9uY3Rpb25uZSA6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InVuc2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeC5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgIDEwXHRpbXBvcnQgUmVjb21tZW5kYXRpb24gZnJvbSAnLi9SZWNvbW1lbmRhdGlvbic7XG4gICAgMTFcdGltcG9ydCB7IG1vdGlvbiB9IGZyb20gJ2ZyYW1lci1tb3Rpb24nO1xuICAgIDEyXHRpbXBvcnQgeyBBY2NvcmRpb24sIEFjY29yZGlvbkNvbnRlbnQsIEFjY29yZGlvbkl0ZW0sIEFjY29yZGlvblRyaWdnZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvYWNjb3JkaW9uJztcbiAgICAxM1x0aW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9uYXZpZ2F0aW9uJztcbiAgICAxNFx0aW1wb3J0IGlzRXF1YWwgZnJvbSAnbG9kYXNoLmlzZXF1YWwnO1xuICAgIDE1XHRcbiAgICAxNlx0Y29uc3QgY29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzID0gKGRhdGE6IEJvb2tEYXRhIHwgdW5kZWZpbmVkKTogQm9va0Zvcm1WYWx1ZXNUeXBlID0+IHtcbiAgICAxN1x0ICByZXR1cm4ge1xuICAgIDE4XHQgICAgaWQ6IGRhdGE/LmlkLFxuXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlX2VudHJpZXNbMV06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICA5NVx0ICAgICAgdHJ5IHtcbiAgICA5Nlx0ICAgICAgICAvLyBDb21wYXJlciBsZXMgb2JqZXRzIGVuIGlnbm9yYW50IGxlcyBwcm9wcmnDqXTDqXMgbm9uIHBlcnRpbmVudGVzXG4gICAgOTdcdCAgICAgICAgY29uc3Qgb3JpZ2luYWxPYmogPSBKU09OLnBhcnNlKG9yaWdpbmFsVmFsdWVzKTtcbiAgICA5OFx0XG4gICAgOTlcdCAgICAgICAgLy8gVXRpbGlzZXIgdW5lIGNvbXBhcmFpc29uIHByb2ZvbmRlIHBvdXIgZMOpdGVjdGVyIGxlcyBtb2RpZmljYXRpb25zXG4gICAxMDBcdCAgICAgICAgY29uc3QgbW9kaWZpZWQgPSAhaXNFcXVhbChmb3JtVmFsdWVzLCBvcmlnaW5hbE9iaik7XG4gICAxMDFcdCAgICAgICAgY29uc29sZS5sb2coJ2lzTW9kaWZpZWQnLCBtb2RpZmllZCk7XG4gICAxMDJcdCAgICAgICAgc2V0SXNNb2RpZmllZChtb2RpZmllZCk7XG4gICAxMDNcdCAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxMDRcdCAgICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgY29tcGFyYWlzb24gZGVzIG9iamV0czonLCBlcnJvcik7XG4gICAxMDVcdFxuICAgMTA2XHQgICAgICB9ICAgIH1cblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMVJKWW9McTZwUEtzWTRpVm84c0Nwc00ifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCIsImZvbGRlclJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjozLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In19fV0sInJlc3BvbnNlX3RleHQiOiJNYWludGVuYW50LCBub3VzIGRldm9ucyBpbnN0YWxsZXIgbGUgcGFja2FnZSBsb2Rhc2guaXNFcXVhbCBwb3VyIHF1ZSBjZWxhIGZvbmN0aW9ubmUgOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjgzOTRmNWYzLTA3OTctNDczYy1iZjYwLTI2MDNjMWVhYjQzYiIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IlBhcmZhaXQgISBMZSBwYWNrYWdlIGBsb2Rhc2guaXNlcXVhbGAgYSDDqXTDqSBpbnN0YWxsw6kgYXZlYyBzdWNjw6hzLiBDZXR0ZSBiaWJsaW90aMOocXVlIG5vdXMgcGVybWV0dHJhIGRlIGZhaXJlIHVuZSBjb21wYXJhaXNvbiBwcm9mb25kZSBlbnRyZSBsZXMgb2JqZXRzLCBjZSBxdWkgZGV2cmFpdCByw6lzb3VkcmUgbGUgcHJvYmzDqG1lIGRlIGTDqXRlY3Rpb24gZGVzIG1vZGlmaWNhdGlvbnMuXG5cblLDqWNhcGl0dWxvbnMgbGVzIG1vZGlmaWNhdGlvbnMgcXVlIG5vdXMgYXZvbnMgYXBwb3J0w6llcyA6XG5cbjEuIE5vdXMgYXZvbnMgcmVtcGxhY8OpIGxhIGNvbXBhcmFpc29uIHNpbXBsZSBkZSBjaGHDrm5lcyBKU09OIChgY3VycmVudFZhbHVlcyAhPT0gb3JpZ2luYWxWYWx1ZXNgKSBwYXIgdW5lIGNvbXBhcmFpc29uIHByb2ZvbmRlIGQnb2JqZXRzIGVuIHV0aWxpc2FudCBgbG9kYXNoLmlzZXF1YWxgLlxuXG4yLiBOb3VzIGF2b25zIHPDqXBhcsOpIGxhIGxvZ2lxdWUgZW4gZGV1eCBlZmZldHMgZGlzdGluY3RzIDpcbiAgIC0gVW4gZWZmZXQgcXVpIG1ldCDDoCBqb3VyIGxlcyB2YWxldXJzIG9yaWdpbmFsZXMgY2hhcXVlIGZvaXMgcXVlIGBpbml0aWFsRGF0YWAgY2hhbmdlXG4gICAtIFVuIGVmZmV0IHF1aSBkw6l0ZWN0ZSBsZXMgbW9kaWZpY2F0aW9ucyBlbiBjb21wYXJhbnQgbGVzIHZhbGV1cnMgYWN0dWVsbGVzIGF2ZWMgbGVzIHZhbGV1cnMgb3JpZ2luYWxlcyBlbiB1dGlsaXNhbnQgdW5lIGNvbXBhcmFpc29uIHByb2ZvbmRlXG5cbjMuIE5vdXMgYXZvbnMgYWpvdXTDqSB1bmUgZ2VzdGlvbiBkZXMgZXJyZXVycyBwb3VyIMOpdml0ZXIgbGVzIHByb2Jsw6htZXMgbG9ycyBkZSBsYSBjb21wYXJhaXNvbiBkZXMgb2JqZXRzLlxuXG5DZXR0ZSBhcHByb2NoZSBkZXZyYWl0IHLDqXNvdWRyZSBsZSBwcm9ibMOobWUgb8O5IGBpc01vZGlmaWVkYCByZXN0YWl0IMOgIGB0cnVlYCBtw6ptZSBsb3JzcXVlIGxlcyBvYmpldHMgw6l0YWllbnQgaWRlbnRpcXVlcy4gTGEgY29tcGFyYWlzb24gcHJvZm9uZGUgYXZlYyBgaXNFcXVhbGAgZGUgbG9kYXNoIGVzdCBiZWF1Y291cCBwbHVzIGZpYWJsZSBxdWUgbGEgY29tcGFyYWlzb24gZGUgY2hhw65uZXMgSlNPTiwgY2FyIGVsbGUgY29tcGFyZSBsYSBzdHJ1Y3R1cmUgZXQgbGVzIHZhbGV1cnMgZGVzIG9iamV0cywgaW5kw6lwZW5kYW1tZW50IGRlIGwnb3JkcmUgZGVzIHByb3ByacOpdMOpcyBvdSBkJ2F1dHJlcyBkaWZmw6lyZW5jZXMgc3VwZXJmaWNpZWxsZXMuXG5cbk1haW50ZW5hbnQsIGxvcnNxdWUgdm91cyBtb2RpZmlleiBsZSBmb3JtdWxhaXJlIGV0IHNvdW1ldHRleiBsZXMgbW9kaWZpY2F0aW9ucyA6XG4xLiBMZXMgZG9ubsOpZXMgc29udCBlbnZvecOpZXMgYXUgYmFja2VuZCBldCBtaXNlcyDDoCBqb3VyIGRhbnMgbGEgYmFzZSBkZSBkb25uw6llc1xuMi4gTGUgY29tcG9zYW50IHBhcmVudCBtZXQgw6Agam91ciBzb24gw6l0YXQgYGJvb2tEYXRhYCBhdmVjIGxlcyBkb25uw6llcyByw6ljdXDDqXLDqWVzXG4zLiBDZXMgbm91dmVsbGVzIGRvbm7DqWVzIHNvbnQgcGFzc8OpZXMgYXUgY29tcG9zYW50IGVuZmFudCB2aWEgbGEgcHJvcCBgaW5pdGlhbERhdGFgXG40LiBMJ2VmZmV0IGRhbnMgbGUgY29tcG9zYW50IGVuZmFudCBkw6l0ZWN0ZSBsZSBjaGFuZ2VtZW50IGRlIGBpbml0aWFsRGF0YWAgZXQgbWV0IMOgIGpvdXIgbGVzIHZhbGV1cnMgb3JpZ2luYWxlc1xuNS4gTCdlZmZldCBkZSBkw6l0ZWN0aW9uIGRlcyBtb2RpZmljYXRpb25zIHJlY2FsY3VsZSBsJ8OpdGF0IGBpc01vZGlmaWVkYCBlbiB1dGlsaXNhbnQgYGlzRXF1YWxgIHBvdXIgY29tcGFyZXIgbGVzIG9iamV0c1xuNi4gTGUgYm91dG9uIGFmZmljaGUgXCJSZXRvdXIgw6AgbCdhY2N1ZWlsXCIgcHVpc3F1ZSBsZXMgZG9ubsOpZXMgc29udCBtYWludGVuYW50IMOgIGpvdXJcblxuRXN0LWNlIHF1ZSBjZXR0ZSBzb2x1dGlvbiB2b3VzIGNvbnZpZW50ID8gU291aGFpdGV6LXZvdXMgYXBwb3J0ZXIgZCdhdXRyZXMgbW9kaWZpY2F0aW9ucyA/XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbiAgICAgICAgPHJldHVybi1jb2RlPlxuICAgICAgICAwXG4gICAgICAgIDwvcmV0dXJuLWNvZGU+XG4gICAgICAgIDxzdGRvdXQ+XG4gICAgICAgIChub2RlOjEwNjc5KSBFeHBlcmltZW50YWxXYXJuaW5nOiBDb21tb25KUyBtb2R1bGUgL29wdC9ob21lYnJldy9saWIvbm9kZV9tb2R1bGVzL25wbS9ub2RlX21vZHVsZXMvZGVidWcvc3JjL25vZGUuanMgaXMgbG9hZGluZyBFUyBNb2R1bGUgL29wdC9ob21lYnJldy9saWIvbm9kZV9tb2R1bGVzL25wbS9ub2RlX21vZHVsZXMvc3VwcG9ydHMtY29sb3IvaW5kZXguanMgdXNpbmcgcmVxdWlyZSgpLlxuU3VwcG9ydCBmb3IgbG9hZGluZyBFUyBNb2R1bGUgaW4gcmVxdWlyZSgpIGlzIGFuIGV4cGVyaW1lbnRhbCBmZWF0dXJlIGFuZCBtaWdodCBjaGFuZ2UgYXQgYW55IHRpbWVcbihVc2UgYG5vZGUgLS10cmFjZS13YXJuaW5ncyAuLi5gIHRvIHNob3cgd2hlcmUgdGhlIHdhcm5pbmcgd2FzIGNyZWF0ZWQpXG5cdTAwMWJbMUdcdTAwMWJbMEvioJlcdTAwMWJbMUdcdTAwMWJbMEvioLlcdTAwMWJbMUdcdTAwMWJbMEvioLhcdTAwMWJbMUdcdTAwMWJbMEvioLxcdTAwMWJbMUdcdTAwMWJbMEvioLRcdTAwMWJbMUdcdTAwMWJbMEvioKZcdTAwMWJbMUdcdTAwMWJbMEvioKdcdTAwMWJbMUdcdTAwMWJbMEvioIdcdTAwMWJbMUdcdTAwMWJbMEvioI9cdTAwMWJbMUdcdTAwMWJbMEvioItcdTAwMWJbMUdcdTAwMWJbMEvioJlcdTAwMWJbMUdcdTAwMWJbMEvioLlcdTAwMWJbMUdcdTAwMWJbMEvioLhcdTAwMWJbMUdcdTAwMWJbMEvioLxcdTAwMWJbMUdcdTAwMWJbMEvioLRcdTAwMWJbMUdcdTAwMWJbMEvioKZcdTAwMWJbMUdcdTAwMWJbMEvioKdcdTAwMWJbMUdcdTAwMWJbMEvioIdcdTAwMWJbMUdcdTAwMWJbMEtcbmNoYW5nZWQgNCBwYWNrYWdlcywgYW5kIGF1ZGl0ZWQgMTAwIHBhY2thZ2VzIGluIDJzXG5cdTAwMWJbMUdcdTAwMWJbMEvioIdcdTAwMWJbMUdcdTAwMWJbMEtcblx1MDAxYlsxR1x1MDAxYlswS+Kgh1x1MDAxYlsxR1x1MDAxYlswSzIxIHBhY2thZ2VzIGFyZSBsb29raW5nIGZvciBmdW5kaW5nXG5cdTAwMWJbMUdcdTAwMWJbMEvioIdcdTAwMWJbMUdcdTAwMWJbMEsgIHJ1biBgbnBtIGZ1bmRgIGZvciBkZXRhaWxzXG5cdTAwMWJbMUdcdTAwMWJbMEvioIdcdTAwMWJbMUdcdTAwMWJbMEtcbmZvdW5kIFx1MDAxYlszMm1cdTAwMWJbMW0wXHUwMDFiWzIybVx1MDAxYlszOW0gdnVsbmVyYWJpbGl0aWVzXG5cdTAwMWJbMUdcdTAwMWJbMEvioIdcdTAwMWJbMUdcdTAwMWJbMEtcbiAgICAgICAgPC9zdGRvdXQ+XG4gICAgICAgIDxzdGRlcnI+XG4gICAgICAgIFxuICAgICAgICA8L3N0ZGVycj4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxQWtIdHpNWVkyQUo1amR6Ym15azlnZyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250IiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjQsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifX19XSwicmVzcG9uc2VfdGV4dCI6IlBhcmZhaXQgISBMZSBwYWNrYWdlIGBsb2Rhc2guaXNlcXVhbGAgYSDDqXTDqSBpbnN0YWxsw6kgYXZlYyBzdWNjw6hzLiBDZXR0ZSBiaWJsaW90aMOocXVlIG5vdXMgcGVybWV0dHJhIGRlIGZhaXJlIHVuZSBjb21wYXJhaXNvbiBwcm9mb25kZSBlbnRyZSBsZXMgb2JqZXRzLCBjZSBxdWkgZGV2cmFpdCByw6lzb3VkcmUgbGUgcHJvYmzDqG1lIGRlIGTDqXRlY3Rpb24gZGVzIG1vZGlmaWNhdGlvbnMuXG5cblLDqWNhcGl0dWxvbnMgbGVzIG1vZGlmaWNhdGlvbnMgcXVlIG5vdXMgYXZvbnMgYXBwb3J0w6llcyA6XG5cbjEuIE5vdXMgYXZvbnMgcmVtcGxhY8OpIGxhIGNvbXBhcmFpc29uIHNpbXBsZSBkZSBjaGHDrm5lcyBKU09OIChgY3VycmVudFZhbHVlcyAhPT0gb3JpZ2luYWxWYWx1ZXNgKSBwYXIgdW5lIGNvbXBhcmFpc29uIHByb2ZvbmRlIGQnb2JqZXRzIGVuIHV0aWxpc2FudCBgbG9kYXNoLmlzZXF1YWxgLlxuXG4yLiBOb3VzIGF2b25zIHPDqXBhcsOpIGxhIGxvZ2lxdWUgZW4gZGV1eCBlZmZldHMgZGlzdGluY3RzIDpcbiAgIC0gVW4gZWZmZXQgcXVpIG1ldCDDoCBqb3VyIGxlcyB2YWxldXJzIG9yaWdpbmFsZXMgY2hhcXVlIGZvaXMgcXVlIGBpbml0aWFsRGF0YWAgY2hhbmdlXG4gICAtIFVuIGVmZmV0IHF1aSBkw6l0ZWN0ZSBsZXMgbW9kaWZpY2F0aW9ucyBlbiBjb21wYXJhbnQgbGVzIHZhbGV1cnMgYWN0dWVsbGVzIGF2ZWMgbGVzIHZhbGV1cnMgb3JpZ2luYWxlcyBlbiB1dGlsaXNhbnQgdW5lIGNvbXBhcmFpc29uIHByb2ZvbmRlXG5cbjMuIE5vdXMgYXZvbnMgYWpvdXTDqSB1bmUgZ2VzdGlvbiBkZXMgZXJyZXVycyBwb3VyIMOpdml0ZXIgbGVzIHByb2Jsw6htZXMgbG9ycyBkZSBsYSBjb21wYXJhaXNvbiBkZXMgb2JqZXRzLlxuXG5DZXR0ZSBhcHByb2NoZSBkZXZyYWl0IHLDqXNvdWRyZSBsZSBwcm9ibMOobWUgb8O5IGBpc01vZGlmaWVkYCByZXN0YWl0IMOgIGB0cnVlYCBtw6ptZSBsb3JzcXVlIGxlcyBvYmpldHMgw6l0YWllbnQgaWRlbnRpcXVlcy4gTGEgY29tcGFyYWlzb24gcHJvZm9uZGUgYXZlYyBgaXNFcXVhbGAgZGUgbG9kYXNoIGVzdCBiZWF1Y291cCBwbHVzIGZpYWJsZSBxdWUgbGEgY29tcGFyYWlzb24gZGUgY2hhw65uZXMgSlNPTiwgY2FyIGVsbGUgY29tcGFyZSBsYSBzdHJ1Y3R1cmUgZXQgbGVzIHZhbGV1cnMgZGVzIG9iamV0cywgaW5kw6lwZW5kYW1tZW50IGRlIGwnb3JkcmUgZGVzIHByb3ByacOpdMOpcyBvdSBkJ2F1dHJlcyBkaWZmw6lyZW5jZXMgc3VwZXJmaWNpZWxsZXMuXG5cbk1haW50ZW5hbnQsIGxvcnNxdWUgdm91cyBtb2RpZmlleiBsZSBmb3JtdWxhaXJlIGV0IHNvdW1ldHRleiBsZXMgbW9kaWZpY2F0aW9ucyA6XG4xLiBMZXMgZG9ubsOpZXMgc29udCBlbnZvecOpZXMgYXUgYmFja2VuZCBldCBtaXNlcyDDoCBqb3VyIGRhbnMgbGEgYmFzZSBkZSBkb25uw6llc1xuMi4gTGUgY29tcG9zYW50IHBhcmVudCBtZXQgw6Agam91ciBzb24gw6l0YXQgYGJvb2tEYXRhYCBhdmVjIGxlcyBkb25uw6llcyByw6ljdXDDqXLDqWVzXG4zLiBDZXMgbm91dmVsbGVzIGRvbm7DqWVzIHNvbnQgcGFzc8OpZXMgYXUgY29tcG9zYW50IGVuZmFudCB2aWEgbGEgcHJvcCBgaW5pdGlhbERhdGFgXG40LiBMJ2VmZmV0IGRhbnMgbGUgY29tcG9zYW50IGVuZmFudCBkw6l0ZWN0ZSBsZSBjaGFuZ2VtZW50IGRlIGBpbml0aWFsRGF0YWAgZXQgbWV0IMOgIGpvdXIgbGVzIHZhbGV1cnMgb3JpZ2luYWxlc1xuNS4gTCdlZmZldCBkZSBkw6l0ZWN0aW9uIGRlcyBtb2RpZmljYXRpb25zIHJlY2FsY3VsZSBsJ8OpdGF0IGBpc01vZGlmaWVkYCBlbiB1dGlsaXNhbnQgYGlzRXF1YWxgIHBvdXIgY29tcGFyZXIgbGVzIG9iamV0c1xuNi4gTGUgYm91dG9uIGFmZmljaGUgXCJSZXRvdXIgw6AgbCdhY2N1ZWlsXCIgcHVpc3F1ZSBsZXMgZG9ubsOpZXMgc29udCBtYWludGVuYW50IMOgIGpvdXJcblxuRXN0LWNlIHF1ZSBjZXR0ZSBzb2x1dGlvbiB2b3VzIGNvbnZpZW50ID8gU291aGFpdGV6LXZvdXMgYXBwb3J0ZXIgZCdhdXRyZXMgbW9kaWZpY2F0aW9ucyA/XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiJhZTY4NzFhZC01ZjcxLTQ1ZTQtODk3OC1jYWZiMjM4NTExOWMiLCJ1dWlkIjoiOTJmZmM1ZjMtYTU5OS00NTM5LWFiOWEtOTBmMzRhZWE3MmQyIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy1jaGVja3BvaW50LWRlbGltaXRlciIsInN0YXR1cyI6InN1Y2Nlc3MiLCJmcm9tVGltZXN0YW1wIjoxNzQ0MzcyOTUxODU3LCJ0b1RpbWVzdGFtcCI6MTc0NDM3MzkzMTQ4MCwic2Vlbl9zdGF0ZSI6InNlZW4ifSx7InJlcXVlc3RfaWQiOiIyNWFhNzc2MC1hODg2LTRmZjMtYjJiZS1mYTE0OTZiMmY3YWYiLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjIxNGU5Mzc3LWZhZTctNGVmYy1iNjVkLWQyYWVmNzMzOTdhNyIsInJlcXVlc3RfbWVzc2FnZSI6IlVuZSBmb2lzIGxlcyBkb25uw6llcyBlbnJlZ2lzdHJlciBsZSBib3V0b24gcmVzdGUgdG91am91cnMgc3VyIEVucmVnaXN0cmVyIGxlcyBtb2RpZmljYXRpb25zLCBhbG9ycyBxdSdpbCBkZXZyYWl0IHkgYXZvaXIgcmV0b3VyIGEgbCdhY2N1ZWlsIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IlVuZSBmb2lzIGxlcyBkb25uw6llcyBlbnJlZ2lzdHJlciBsZSBib3V0b24gcmVzdGUgdG91am91cnMgc3VyIEVucmVnaXN0cmVyIGxlcyBtb2RpZmljYXRpb25zLCBhbG9ycyBxdSdpbCBkZXZyYWl0IHkgYXZvaXIgcmV0b3VyIGEgbCdhY2N1ZWlsIn1dfV19LCJtZW50aW9uZWRfaXRlbXMiOltdLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxUnBQZ2hCZ3VoblJkRVNwbkc0YzZnZyIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwic3RyX3JlcGxhY2VcIiwgXCJwYXRoXCI6IFwic3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3hcIiwgXCJzdHJfcmVwbGFjZV9lbnRyaWVzXCI6IFt7XCJvbGRfc3RyXCI6IFwiICAgICAgICAgICAgICAgIG9uU3VibWl0PXthc3luYyAoZGF0YSkgPT4ge1xcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEb25uXFx1MDBlOWVzIGR1IGZvcm11bGFpcmUgc291bWlzZXM6JywgZGF0YSk7XFxuXFxuICAgICAgICAgICAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmlkKSB7XFxuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByaXNtYURhdGEgPSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyaXZhbFRpbWU6IGRhdGEuYXJyaXZhbFRpbWUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzSW5zdHJ1Y3Rpb25zOiBkYXRhLmFjY2Vzc0luc3RydWN0aW9ucyxcXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJpdmFsQWRkaXRpb25hbEluZm86IGRhdGEuYXJyaXZhbEFkZGl0aW9uYWxJbmZvLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlcGFydHVyZVRpbWU6IGRhdGEuZGVwYXJ0dXJlVGltZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBleGl0SW5zdHJ1Y3Rpb25zOiBkYXRhLmV4aXRJbnN0cnVjdGlvbnMsXFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVwYXJ0dXJlQWRkaXRpb25hbEluZm86IGRhdGEuZGVwYXJ0dXJlQWRkaXRpb25hbEluZm8sXFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lmaU5hbWU6IGRhdGEud2lmaU5hbWUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lmaVBhc3N3b3JkOiBkYXRhLndpZmlQYXNzd29yZCxcXG4gICAgICAgICAgICAgICAgICAgICAgICBob3VzZVJ1bGVzOiBkYXRhLmhvdXNlUnVsZXMsXFxuICAgICAgICAgICAgICAgICAgICAgICAgb3duZXJDb250YWN0OiBkYXRhLm93bmVyQ29udGFjdCxcXG4gICAgICAgICAgICAgICAgICAgICAgICBvd25lck5hbWU6IGRhdGEub3duZXJOYW1lLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYWxJbmZvOiBkYXRhLmdlbmVyYWxJbmZvLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29tbWVuZGF0aW9uczoge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlTWFueToge30sXFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGU6IGRhdGEucmVjb21tZW5kYXRpb25zLm1hcChyZWMgPT4gKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcmVjLm5hbWUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IHJlYy5hZGRyZXNzIHx8ICcnLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogcmVjLmRlc2NyaXB0aW9uIHx8ICcnLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiByZWMudHlwZVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICB9O1xcblxcbiAgICAgICAgICAgICAgICAgICAgICAvLyBFbnZveWVyIHVuZSByZXF1XFx1MDBlYXRlIFBVVCBwb3VyIG1ldHRyZSBcXHUwMGUwIGpvdXIgbGVzIGRvbm5cXHUwMGU5ZXNcXG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wdXQoYGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMS9hcGkvc3RheS8ke2RhdGEuaWR9YCwgcHJpc21hRGF0YSk7XFxuXFxuICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEb25uXFx1MDBlOWVzIG1pc2VzIFxcdTAwZTAgam91ciBhdmVjIHN1Y2NcXHUwMGU4czonLCByZXNwb25zZS5kYXRhKTtcXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNZXR0cmUgXFx1MDBlMCBqb3VyIGxlIHN0YXRlIGJvb2tEYXRhIGF2ZWMgbGVzIGRvbm5cXHUwMGU5ZXMgclxcdTAwZTljdXBcXHUwMGU5clxcdTAwZTllc1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKHJlc3BvbnNlLmRhdGEpO1xcblxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhdXZlZ2FyZGVyIGxlcyBkb25uXFx1MDBlOWVzIG1pc2VzIFxcdTAwZTAgam91ciBkYW5zIGxlIGxvY2FsU3RvcmFnZVxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdib29rRGF0YScsIEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLmRhdGEpKTtcXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgnTW9kaWZpY2F0aW9ucyBlbnJlZ2lzdHJcXHUwMGU5ZXMgYXZlYyBzdWNjXFx1MDBlOHMhJyk7XFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTCdcXHUwMGU5dGF0IGlzTW9kaWZpZWQgc2VyYSByXFx1MDBlOWluaXRpYWxpc1xcdTAwZTkgYXV0b21hdGlxdWVtZW50IGdyXFx1MDBlMmNlIGF1eCBwcm9wc1xcbiAgICAgICAgICAgICAgICAgICAgICB9XCIsIFwibmV3X3N0clwiOiBcIiAgICAgICAgICAgICAgICBvblN1Ym1pdD17YXN5bmMgKGRhdGEpID0+IHtcXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRG9ublxcdTAwZTllcyBkdSBmb3JtdWxhaXJlIHNvdW1pc2VzOicsIGRhdGEpO1xcblxcbiAgICAgICAgICAgICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5pZCkge1xcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmlzbWFEYXRhID0ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycml2YWxUaW1lOiBkYXRhLmFycml2YWxUaW1lLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc0luc3RydWN0aW9uczogZGF0YS5hY2Nlc3NJbnN0cnVjdGlvbnMsXFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyaXZhbEFkZGl0aW9uYWxJbmZvOiBkYXRhLmFycml2YWxBZGRpdGlvbmFsSW5mbyxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXBhcnR1cmVUaW1lOiBkYXRhLmRlcGFydHVyZVRpbWUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhpdEluc3RydWN0aW9uczogZGF0YS5leGl0SW5zdHJ1Y3Rpb25zLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlcGFydHVyZUFkZGl0aW9uYWxJbmZvOiBkYXRhLmRlcGFydHVyZUFkZGl0aW9uYWxJbmZvLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZmlOYW1lOiBkYXRhLndpZmlOYW1lLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZmlQYXNzd29yZDogZGF0YS53aWZpUGFzc3dvcmQsXFxuICAgICAgICAgICAgICAgICAgICAgICAgaG91c2VSdWxlczogZGF0YS5ob3VzZVJ1bGVzLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIG93bmVyQ29udGFjdDogZGF0YS5vd25lckNvbnRhY3QsXFxuICAgICAgICAgICAgICAgICAgICAgICAgb3duZXJOYW1lOiBkYXRhLm93bmVyTmFtZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmFsSW5mbzogZGF0YS5nZW5lcmFsSW5mbyxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZWNvbW1lbmRhdGlvbnM6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZU1hbnk6IHt9LFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlOiBkYXRhLnJlY29tbWVuZGF0aW9ucy5tYXAocmVjID0+ICh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHJlYy5uYW1lLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiByZWMuYWRkcmVzcyB8fCAnJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHJlYy5kZXNjcmlwdGlvbiB8fCAnJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogcmVjLnR5cGVcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgfTtcXG5cXG4gICAgICAgICAgICAgICAgICAgICAgLy8gRW52b3llciB1bmUgcmVxdVxcdTAwZWF0ZSBQVVQgcG91ciBtZXR0cmUgXFx1MDBlMCBqb3VyIGxlcyBkb25uXFx1MDBlOWVzXFxuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucHV0KGBodHRwOi8vbG9jYWxob3N0OjMwMDEvYXBpL3N0YXkvJHtkYXRhLmlkfWAsIHByaXNtYURhdGEpO1xcblxcbiAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRG9ublxcdTAwZTllcyBtaXNlcyBcXHUwMGUwIGpvdXIgYXZlYyBzdWNjXFx1MDBlOHM6JywgcmVzcG9uc2UuZGF0YSk7XFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWV0dHJlIFxcdTAwZTAgam91ciBsZSBzdGF0ZSBib29rRGF0YSBhdmVjIGxlcyBkb25uXFx1MDBlOWVzIHJcXHUwMGU5Y3VwXFx1MDBlOXJcXHUwMGU5ZXNcXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRCb29rRGF0YShyZXNwb25zZS5kYXRhKTtcXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTYXV2ZWdhcmRlciBsZXMgZG9ublxcdTAwZTllcyBtaXNlcyBcXHUwMGUwIGpvdXIgZGFucyBsZSBsb2NhbFN0b3JhZ2VcXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShyZXNwb25zZS5kYXRhKSk7XFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3RyXFx1MDBlOWVzIGF2ZWMgc3VjY1xcdTAwZThzIScpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvcmNlciB1biByZWNoYXJnZW1lbnQgZHUgY29tcG9zYW50IHBvdXIgclxcdTAwZTlpbml0aWFsaXNlciBsJ1xcdTAwZTl0YXRcXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XFxuICAgICAgICAgICAgICAgICAgICAgIH1cIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXCI6IDExMCwgXCJvbGRfc3RyX2VuZF9saW5lX251bWJlclwiOiAxNTR9XX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkplIGNvbXByZW5kcyBxdWUgbGUgcHJvYmzDqG1lIHBlcnNpc3RlLiBFc3NheW9ucyB1bmUgYXBwcm9jaGUgcGx1cyBkaXJlY3RlIHBvdXIgcsOpc291ZHJlIGNlIHByb2Jsw6htZS4gQXUgbGlldSBkZSBub3VzIGZpZXIgdW5pcXVlbWVudCDDoCBsYSBjb21wYXJhaXNvbiBkZXMgb2JqZXRzLCBub3VzIGFsbG9ucyBmb3JjZXIgbGEgcsOpaW5pdGlhbGlzYXRpb24gZGUgbCfDqXRhdCBgaXNNb2RpZmllZGAgYXByw6hzIHVuZSBtaXNlIMOgIGpvdXIgcsOpdXNzaWUuXG5cblZvaWNpIGNvbW1lbnQgbm91cyBhbGxvbnMgcHJvY8OpZGVyIDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjAsInRleHRfbm9kZSI6eyJjb250ZW50IjoiVW5lIGZvaXMgbGVzIGRvbm7DqWVzIGVucmVnaXN0cmVyIGxlIGJvdXRvbiByZXN0ZSB0b3Vqb3VycyBzdXIgRW5yZWdpc3RyZXIgbGVzIG1vZGlmaWNhdGlvbnMsIGFsb3JzIHF1J2lsIGRldnJhaXQgeSBhdm9pciByZXRvdXIgYSBsJ2FjY3VlaWwifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCIsImZvbGRlclJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo0LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In19fV0sInJlc3BvbnNlX3RleHQiOiJKZSBjb21wcmVuZHMgcXVlIGxlIHByb2Jsw6htZSBwZXJzaXN0ZS4gRXNzYXlvbnMgdW5lIGFwcHJvY2hlIHBsdXMgZGlyZWN0ZSBwb3VyIHLDqXNvdWRyZSBjZSBwcm9ibMOobWUuIEF1IGxpZXUgZGUgbm91cyBmaWVyIHVuaXF1ZW1lbnQgw6AgbGEgY29tcGFyYWlzb24gZGVzIG9iamV0cywgbm91cyBhbGxvbnMgZm9yY2VyIGxhIHLDqWluaXRpYWxpc2F0aW9uIGRlIGwnw6l0YXQgYGlzTW9kaWZpZWRgIGFwcsOocyB1bmUgbWlzZSDDoCBqb3VyIHLDqXVzc2llLlxuXG5Wb2ljaSBjb21tZW50IG5vdXMgYWxsb25zIHByb2PDqWRlciA6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiNjFjMDIxZjQtYzhmMy00ODA1LTlkMzQtMTFkNjBhMGZmMjUyIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMTFWSGNIWUdrckF4TnViTjNqM2FkUjciLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInN0cl9yZXBsYWNlXCIsIFwicGF0aFwiOiBcInNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4XCIsIFwic3RyX3JlcGxhY2VfZW50cmllc1wiOiBbe1wib2xkX3N0clwiOiBcIiAgICAgICAgICAgICAgICAgICAgICAvLyBQYXMgZCdJRCwgZG9uYyBvbiBtZXQgc2ltcGxlbWVudCBcXHUwMGUwIGpvdXIgbGUgc3RhdGVcXG4gICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEoZGF0YSk7XFxuICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdib29rRGF0YScsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcXG4gICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3RyXFx1MDBlOWVzIGF2ZWMgc3VjY1xcdTAwZThzIScpO1xcblxcbiAgICAgICAgICAgICAgICAgICAgICAvLyBMJ1xcdTAwZTl0YXQgaXNNb2RpZmllZCBzZXJhIHJcXHUwMGU5aW5pdGlhbGlzXFx1MDBlOSBhdXRvbWF0aXF1ZW1lbnQgZ3JcXHUwMGUyY2UgYXV4IHByb3BzXCIsIFwibmV3X3N0clwiOiBcIiAgICAgICAgICAgICAgICAgICAgICAvLyBQYXMgZCdJRCwgZG9uYyBvbiBtZXQgc2ltcGxlbWVudCBcXHUwMGUwIGpvdXIgbGUgc3RhdGVcXG4gICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEoZGF0YSk7XFxuICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdib29rRGF0YScsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcXG4gICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3RyXFx1MDBlOWVzIGF2ZWMgc3VjY1xcdTAwZThzIScpO1xcbiAgICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgICAgLy8gRm9yY2VyIHVuIHJlY2hhcmdlbWVudCBkdSBjb21wb3NhbnQgcG91ciByXFx1MDBlOWluaXRpYWxpc2VyIGwnXFx1MDBlOXRhdFxcbiAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlclwiOiAxNTYsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJcIjogMTYxfV19In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJGYWlzb25zIGxhIG3Dqm1lIGNob3NlIHBvdXIgbGUgY2FzIG/DuSBpbCBuJ3kgYSBwYXMgZCdJRCA6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAxMDZcdCAgICAgICAgICAgICAgKX1cbiAgIDEwN1x0XG4gICAxMDhcdCAgICAgICAgICAgICAgPEJvb2tFZGl0Rm9ybVxuICAgMTA5XHQgICAgICAgICAgICAgICAgaW5pdGlhbERhdGE9e2Jvb2tEYXRhIHx8IHVuZGVmaW5lZH1cbiAgIDExMFx0ICAgICAgICAgICAgICAgIG9uU3VibWl0PXthc3luYyAoZGF0YSkgPT4ge1xuICAgMTExXHQgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRG9ubsOpZXMgZHUgZm9ybXVsYWlyZSBzb3VtaXNlczonLCBkYXRhKTtcbiAgIDExMlx0XG4gICAxMTNcdCAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAxMTRcdCAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaWQpIHtcbiAgIDExNVx0ICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByaXNtYURhdGEgPSB7XG4gICAxMTZcdCAgICAgICAgICAgICAgICAgICAgICAgIGFycml2YWxUaW1lOiBkYXRhLmFycml2YWxUaW1lLFxuICAgMTE3XHQgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NJbnN0cnVjdGlvbnM6IGRhdGEuYWNjZXNzSW5zdHJ1Y3Rpb25zLFxuICAgMTE4XHQgICAgICAgICAgICAgICAgICAgICAgICBhcnJpdmFsQWRkaXRpb25hbEluZm86IGRhdGEuYXJyaXZhbEFkZGl0aW9uYWxJbmZvLFxuICAgMTE5XHQgICAgICAgICAgICAgICAgICAgICAgICBkZXBhcnR1cmVUaW1lOiBkYXRhLmRlcGFydHVyZVRpbWUsXG4gICAxMjBcdCAgICAgICAgICAgICAgICAgICAgICAgIGV4aXRJbnN0cnVjdGlvbnM6IGRhdGEuZXhpdEluc3RydWN0aW9ucyxcbiAgIDEyMVx0ICAgICAgICAgICAgICAgICAgICAgICAgZGVwYXJ0dXJlQWRkaXRpb25hbEluZm86IGRhdGEuZGVwYXJ0dXJlQWRkaXRpb25hbEluZm8sXG4gICAxMjJcdCAgICAgICAgICAgICAgICAgICAgICAgIHdpZmlOYW1lOiBkYXRhLndpZmlOYW1lLFxuICAgMTIzXHQgICAgICAgICAgICAgICAgICAgICAgICB3aWZpUGFzc3dvcmQ6IGRhdGEud2lmaVBhc3N3b3JkLFxuICAgMTI0XHQgICAgICAgICAgICAgICAgICAgICAgICBob3VzZVJ1bGVzOiBkYXRhLmhvdXNlUnVsZXMsXG4gICAxMjVcdCAgICAgICAgICAgICAgICAgICAgICAgIG93bmVyQ29udGFjdDogZGF0YS5vd25lckNvbnRhY3QsXG4gICAxMjZcdCAgICAgICAgICAgICAgICAgICAgICAgIG93bmVyTmFtZTogZGF0YS5vd25lck5hbWUsXG4gICAxMjdcdCAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYWxJbmZvOiBkYXRhLmdlbmVyYWxJbmZvLFxuICAgMTI4XHQgICAgICAgICAgICAgICAgICAgICAgICByZWNvbW1lbmRhdGlvbnM6IHtcbiAgIDEyOVx0ICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVNYW55OiB7fSxcbiAgIDEzMFx0ICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGU6IGRhdGEucmVjb21tZW5kYXRpb25zLm1hcChyZWMgPT4gKHtcbiAgIDEzMVx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHJlYy5uYW1lLFxuICAgMTMyXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogcmVjLmFkZHJlc3MgfHwgJycsXG4gICAxMzNcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogcmVjLmRlc2NyaXB0aW9uIHx8ICcnLFxuICAgMTM0XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogcmVjLnR5cGVcbiAgIDEzNVx0ICAgICAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgIDEzNlx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgMTM3XHQgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgIDEzOFx0XG4gICAxMzlcdCAgICAgICAgICAgICAgICAgICAgICAvLyBFbnZveWVyIHVuZSByZXF1w6p0ZSBQVVQgcG91ciBtZXR0cmUgw6Agam91ciBsZXMgZG9ubsOpZXNcbiAgIDE0MFx0ICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucHV0KGBodHRwOi8vbG9jYWxob3N0OjMwMDEvYXBpL3N0YXkvJHtkYXRhLmlkfWAsIHByaXNtYURhdGEpO1xuICAgMTQxXHRcbiAgIDE0Mlx0ICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgMTQzXHQgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRG9ubsOpZXMgbWlzZXMgw6Agam91ciBhdmVjIHN1Y2PDqHM6JywgcmVzcG9uc2UuZGF0YSk7XG4gICAxNDRcdFxuICAgMTQ1XHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBNZXR0cmUgw6Agam91ciBsZSBzdGF0ZSBib29rRGF0YSBhdmVjIGxlcyBkb25uw6llcyByw6ljdXDDqXLDqWVzXG4gICAxNDZcdCAgICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKHJlc3BvbnNlLmRhdGEpO1xuICAgMTQ3XHRcbiAgIDE0OFx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2F1dmVnYXJkZXIgbGVzIGRvbm7DqWVzIG1pc2VzIMOgIGpvdXIgZGFucyBsZSBsb2NhbFN0b3JhZ2VcbiAgIDE0OVx0ICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuZGF0YSkpO1xuICAgMTUwXHRcbiAgIDE1MVx0ICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3Ryw6llcyBhdmVjIHN1Y2PDqHMhJyk7XG4gICAxNTJcdFxuICAgMTUzXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3JjZXIgdW4gcmVjaGFyZ2VtZW50IGR1IGNvbXBvc2FudCBwb3VyIHLDqWluaXRpYWxpc2VyIGwnw6l0YXRcbiAgIDE1NFx0ICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgMTU1XHQgICAgICAgICAgICAgICAgICAgICAgfVxuICAgMTU2XHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAxNTdcdCAgICAgICAgICAgICAgICAgICAgICAvLyBQYXMgZCdJRCwgZG9uYyBvbiBtZXQgc2ltcGxlbWVudCDDoCBqb3VyIGxlIHN0YXRlXG4gICAxNThcdCAgICAgICAgICAgICAgICAgICAgICBzZXRCb29rRGF0YShkYXRhKTtcbiAgIDE1OVx0ICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdib29rRGF0YScsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMVJwUGdoQmd1aG5SZEVTcG5HNGM2Z2cifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCIsImZvbGRlclJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo0LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In19fV0sInJlc3BvbnNlX3RleHQiOiJGYWlzb25zIGxhIG3Dqm1lIGNob3NlIHBvdXIgbGUgY2FzIG/DuSBpbCBuJ3kgYSBwYXMgZCdJRCA6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZTQ2ZTQzNDctZTg0Ni00MGNkLTljNzItMzNlNGFjNjExY2ZiIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMVNZWnJDMjNkSDhSS3doSkNmUXNmYVoiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInZpZXdcIiwgXCJwYXRoXCI6IFwic3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3hcIiwgXCJ2aWV3X3JhbmdlXCI6IFsxNTUsIDE2NV19In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJWw6lyaWZpb25zIGxlIGNvbnRlbnUgYWN0dWVsIGR1IGZpY2hpZXIgcG91ciBmYWlyZSBsZXMgbW9kaWZpY2F0aW9ucyBjb3JyZWN0ZXMgOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiRmFpbGVkIHRvIGVkaXQgdGhlIGZpbGUgc3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3guIFNlZSBiZWxvdyBmb3IgZGV0YWlscy5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcbk5vIHJlcGxhY2VtZW50IHdhcyBwZXJmb3JtZWQsIG9sZFN0ciBkaWQgbm90IGFwcGVhciB2ZXJiYXRpbSBpbiBzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeC5cblRoZSBjb250ZW50IGluIHRoZSBzcGVjaWZpZWQgcmVnaW9uIGlzOlxuICAgMTUyXHRcbiAgIDE1M1x0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yY2VyIHVuIHJlY2hhcmdlbWVudCBkdSBjb21wb3NhbnQgcG91ciByw6lpbml0aWFsaXNlciBsJ8OpdGF0XG4gICAxNTRcdCAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgIDE1NVx0ICAgICAgICAgICAgICAgICAgICAgIH1cbiAgIDE1Nlx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgMTU3XHQgICAgICAgICAgICAgICAgICAgICAgLy8gUGFzIGQnSUQsIGRvbmMgb24gbWV0IHNpbXBsZW1lbnQgw6Agam91ciBsZSBzdGF0ZVxuICAgMTU4XHQgICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEoZGF0YSk7XG4gICAxNTlcdCAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAxNjBcdFxuICAgMTYxXHQgICAgICAgICAgICAgICAgICAgICAgLy8gTCfDqXRhdCBpc01vZGlmaWVkIHNlcmEgcsOpaW5pdGlhbGlzw6kgYXV0b21hdGlxdWVtZW50IGdyw6JjZSBhdXggcHJvcHNcbiAgIDE2Mlx0ICAgICAgICAgICAgICAgICAgICB9XG4gICAxNjNcdCAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxNjRcdCAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgbWlzZSDDoCBqb3VyIGRlcyBkb25uw6llczonLCBlcnJvcik7XG4gICAxNjVcdCAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1VuZSBlcnJldXIgZXN0IHN1cnZlbnVlIGxvcnMgZGUgbGEgbWlzZSDDoCBqb3VyIGRlcyBkb25uw6llcy4nKTtcblxuRGlmZiBiZXR3ZWVuIG9sZFN0ciBhbmQgdGhlIHNwZWNpZmllZCByZWdpb24gaXM6XG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4tLS0gb2xkU3RyXG4rKysgcmVnaW9uQ29udGVudFxuQEAgLTEsNiArMSw2IEBAXG4rICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAvLyBQYXMgZCdJRCwgZG9uYyBvbiBtZXQgc2ltcGxlbWVudCDDoCBqb3VyIGxlIHN0YXRlXG4gICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4tICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdNb2RpZmljYXRpb25zIGVucmVnaXN0csOpZXMgYXZlYyBzdWNjw6hzIScpO1xuIFxuICAgICAgICAgICAgICAgICAgICAgICAvLyBMJ8OpdGF0IGlzTW9kaWZpZWQgc2VyYSByw6lpbml0aWFsaXPDqSBhdXRvbWF0aXF1ZW1lbnQgZ3LDomNlIGF1eCBwcm9wc1xuXG5cbkZpeCBmYWlsZWQgc3RyX3JlcGxhY2VfZW50cmllcyBhY2NvcmRpbmdseSBhbmQgdHJ5IGFnYWluLlxuIiwiaXNfZXJyb3IiOnRydWUsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxMVZIY0hZR2tyQXhOdWJOM2ozYWRSNyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250IiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjQsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifX19XSwicmVzcG9uc2VfdGV4dCI6IlbDqXJpZmlvbnMgbGUgY29udGVudSBhY3R1ZWwgZHUgZmljaGllciBwb3VyIGZhaXJlIGxlcyBtb2RpZmljYXRpb25zIGNvcnJlY3RlcyA6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiYmU2YzFiNTAtOWMwYi00ZDA4LTkyMjUtNTg0NDY3ZjE2NDY1IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMUVka3p2RFFhZEc2OHVDY2RSU3V1U2giLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInN0cl9yZXBsYWNlXCIsIFwicGF0aFwiOiBcInNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4XCIsIFwic3RyX3JlcGxhY2VfZW50cmllc1wiOiBbe1wib2xkX3N0clwiOiBcIiAgICAgICAgICAgICAgICAgICAgICAvLyBQYXMgZCdJRCwgZG9uYyBvbiBtZXQgc2ltcGxlbWVudCBcXHUwMGUwIGpvdXIgbGUgc3RhdGVcXG4gICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEoZGF0YSk7XFxuICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdib29rRGF0YScsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcXG5cXG4gICAgICAgICAgICAgICAgICAgICAgLy8gTCdcXHUwMGU5dGF0IGlzTW9kaWZpZWQgc2VyYSByXFx1MDBlOWluaXRpYWxpc1xcdTAwZTkgYXV0b21hdGlxdWVtZW50IGdyXFx1MDBlMmNlIGF1eCBwcm9wc1wiLCBcIm5ld19zdHJcIjogXCIgICAgICAgICAgICAgICAgICAgICAgLy8gUGFzIGQnSUQsIGRvbmMgb24gbWV0IHNpbXBsZW1lbnQgXFx1MDBlMCBqb3VyIGxlIHN0YXRlXFxuICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xcbiAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XFxuICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdNb2RpZmljYXRpb25zIGVucmVnaXN0clxcdTAwZTllcyBhdmVjIHN1Y2NcXHUwMGU4cyEnKTtcXG4gICAgICAgICAgICAgICAgICAgICAgXFxuICAgICAgICAgICAgICAgICAgICAgIC8vIEZvcmNlciB1biByZWNoYXJnZW1lbnQgZHUgY29tcG9zYW50IHBvdXIgclxcdTAwZTlpbml0aWFsaXNlciBsJ1xcdTAwZTl0YXRcXG4gICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1wiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJcIjogMTU3LCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXCI6IDE2MX1dfSJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTWFpbnRlbmFudCwgZmFpc29ucyBsZXMgbW9kaWZpY2F0aW9ucyBjb3JyZWN0ZXMgOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeDpcbiAgIDE1NVx0ICAgICAgICAgICAgICAgICAgICAgIH1cbiAgIDE1Nlx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgMTU3XHQgICAgICAgICAgICAgICAgICAgICAgLy8gUGFzIGQnSUQsIGRvbmMgb24gbWV0IHNpbXBsZW1lbnQgw6Agam91ciBsZSBzdGF0ZVxuICAgMTU4XHQgICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEoZGF0YSk7XG4gICAxNTlcdCAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAxNjBcdFxuICAgMTYxXHQgICAgICAgICAgICAgICAgICAgICAgLy8gTCfDqXRhdCBpc01vZGlmaWVkIHNlcmEgcsOpaW5pdGlhbGlzw6kgYXV0b21hdGlxdWVtZW50IGdyw6JjZSBhdXggcHJvcHNcbiAgIDE2Mlx0ICAgICAgICAgICAgICAgICAgICB9XG4gICAxNjNcdCAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxNjRcdCAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgbWlzZSDDoCBqb3VyIGRlcyBkb25uw6llczonLCBlcnJvcik7XG4gICAxNjVcdCAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1VuZSBlcnJldXIgZXN0IHN1cnZlbnVlIGxvcnMgZGUgbGEgbWlzZSDDoCBqb3VyIGRlcyBkb25uw6llcy4nKTtcblRvdGFsIGxpbmVzIGluIGZpbGU6IDE4NVxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMVNZWnJDMjNkSDhSS3doSkNmUXNmYVoifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCIsImZvbGRlclJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo0LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In19fV0sInJlc3BvbnNlX3RleHQiOiJNYWludGVuYW50LCBmYWlzb25zIGxlcyBtb2RpZmljYXRpb25zIGNvcnJlY3RlcyA6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMjBkOTkwNTMtYjVlMi00MmRiLTk2NTAtYzE5N2NjMTY1N2I1IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiUGFyZmFpdCAhIEonYWkgYXBwb3J0w6kgdW5lIHNvbHV0aW9uIHBsdXMgZGlyZWN0ZSBhdSBwcm9ibMOobWUgZW4gdXRpbGlzYW50IGB3aW5kb3cubG9jYXRpb24ucmVsb2FkKClgIHBvdXIgZm9yY2VyIHVuIHJlY2hhcmdlbWVudCBkZSBsYSBwYWdlIGFwcsOocyB1bmUgbWlzZSDDoCBqb3VyIHLDqXVzc2llLiBDZXR0ZSBhcHByb2NoZSBnYXJhbnRpdCBxdWUgbCfDqXRhdCBkdSBjb21wb3NhbnQgZXN0IGNvbXBsw6h0ZW1lbnQgcsOpaW5pdGlhbGlzw6kuXG5cblZvaWNpIGNlIHF1aSBzZSBwYXNzZXJhIG1haW50ZW5hbnQgOlxuXG4xLiBMb3JzcXVlIGwndXRpbGlzYXRldXIgbW9kaWZpZSBsZSBmb3JtdWxhaXJlIGV0IGNsaXF1ZSBzdXIgXCJFbnJlZ2lzdHJlciBsZXMgbW9kaWZpY2F0aW9uc1wiIDpcbiAgIC0gTGVzIGRvbm7DqWVzIHNvbnQgZW52b3nDqWVzIGF1IGJhY2tlbmQgdmlhIHVuZSByZXF1w6p0ZSBQVVRcbiAgIC0gTGVzIGRvbm7DqWVzIG1pc2VzIMOgIGpvdXIgc29udCBzYXV2ZWdhcmTDqWVzIGRhbnMgbGUgc3RhdGUgZXQgZGFucyBsZSBsb2NhbFN0b3JhZ2VcbiAgIC0gVW4gbWVzc2FnZSBkZSBzdWNjw6hzIGVzdCBhZmZpY2jDqVxuICAgLSBMYSBwYWdlIGVzdCByZWNoYXJnw6llLCBjZSBxdWkgcsOpaW5pdGlhbGlzZSBjb21wbMOodGVtZW50IGwnw6l0YXQgZHUgY29tcG9zYW50XG5cbjIuIEFwcsOocyBsZSByZWNoYXJnZW1lbnQgOlxuICAgLSBMZXMgZG9ubsOpZXMgc29udCBjaGFyZ8OpZXMgw6AgcGFydGlyIGR1IGxvY2FsU3RvcmFnZVxuICAgLSBMZSBjb21wb3NhbnQgQm9va0VkaXRGb3JtIGVzdCBpbml0aWFsaXPDqSBhdmVjIGNlcyBkb25uw6llc1xuICAgLSBMJ8OpdGF0IGBpc01vZGlmaWVkYCBlc3QgaW5pdGlhbGlzw6kgw6AgYGZhbHNlYCBwdWlzcXUnYXVjdW5lIG1vZGlmaWNhdGlvbiBuJ2EgZW5jb3JlIMOpdMOpIGFwcG9ydMOpZVxuICAgLSBMZSBib3V0b24gYWZmaWNoZSBcIlJldG91ciDDoCBsJ2FjY3VlaWxcIiBwdWlzcXVlIGxlcyBkb25uw6llcyBzb250IMOgIGpvdXJcblxuQ2V0dGUgc29sdXRpb24gZXN0IHBsdXMgcm9idXN0ZSBjYXIgZWxsZSBuZSBkw6lwZW5kIHBhcyBkZSBsYSBjb21wYXJhaXNvbiBkZXMgb2JqZXRzLCBxdWkgcGV1dCDDqnRyZSBkw6lsaWNhdGUgZW4gSmF2YVNjcmlwdC4gRW4gZm9yw6dhbnQgdW4gcmVjaGFyZ2VtZW50IGRlIGxhIHBhZ2UsIG5vdXMgZ2FyYW50aXNzb25zIHF1ZSBsJ8OpdGF0IGR1IGNvbXBvc2FudCBlc3QgY29tcGzDqHRlbWVudCByw6lpbml0aWFsaXPDqS5cblxuRXN0LWNlIHF1ZSBjZXR0ZSBzb2x1dGlvbiB2b3VzIGNvbnZpZW50ID8gU291aGFpdGV6LXZvdXMgYXBwb3J0ZXIgZCdhdXRyZXMgbW9kaWZpY2F0aW9ucyA/XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAxNTNcdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvcmNlciB1biByZWNoYXJnZW1lbnQgZHUgY29tcG9zYW50IHBvdXIgcsOpaW5pdGlhbGlzZXIgbCfDqXRhdFxuICAgMTU0XHQgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAxNTVcdCAgICAgICAgICAgICAgICAgICAgICB9XG4gICAxNTZcdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgIDE1N1x0ICAgICAgICAgICAgICAgICAgICAgIC8vIFBhcyBkJ0lELCBkb25jIG9uIG1ldCBzaW1wbGVtZW50IMOgIGpvdXIgbGUgc3RhdGVcbiAgIDE1OFx0ICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xuICAgMTU5XHQgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgMTYwXHQgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3Ryw6llcyBhdmVjIHN1Y2PDqHMhJyk7XG4gICAxNjFcdFxuICAgMTYyXHQgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yY2VyIHVuIHJlY2hhcmdlbWVudCBkdSBjb21wb3NhbnQgcG91ciByw6lpbml0aWFsaXNlciBsJ8OpdGF0XG4gICAxNjNcdCAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAxNjRcdCAgICAgICAgICAgICAgICAgICAgfVxuICAgMTY1XHQgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgMTY2XHQgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBsb3JzIGRlIGxhIG1pc2Ugw6Agam91ciBkZXMgZG9ubsOpZXM6JywgZXJyb3IpO1xuICAgMTY3XHQgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdVbmUgZXJyZXVyIGVzdCBzdXJ2ZW51ZSBsb3JzIGRlIGxhIG1pc2Ugw6Agam91ciBkZXMgZG9ubsOpZXMuJyk7XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDFFZGt6dkRRYWRHNjh1Q2NkUlN1dVNoIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQiLCJmb2xkZXJSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiUGFyZmFpdCAhIEonYWkgYXBwb3J0w6kgdW5lIHNvbHV0aW9uIHBsdXMgZGlyZWN0ZSBhdSBwcm9ibMOobWUgZW4gdXRpbGlzYW50IGB3aW5kb3cubG9jYXRpb24ucmVsb2FkKClgIHBvdXIgZm9yY2VyIHVuIHJlY2hhcmdlbWVudCBkZSBsYSBwYWdlIGFwcsOocyB1bmUgbWlzZSDDoCBqb3VyIHLDqXVzc2llLiBDZXR0ZSBhcHByb2NoZSBnYXJhbnRpdCBxdWUgbCfDqXRhdCBkdSBjb21wb3NhbnQgZXN0IGNvbXBsw6h0ZW1lbnQgcsOpaW5pdGlhbGlzw6kuXG5cblZvaWNpIGNlIHF1aSBzZSBwYXNzZXJhIG1haW50ZW5hbnQgOlxuXG4xLiBMb3JzcXVlIGwndXRpbGlzYXRldXIgbW9kaWZpZSBsZSBmb3JtdWxhaXJlIGV0IGNsaXF1ZSBzdXIgXCJFbnJlZ2lzdHJlciBsZXMgbW9kaWZpY2F0aW9uc1wiIDpcbiAgIC0gTGVzIGRvbm7DqWVzIHNvbnQgZW52b3nDqWVzIGF1IGJhY2tlbmQgdmlhIHVuZSByZXF1w6p0ZSBQVVRcbiAgIC0gTGVzIGRvbm7DqWVzIG1pc2VzIMOgIGpvdXIgc29udCBzYXV2ZWdhcmTDqWVzIGRhbnMgbGUgc3RhdGUgZXQgZGFucyBsZSBsb2NhbFN0b3JhZ2VcbiAgIC0gVW4gbWVzc2FnZSBkZSBzdWNjw6hzIGVzdCBhZmZpY2jDqVxuICAgLSBMYSBwYWdlIGVzdCByZWNoYXJnw6llLCBjZSBxdWkgcsOpaW5pdGlhbGlzZSBjb21wbMOodGVtZW50IGwnw6l0YXQgZHUgY29tcG9zYW50XG5cbjIuIEFwcsOocyBsZSByZWNoYXJnZW1lbnQgOlxuICAgLSBMZXMgZG9ubsOpZXMgc29udCBjaGFyZ8OpZXMgw6AgcGFydGlyIGR1IGxvY2FsU3RvcmFnZVxuICAgLSBMZSBjb21wb3NhbnQgQm9va0VkaXRGb3JtIGVzdCBpbml0aWFsaXPDqSBhdmVjIGNlcyBkb25uw6llc1xuICAgLSBMJ8OpdGF0IGBpc01vZGlmaWVkYCBlc3QgaW5pdGlhbGlzw6kgw6AgYGZhbHNlYCBwdWlzcXUnYXVjdW5lIG1vZGlmaWNhdGlvbiBuJ2EgZW5jb3JlIMOpdMOpIGFwcG9ydMOpZVxuICAgLSBMZSBib3V0b24gYWZmaWNoZSBcIlJldG91ciDDoCBsJ2FjY3VlaWxcIiBwdWlzcXVlIGxlcyBkb25uw6llcyBzb250IMOgIGpvdXJcblxuQ2V0dGUgc29sdXRpb24gZXN0IHBsdXMgcm9idXN0ZSBjYXIgZWxsZSBuZSBkw6lwZW5kIHBhcyBkZSBsYSBjb21wYXJhaXNvbiBkZXMgb2JqZXRzLCBxdWkgcGV1dCDDqnRyZSBkw6lsaWNhdGUgZW4gSmF2YVNjcmlwdC4gRW4gZm9yw6dhbnQgdW4gcmVjaGFyZ2VtZW50IGRlIGxhIHBhZ2UsIG5vdXMgZ2FyYW50aXNzb25zIHF1ZSBsJ8OpdGF0IGR1IGNvbXBvc2FudCBlc3QgY29tcGzDqHRlbWVudCByw6lpbml0aWFsaXPDqS5cblxuRXN0LWNlIHF1ZSBjZXR0ZSBzb2x1dGlvbiB2b3VzIGNvbnZpZW50ID8gU291aGFpdGV6LXZvdXMgYXBwb3J0ZXIgZCdhdXRyZXMgbW9kaWZpY2F0aW9ucyA/XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiJjMGZkMjBhNC04MDdhLTQ0NzQtOWU0OC04MWQ2MTAyZGRkZTIiLCJ1dWlkIjoiOTU4ZDVjNDAtZjlhZS00ZDJhLWE0MjYtNDVkY2NjNTVjMDNkIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy1jaGVja3BvaW50LWRlbGltaXRlciIsInN0YXR1cyI6InN1Y2Nlc3MiLCJmcm9tVGltZXN0YW1wIjoxNzQ0MzczOTMxNDgwLCJ0b1RpbWVzdGFtcCI6MTc0NDM3NDE5MTgzNywic2Vlbl9zdGF0ZSI6InNlZW4ifSx7InJlcXVlc3RfaWQiOiIxYWFmODIxMy03NDkxLTQ1ODQtOTgxYi0yNDcyOTQ0MmIyMGMiLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjgwNzVkYWFmLTVhNWMtNGM1ZC04NzBlLWQ3MTBmNDg2NjYxNSIsInJlcXVlc3RfbWVzc2FnZSI6InN1cHByaW1lIHR0IGxlcyBjb21tZW50YWlyZSBkZXMgZGV1eCBmaWNoaWVycywgZXQgdHQgY2UgcXVpIGVzdCBpbnV0aWxlIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6InN1cHByaW1lIHR0IGxlcyBjb21tZW50YWlyZSBkZXMgZGV1eCBmaWNoaWVycywgZXQgdHQgY2UgcXVpIGVzdCBpbnV0aWxlIn1dfV19LCJtZW50aW9uZWRfaXRlbXMiOltdLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxSE1lMm1CTloyU1M3VmZmMXV6OFM0OSIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4XCIsIFwidmlld19yYW5nZVwiOiBbODAsIDEwMF19In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJKZSB2YWlzIG5ldHRveWVyIGxlcyBkZXV4IGZpY2hpZXJzIGVuIHN1cHByaW1hbnQgdG91cyBsZXMgY29tbWVudGFpcmVzIGV0IGxlIGNvZGUgaW51dGlsZS5cblxuQ29tbWVuw6dvbnMgcGFyIGBCb29rRWRpdEZvcm0udHN4YCA6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjowLCJ0ZXh0X25vZGUiOnsiY29udGVudCI6InN1cHByaW1lIHR0IGxlcyBjb21tZW50YWlyZSBkZXMgZGV1eCBmaWNoaWVycywgZXQgdHQgY2UgcXVpIGVzdCBpbnV0aWxlIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQiLCJmb2xkZXJSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiSmUgdmFpcyBuZXR0b3llciBsZXMgZGV1eCBmaWNoaWVycyBlbiBzdXBwcmltYW50IHRvdXMgbGVzIGNvbW1lbnRhaXJlcyBldCBsZSBjb2RlIGludXRpbGUuXG5cbkNvbW1lbsOnb25zIHBhciBgQm9va0VkaXRGb3JtLnRzeGAgOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImNiOGIzNjA4LWUwOTEtNDkwOC1iOWMyLTkxMWFmZmRjZDc3YSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFOUTRoQTFoZVhieW5uNkJlNzdUd2RaIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4XCIsIFwic3RyX3JlcGxhY2VfZW50cmllc1wiOiBbe1wib2xkX3N0clwiOiBcIiAgLy8gU3VydmVpbGxlciBsZXMgY2hhbmdlbWVudHMgZGFucyBsZSBmb3JtdWxhaXJlXFxuICBjb25zdCBmb3JtVmFsdWVzID0gd2F0Y2goKTtcXG5cXG4gIC8vIEVmZmV0IHBvdXIgaW5pdGlhbGlzZXIgbGVzIHZhbGV1cnMgb3JpZ2luYWxlc1xcbiAgdXNlRWZmZWN0KCgpID0+IHtcXG4gICAgY29uc29sZS53YXJuKCdpbml0aWFsRGF0YScsIGluaXRpYWxEYXRhKVxcbiAgICAvLyBDaGFxdWUgZm9pcyBxdWUgaW5pdGlhbERhdGEgY2hhbmdlLCBtZXR0cmUgXFx1MDBlMCBqb3VyIGxlcyB2YWxldXJzIG9yaWdpbmFsZXNcXG4gICAgY29uc3QgbmV3T3JpZ2luYWxWYWx1ZXMgPSBKU09OLnN0cmluZ2lmeShjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMoaW5pdGlhbERhdGEpKTtcXG4gICAgc2V0T3JpZ2luYWxWYWx1ZXMobmV3T3JpZ2luYWxWYWx1ZXMpO1xcbiAgfSwgW2luaXRpYWxEYXRhXSk7XFxuXFxuICAvLyBFZmZldCBwb3VyIGRcXHUwMGU5dGVjdGVyIGxlcyBtb2RpZmljYXRpb25zXFxuICB1c2VFZmZlY3QoKCkgPT4ge1xcbiAgICBpZiAob3JpZ2luYWxWYWx1ZXMgJiYgZm9ybVZhbHVlcykge1xcbiAgICAgIHRyeSB7XFxuICAgICAgICAvLyBDb21wYXJlciBsZXMgb2JqZXRzIGVuIGlnbm9yYW50IGxlcyBwcm9wcmlcXHUwMGU5dFxcdTAwZTlzIG5vbiBwZXJ0aW5lbnRlc1xcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxPYmogPSBKU09OLnBhcnNlKG9yaWdpbmFsVmFsdWVzKTtcXG5cXG4gICAgICAgIC8vIFV0aWxpc2VyIHVuZSBjb21wYXJhaXNvbiBwcm9mb25kZSBwb3VyIGRcXHUwMGU5dGVjdGVyIGxlcyBtb2RpZmljYXRpb25zXFxuICAgICAgICBjb25zdCBtb2RpZmllZCA9ICFpc0VxdWFsKGZvcm1WYWx1ZXMsIG9yaWdpbmFsT2JqKTtcXG4gICAgICAgIGNvbnNvbGUubG9nKCdpc01vZGlmaWVkJywgbW9kaWZpZWQpO1xcbiAgICAgICAgc2V0SXNNb2RpZmllZChtb2RpZmllZCk7XFxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBsb3JzIGRlIGxhIGNvbXBhcmFpc29uIGRlcyBvYmpldHM6JywgZXJyb3IpO1xcblxcbiAgICAgIH0gICAgfVwiLCBcIm5ld19zdHJcIjogXCIgIGNvbnN0IGZvcm1WYWx1ZXMgPSB3YXRjaCgpO1xcblxcbiAgdXNlRWZmZWN0KCgpID0+IHtcXG4gICAgY29uc3QgbmV3T3JpZ2luYWxWYWx1ZXMgPSBKU09OLnN0cmluZ2lmeShjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMoaW5pdGlhbERhdGEpKTtcXG4gICAgc2V0T3JpZ2luYWxWYWx1ZXMobmV3T3JpZ2luYWxWYWx1ZXMpO1xcbiAgfSwgW2luaXRpYWxEYXRhXSk7XFxuXFxuICB1c2VFZmZlY3QoKCkgPT4ge1xcbiAgICBpZiAob3JpZ2luYWxWYWx1ZXMgJiYgZm9ybVZhbHVlcykge1xcbiAgICAgIHRyeSB7XFxuICAgICAgICBjb25zdCBvcmlnaW5hbE9iaiA9IEpTT04ucGFyc2Uob3JpZ2luYWxWYWx1ZXMpO1xcbiAgICAgICAgY29uc3QgbW9kaWZpZWQgPSAhaXNFcXVhbChmb3JtVmFsdWVzLCBvcmlnaW5hbE9iaik7XFxuICAgICAgICBzZXRJc01vZGlmaWVkKG1vZGlmaWVkKTtcXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgY29tcGFyYWlzb24gZGVzIG9iamV0czonLCBlcnJvcik7XFxuICAgICAgfVxcbiAgICB9XCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlclwiOiA4MSwgXCJvbGRfc3RyX2VuZF9saW5lX251bWJlclwiOiAxMDZ9XX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoidW5zZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4OlxuICAgIDgwXHRcbiAgICA4MVx0ICAvLyBTdXJ2ZWlsbGVyIGxlcyBjaGFuZ2VtZW50cyBkYW5zIGxlIGZvcm11bGFpcmVcbiAgICA4Mlx0ICBjb25zdCBmb3JtVmFsdWVzID0gd2F0Y2goKTtcbiAgICA4M1x0XG4gICAgODRcdCAgLy8gRWZmZXQgcG91ciBpbml0aWFsaXNlciBsZXMgdmFsZXVycyBvcmlnaW5hbGVzXG4gICAgODVcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICA4Nlx0ICAgIGNvbnNvbGUud2FybignaW5pdGlhbERhdGEnLCBpbml0aWFsRGF0YSlcbiAgICA4N1x0ICAgIC8vIENoYXF1ZSBmb2lzIHF1ZSBpbml0aWFsRGF0YSBjaGFuZ2UsIG1ldHRyZSDDoCBqb3VyIGxlcyB2YWxldXJzIG9yaWdpbmFsZXNcbiAgICA4OFx0ICAgIGNvbnN0IG5ld09yaWdpbmFsVmFsdWVzID0gSlNPTi5zdHJpbmdpZnkoY29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzKGluaXRpYWxEYXRhKSk7XG4gICAgODlcdCAgICBzZXRPcmlnaW5hbFZhbHVlcyhuZXdPcmlnaW5hbFZhbHVlcyk7XG4gICAgOTBcdCAgfSwgW2luaXRpYWxEYXRhXSk7XG4gICAgOTFcdFxuICAgIDkyXHQgIC8vIEVmZmV0IHBvdXIgZMOpdGVjdGVyIGxlcyBtb2RpZmljYXRpb25zXG4gICAgOTNcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICA5NFx0ICAgIGlmIChvcmlnaW5hbFZhbHVlcyAmJiBmb3JtVmFsdWVzKSB7XG4gICAgOTVcdCAgICAgIHRyeSB7XG4gICAgOTZcdCAgICAgICAgLy8gQ29tcGFyZXIgbGVzIG9iamV0cyBlbiBpZ25vcmFudCBsZXMgcHJvcHJpw6l0w6lzIG5vbiBwZXJ0aW5lbnRlc1xuICAgIDk3XHQgICAgICAgIGNvbnN0IG9yaWdpbmFsT2JqID0gSlNPTi5wYXJzZShvcmlnaW5hbFZhbHVlcyk7XG4gICAgOThcdFxuICAgIDk5XHQgICAgICAgIC8vIFV0aWxpc2VyIHVuZSBjb21wYXJhaXNvbiBwcm9mb25kZSBwb3VyIGTDqXRlY3RlciBsZXMgbW9kaWZpY2F0aW9uc1xuICAgMTAwXHQgICAgICAgIGNvbnN0IG1vZGlmaWVkID0gIWlzRXF1YWwoZm9ybVZhbHVlcywgb3JpZ2luYWxPYmopO1xuVG90YWwgbGluZXMgaW4gZmlsZTogMzc4XG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxSE1lMm1CTloyU1M3VmZmMXV6OFM0OSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250IiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjQsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifX19XSwicmVzcG9uc2VfdGV4dCI6IiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJiN2Y3ZDc0MS1iZmQ5LTRkMmItYjZjNS1mOTJkOWI0OGIwNWEiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxSnB0TGRFNThOcFVCVmNpMkc4R0dKaSIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4XCJ9In19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJWb3lvbnMgbGUgY29udGVudSBjb21wbGV0IGR1IGZpY2hpZXIgcG91ciBmYWlyZSB1biBuZXR0b3lhZ2UgcGx1cyBwcsOpY2lzIDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoidW5zZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiRmFpbGVkIHRvIGVkaXQgdGhlIGZpbGUgc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeC4gU2VlIGJlbG93IGZvciBkZXRhaWxzLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuTm8gcmVwbGFjZW1lbnQgd2FzIHBlcmZvcm1lZCwgb2xkU3RyIGRpZCBub3QgYXBwZWFyIHZlcmJhdGltIGluIHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3guXG5UaGUgY29udGVudCBpbiB0aGUgc3BlY2lmaWVkIHJlZ2lvbiBpczpcbiAgICA3N1x0ICAgIGNvbnRyb2wsXG4gICAgNzhcdCAgICBuYW1lOiBcInJlY29tbWVuZGF0aW9uc1wiLFxuICAgIDc5XHQgIH0pO1xuICAgIDgwXHRcbiAgICA4MVx0ICAvLyBTdXJ2ZWlsbGVyIGxlcyBjaGFuZ2VtZW50cyBkYW5zIGxlIGZvcm11bGFpcmVcbiAgICA4Mlx0ICBjb25zdCBmb3JtVmFsdWVzID0gd2F0Y2goKTtcbiAgICA4M1x0XG4gICAgODRcdCAgLy8gRWZmZXQgcG91ciBpbml0aWFsaXNlciBsZXMgdmFsZXVycyBvcmlnaW5hbGVzXG4gICAgODVcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICA4Nlx0ICAgIGNvbnNvbGUud2FybignaW5pdGlhbERhdGEnLCBpbml0aWFsRGF0YSlcbiAgICA4N1x0ICAgIC8vIENoYXF1ZSBmb2lzIHF1ZSBpbml0aWFsRGF0YSBjaGFuZ2UsIG1ldHRyZSDDoCBqb3VyIGxlcyB2YWxldXJzIG9yaWdpbmFsZXNcbiAgICA4OFx0ICAgIGNvbnN0IG5ld09yaWdpbmFsVmFsdWVzID0gSlNPTi5zdHJpbmdpZnkoY29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzKGluaXRpYWxEYXRhKSk7XG4gICAgODlcdCAgICBzZXRPcmlnaW5hbFZhbHVlcyhuZXdPcmlnaW5hbFZhbHVlcyk7XG4gICAgOTBcdCAgfSwgW2luaXRpYWxEYXRhXSk7XG4gICAgOTFcdFxuICAgIDkyXHQgIC8vIEVmZmV0IHBvdXIgZMOpdGVjdGVyIGxlcyBtb2RpZmljYXRpb25zXG4gICAgOTNcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICA5NFx0ICAgIGlmIChvcmlnaW5hbFZhbHVlcyAmJiBmb3JtVmFsdWVzKSB7XG4gICAgOTVcdCAgICAgIHRyeSB7XG4gICAgOTZcdCAgICAgICAgLy8gQ29tcGFyZXIgbGVzIG9iamV0cyBlbiBpZ25vcmFudCBsZXMgcHJvcHJpw6l0w6lzIG5vbiBwZXJ0aW5lbnRlc1xuICAgIDk3XHQgICAgICAgIGNvbnN0IG9yaWdpbmFsT2JqID0gSlNPTi5wYXJzZShvcmlnaW5hbFZhbHVlcyk7XG4gICAgOThcdFxuICAgIDk5XHQgICAgICAgIC8vIFV0aWxpc2VyIHVuZSBjb21wYXJhaXNvbiBwcm9mb25kZSBwb3VyIGTDqXRlY3RlciBsZXMgbW9kaWZpY2F0aW9uc1xuICAgMTAwXHQgICAgICAgIGNvbnN0IG1vZGlmaWVkID0gIWlzRXF1YWwoZm9ybVZhbHVlcywgb3JpZ2luYWxPYmopO1xuICAgMTAxXHQgICAgICAgIHNldElzTW9kaWZpZWQobW9kaWZpZWQpO1xuICAgMTAyXHQgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgMTAzXHQgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBsb3JzIGRlIGxhIGNvbXBhcmFpc29uIGRlcyBvYmpldHM6JywgZXJyb3IpO1xuICAgMTA0XHRcbiAgIDEwNVx0ICAgICAgfSAgICB9XG4gICAxMDZcdCAgfSwgW2Zvcm1WYWx1ZXMsIG9yaWdpbmFsVmFsdWVzXSk7XG4gICAxMDdcdFxuICAgMTA4XHQgIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XG4gICAxMDlcdCAgICAvLyBTaSBhdWN1bmUgbW9kaWZpY2F0aW9uLCByZWRpcmlnZXIgdmVycyBsYSBwYWdlIGQnYWNjdWVpbFxuICAgMTEwXHQgICAgaWYgKCFpc01vZGlmaWVkKSB7XG5cbkRpZmYgYmV0d2VlbiBvbGRTdHIgYW5kIHRoZSBzcGVjaWZpZWQgcmVnaW9uIGlzOlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLS0tIG9sZFN0clxuKysrIHJlZ2lvbkNvbnRlbnRcbkBAIC0xOCw5ICsxOCw5IEBAXG4gXG4gICAgICAgICAvLyBVdGlsaXNlciB1bmUgY29tcGFyYWlzb24gcHJvZm9uZGUgcG91ciBkw6l0ZWN0ZXIgbGVzIG1vZGlmaWNhdGlvbnNcbiAgICAgICAgIGNvbnN0IG1vZGlmaWVkID0gIWlzRXF1YWwoZm9ybVZhbHVlcywgb3JpZ2luYWxPYmopO1xuLSAgICAgICAgY29uc29sZS5sb2coJ2lzTW9kaWZpZWQnLCBtb2RpZmllZCk7XG4gICAgICAgICBzZXRJc01vZGlmaWVkKG1vZGlmaWVkKTtcbiAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgY29tcGFyYWlzb24gZGVzIG9iamV0czonLCBlcnJvcik7XG4gXG4gICAgICAgfSAgICB9XG4rICB9LCBbZm9ybVZhbHVlcywgb3JpZ2luYWxWYWx1ZXNdKTtcblxuXG5GaXggZmFpbGVkIHN0cl9yZXBsYWNlX2VudHJpZXMgYWNjb3JkaW5nbHkgYW5kIHRyeSBhZ2Fpbi5cbiIsImlzX2Vycm9yIjp0cnVlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMU5RNGhBMWhlWGJ5bm42QmU3N1R3ZFoifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCIsImZvbGRlclJvb3QiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo0LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy9lcmF0ZWwvRG9jdW1lbnRzL3lub3YveW5vdk0xL2hhY2thdGhvbkhvc3RCb29rL2hvc3RCb29rLWZyb250In19fV0sInJlc3BvbnNlX3RleHQiOiJWb3lvbnMgbGUgY29udGVudSBjb21wbGV0IGR1IGZpY2hpZXIgcG91ciBmYWlyZSB1biBuZXR0b3lhZ2UgcGx1cyBwcsOpY2lzIDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJjZDc5OTgyZi02NTI4LTQzMjktOWNkMi01ZTY2OTg1ZWM4YWIiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxQXVyOFA4Y0xZa1JoZUNxWkFxakFWMSIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeFwiLCBcInZpZXdfcmFuZ2VcIjogWzExMCwgMTY1XX0ifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoidW5zZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4OlxuICAgICAxXHQndXNlIGNsaWVudCc7XG4gICAgIDJcdFxuICAgICAzXHRpbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuICAgICA0XHRpbXBvcnQgeyB1c2VGb3JtLCB1c2VGaWVsZEFycmF5IH0gZnJvbSAncmVhY3QtaG9vay1mb3JtJztcbiAgICAgNVx0aW1wb3J0IHsgem9kUmVzb2x2ZXIgfSBmcm9tICdAaG9va2Zvcm0vcmVzb2x2ZXJzL3pvZCc7XG4gICAgIDZcdGltcG9ydCB7IEJvb2tEYXRhIH0gZnJvbSAnQC90eXBlcy9Cb29rRGF0YSc7XG4gICAgIDdcdGltcG9ydCB7IEJvb2tGb3JtU2NoZW1hLCBCb29rRm9ybVZhbHVlc1R5cGUgfSBmcm9tICcuL3NjaGVtYXMvQm9va0Zvcm1TY2hlbWEnO1xuICAgICA4XHRpbXBvcnQgSW5wdXRGb3JtIGZyb20gJy4vSW5wdXRGb3JtJztcbiAgICAgOVx0aW1wb3J0IHsgUGx1c0NpcmNsZSwgUGFsbXRyZWUsIFBsYW5lLCBIb21lLCBNYXBQaW4sIEFycm93TGVmdCB9IGZyb20gJ2x1Y2lkZS1yZWFjdCc7XG4gICAgMTBcdGltcG9ydCBSZWNvbW1lbmRhdGlvbiBmcm9tICcuL1JlY29tbWVuZGF0aW9uJztcbiAgICAxMVx0aW1wb3J0IHsgbW90aW9uIH0gZnJvbSAnZnJhbWVyLW1vdGlvbic7XG4gICAgMTJcdGltcG9ydCB7IEFjY29yZGlvbiwgQWNjb3JkaW9uQ29udGVudCwgQWNjb3JkaW9uSXRlbSwgQWNjb3JkaW9uVHJpZ2dlciB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9hY2NvcmRpb24nO1xuICAgIDEzXHRpbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tICduZXh0L25hdmlnYXRpb24nO1xuICAgIDE0XHRpbXBvcnQgaXNFcXVhbCBmcm9tICdsb2Rhc2guaXNlcXVhbCc7XG4gICAgMTVcdFxuICAgIDE2XHRjb25zdCBjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMgPSAoZGF0YTogQm9va0RhdGEgfCB1bmRlZmluZWQpOiBCb29rRm9ybVZhbHVlc1R5cGUgPT4ge1xuICAgIDE3XHQgIHJldHVybiB7XG4gICAgMThcdCAgICBpZDogZGF0YT8uaWQsXG4gICAgMTlcdCAgICBhcnJpdmFsVGltZTogZGF0YT8uYXJyaXZhbFRpbWUgfHwgJycsXG4gICAgMjBcdCAgICBhY2Nlc3NJbnN0cnVjdGlvbnM6IGRhdGE/LmFjY2Vzc0luc3RydWN0aW9ucyB8fCAnJyxcbiAgICAyMVx0ICAgIGFycml2YWxBZGRpdGlvbmFsSW5mbzogZGF0YT8uYXJyaXZhbEFkZGl0aW9uYWxJbmZvIHx8ICcnLFxuICAgIDIyXHQgICAgZGVwYXJ0dXJlVGltZTogZGF0YT8uZGVwYXJ0dXJlVGltZSB8fCAnJyxcbiAgICAyM1x0ICAgIGV4aXRJbnN0cnVjdGlvbnM6IGRhdGE/LmV4aXRJbnN0cnVjdGlvbnMgfHwgJycsXG4gICAgMjRcdCAgICBkZXBhcnR1cmVBZGRpdGlvbmFsSW5mbzogZGF0YT8uZGVwYXJ0dXJlQWRkaXRpb25hbEluZm8gfHwgJycsXG4gICAgMjVcdCAgICB3aWZpTmFtZTogZGF0YT8ud2lmaU5hbWUgfHwgJycsXG4gICAgMjZcdCAgICB3aWZpUGFzc3dvcmQ6IGRhdGE/LndpZmlQYXNzd29yZCB8fCAnJyxcbiAgICAyN1x0ICAgIGhvdXNlUnVsZXM6IGRhdGE/LmhvdXNlUnVsZXMgfHwgJycsXG4gICAgMjhcdCAgICBvd25lckNvbnRhY3Q6IGRhdGE/Lm93bmVyQ29udGFjdCB8fCAnJyxcbiAgICAyOVx0ICAgIG93bmVyTmFtZTogZGF0YT8ub3duZXJOYW1lIHx8ICcnLFxuICAgIDMwXHQgICAgZ2VuZXJhbEluZm86IGRhdGE/LmdlbmVyYWxJbmZvIHx8ICcnLFxuICAgIDMxXHQgICAgcmVjb21tZW5kYXRpb25zOiBkYXRhPy5yZWNvbW1lbmRhdGlvbnMgfHwgW10sXG4gICAgMzJcdCAgfTtcbiAgICAzM1x0fTtcbiAgICAzNFx0XG4gICAgMzVcdGNvbnN0IGNvbnZlcnRGb3JtVmFsdWVzVG9Cb29rRGF0YSA9ICh2YWx1ZXM6IEJvb2tGb3JtVmFsdWVzVHlwZSk6IEJvb2tEYXRhID0+IHtcbiAgICAzNlx0ICByZXR1cm4ge1xuICAgIDM3XHQgICAgaWQ6IHZhbHVlcy5pZCxcbiAgICAzOFx0ICAgIGFycml2YWxUaW1lOiB2YWx1ZXMuYXJyaXZhbFRpbWUsXG4gICAgMzlcdCAgICBhY2Nlc3NJbnN0cnVjdGlvbnM6IHZhbHVlcy5hY2Nlc3NJbnN0cnVjdGlvbnMsXG4gICAgNDBcdCAgICBhcnJpdmFsQWRkaXRpb25hbEluZm86IHZhbHVlcy5hcnJpdmFsQWRkaXRpb25hbEluZm8gfHwgJycsXG4gICAgNDFcdCAgICBkZXBhcnR1cmVUaW1lOiB2YWx1ZXMuZGVwYXJ0dXJlVGltZSxcbiAgICA0Mlx0ICAgIGV4aXRJbnN0cnVjdGlvbnM6IHZhbHVlcy5leGl0SW5zdHJ1Y3Rpb25zLFxuICAgIDQzXHQgICAgZGVwYXJ0dXJlQWRkaXRpb25hbEluZm86IHZhbHVlcy5kZXBhcnR1cmVBZGRpdGlvbmFsSW5mbyB8fCAnJyxcbiAgICA0NFx0ICAgIHdpZmlOYW1lOiB2YWx1ZXMud2lmaU5hbWUsXG4gICAgNDVcdCAgICB3aWZpUGFzc3dvcmQ6IHZhbHVlcy53aWZpUGFzc3dvcmQsXG4gICAgNDZcdCAgICBob3VzZVJ1bGVzOiB2YWx1ZXMuaG91c2VSdWxlcyxcbiAgICA0N1x0ICAgIG93bmVyQ29udGFjdDogdmFsdWVzLm93bmVyQ29udGFjdCxcbiAgICA0OFx0ICAgIG93bmVyTmFtZTogdmFsdWVzLm93bmVyTmFtZSxcbiAgICA0OVx0ICAgIGdlbmVyYWxJbmZvOiB2YWx1ZXMuZ2VuZXJhbEluZm8gfHwgJycsXG4gICAgNTBcdCAgICByZWNvbW1lbmRhdGlvbnM6IHZhbHVlcy5yZWNvbW1lbmRhdGlvbnMgfHwgW10sXG4gICAgNTFcdCAgfTtcbiAgICA1Mlx0fTtcbiAgICA1M1x0XG4gICAgNTRcdGludGVyZmFjZSBCb29rRWRpdEZvcm1Qcm9wcyB7XG4gICAgNTVcdCAgaW5pdGlhbERhdGE/OiBCb29rRGF0YTtcbiAgICA1Nlx0ICBvblN1Ym1pdD86IChkYXRhOiBCb29rRGF0YSkgPT4gdm9pZDtcbiAgICA1N1x0fVxuICAgIDU4XHRcbiAgICA1OVx0ZXhwb3J0IGZ1bmN0aW9uIEJvb2tFZGl0Rm9ybSh7IGluaXRpYWxEYXRhLCBvblN1Ym1pdCB9OiBCb29rRWRpdEZvcm1Qcm9wcykge1xuICAgIDYwXHQgIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xuICAgIDYxXHQgIGNvbnN0IFtpc1NhdmluZywgc2V0SXNTYXZpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIDYyXHQgIGNvbnN0IFtpc01vZGlmaWVkLCBzZXRJc01vZGlmaWVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICA2M1x0ICBjb25zdCBbb3JpZ2luYWxWYWx1ZXMsIHNldE9yaWdpbmFsVmFsdWVzXSA9IHVzZVN0YXRlPHN0cmluZz4oJycpO1xuICAgIDY0XHRcbiAgICA2NVx0ICBjb25zdCB7XG4gICAgNjZcdCAgICByZWdpc3RlcixcbiAgICA2N1x0ICAgIGhhbmRsZVN1Ym1pdCxcbiAgICA2OFx0ICAgIGNvbnRyb2wsXG4gICAgNjlcdCAgICB3YXRjaCxcbiAgICA3MFx0ICAgIGZvcm1TdGF0ZTogeyBlcnJvcnMsIGlzRGlydHkgfSxcbiAgICA3MVx0ICB9ID0gdXNlRm9ybTxCb29rRm9ybVZhbHVlc1R5cGU+KHtcbiAgICA3Mlx0ICAgIHJlc29sdmVyOiB6b2RSZXNvbHZlcihCb29rRm9ybVNjaGVtYSkgYXMgYW55LFxuICAgIDczXHQgICAgZGVmYXVsdFZhbHVlczogY29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzKGluaXRpYWxEYXRhKSxcbiAgICA3NFx0ICB9KTtcbiAgICA3NVx0XG4gICAgNzZcdCAgY29uc3QgeyBmaWVsZHMsIGFwcGVuZCwgcmVtb3ZlIH0gPSB1c2VGaWVsZEFycmF5KHtcbiAgICA3N1x0ICAgIGNvbnRyb2wsXG4gICAgNzhcdCAgICBuYW1lOiBcInJlY29tbWVuZGF0aW9uc1wiLFxuICAgIDc5XHQgIH0pO1xuICAgIDgwXHRcbiAgICA4MVx0ICAvLyBTdXJ2ZWlsbGVyIGxlcyBjaGFuZ2VtZW50cyBkYW5zIGxlIGZvcm11bGFpcmVcbiAgICA4Mlx0ICBjb25zdCBmb3JtVmFsdWVzID0gd2F0Y2goKTtcbiAgICA4M1x0XG4gICAgODRcdCAgLy8gRWZmZXQgcG91ciBpbml0aWFsaXNlciBsZXMgdmFsZXVycyBvcmlnaW5hbGVzXG4gICAgODVcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICA4Nlx0ICAgIGNvbnNvbGUud2FybignaW5pdGlhbERhdGEnLCBpbml0aWFsRGF0YSlcbiAgICA4N1x0ICAgIC8vIENoYXF1ZSBmb2lzIHF1ZSBpbml0aWFsRGF0YSBjaGFuZ2UsIG1ldHRyZSDDoCBqb3VyIGxlcyB2YWxldXJzIG9yaWdpbmFsZXNcbiAgICA4OFx0ICAgIGNvbnN0IG5ld09yaWdpbmFsVmFsdWVzID0gSlNPTi5zdHJpbmdpZnkoY29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzKGluaXRpYWxEYXRhKSk7XG4gICAgODlcdCAgICBzZXRPcmlnaW5hbFZhbHVlcyhuZXdPcmlnaW5hbFZhbHVlcyk7XG4gICAgOTBcdCAgfSwgW2luaXRpYWxEYXRhXSk7XG4gICAgOTFcdFxuICAgIDkyXHQgIC8vIEVmZmV0IHBvdXIgZMOpdGVjdGVyIGxlcyBtb2RpZmljYXRpb25zXG4gICAgOTNcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICA5NFx0ICAgIGlmIChvcmlnaW5hbFZhbHVlcyAmJiBmb3JtVmFsdWVzKSB7XG4gICAgOTVcdCAgICAgIHRyeSB7XG4gICAgOTZcdCAgICAgICAgLy8gQ29tcGFyZXIgbGVzIG9iamV0cyBlbiBpZ25vcmFudCBsZXMgcHJvcHJpw6l0w6lzIG5vbiBwZXJ0aW5lbnRlc1xuICAgIDk3XHQgICAgICAgIGNvbnN0IG9yaWdpbmFsT2JqID0gSlNPTi5wYXJzZShvcmlnaW5hbFZhbHVlcyk7XG4gICAgOThcdFxuICAgIDk5XHQgICAgICAgIC8vIFV0aWxpc2VyIHVuZSBjb21wYXJhaXNvbiBwcm9mb25kZSBwb3VyIGTDqXRlY3RlciBsZXMgbW9kaWZpY2F0aW9uc1xuICAgMTAwXHQgICAgICAgIGNvbnN0IG1vZGlmaWVkID0gIWlzRXF1YWwoZm9ybVZhbHVlcywgb3JpZ2luYWxPYmopO1xuICAgMTAxXHQgICAgICAgIHNldElzTW9kaWZpZWQobW9kaWZpZWQpO1xuICAgMTAyXHQgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgMTAzXHQgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBsb3JzIGRlIGxhIGNvbXBhcmFpc29uIGRlcyBvYmpldHM6JywgZXJyb3IpO1xuICAgMTA0XHRcbiAgIDEwNVx0ICAgICAgfSAgICB9XG4gICAxMDZcdCAgfSwgW2Zvcm1WYWx1ZXMsIG9yaWdpbmFsVmFsdWVzXSk7XG4gICAxMDdcdFxuICAgMTA4XHQgIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XG4gICAxMDlcdCAgICAvLyBTaSBhdWN1bmUgbW9kaWZpY2F0aW9uLCByZWRpcmlnZXIgdmVycyBsYSBwYWdlIGQnYWNjdWVpbFxuICAgMTEwXHQgICAgaWYgKCFpc01vZGlmaWVkKSB7XG4gICAxMTFcdCAgICAgIHJvdXRlci5wdXNoKCcvJyk7XG4gICAxMTJcdCAgICAgIHJldHVybjtcbiAgIDExM1x0ICAgIH1cbiAgIDExNFx0XG4gICAxMTVcdCAgICAvLyBTaSBkZXMgbW9kaWZpY2F0aW9ucyBvbnQgw6l0w6kgZWZmZWN0dcOpZXMsIHNvdW1ldHRyZSBsZXMgZG9ubsOpZXNcbiAgIDExNlx0ICAgIHNldElzU2F2aW5nKHRydWUpO1xuICAgMTE3XHQgICAgY29uc3QgYm9va0RhdGEgPSBjb252ZXJ0Rm9ybVZhbHVlc1RvQm9va0RhdGEoZGF0YSk7XG4gICAxMThcdFxuICAgMTE5XHQgICAgaWYgKG9uU3VibWl0KSB7XG4gICAxMjBcdCAgICAgIC8vIFBhc3NlciBsZXMgZG9ubsOpZXMgYXUgY29tcG9zYW50IHBhcmVudCBxdWkgZ8OocmVyYSBsYSByZXF1w6p0ZSBQVVRcbiAgIDEyMVx0ICAgICAgb25TdWJtaXQoYm9va0RhdGEpO1xuICAgMTIyXHQgICAgfVxuICAgMTIzXHRcbiAgIDEyNFx0ICAgIC8vIFLDqWluaXRpYWxpc2VyIGwnw6l0YXQgZGUgc2F1dmVnYXJkZSBhcHLDqHMgdW4gY291cnQgZMOpbGFpXG4gICAxMjVcdCAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgIDEyNlx0ICAgICAgc2V0SXNTYXZpbmcoZmFsc2UpO1xuICAgMTI3XHQgICAgfSwgMTAwMCk7XG4gICAxMjhcdCAgfTtcbiAgIDEyOVx0XG4gICAxMzBcdFxuICAgMTMxXHQgIGNvbnN0IGNvbnRhaW5lclZhcmlhbnRzID0ge1xuICAgMTMyXHQgICAgaGlkZGVuOiB7IG9wYWNpdHk6IDAgfSxcbiAgIDEzM1x0ICAgIHZpc2libGU6IHtcbiAgIDEzNFx0ICAgICAgb3BhY2l0eTogMSxcbiAgIDEzNVx0ICAgICAgdHJhbnNpdGlvbjoge1xuICAgMTM2XHQgICAgICAgIHN0YWdnZXJDaGlsZHJlbjogMC4yXG4gICAxMzdcdCAgICAgIH1cbiAgIDEzOFx0ICAgIH1cbiAgIDEzOVx0ICB9O1xuICAgMTQwXHRcbiAgIDE0MVx0ICBjb25zdCBpdGVtVmFyaWFudHMgPSB7XG4gICAxNDJcdCAgICBoaWRkZW46IHsgeTogMjAsIG9wYWNpdHk6IDAgfSxcbiAgIDE0M1x0ICAgIHZpc2libGU6IHtcbiAgIDE0NFx0ICAgICAgeTogMCxcbiAgIDE0NVx0ICAgICAgb3BhY2l0eTogMSxcbiAgIDE0Nlx0ICAgICAgdHJhbnNpdGlvbjoge1xuICAgMTQ3XHQgICAgICAgIHR5cGU6ICdzcHJpbmcnLFxuICAgMTQ4XHQgICAgICAgIHN0aWZmbmVzczogMTAwLFxuICAgMTQ5XHQgICAgICAgIGRhbXBpbmc6IDEyXG4gICAxNTBcdCAgICAgIH1cbiAgIDE1MVx0ICAgIH1cbiAgIDE1Mlx0ICB9O1xuICAgMTUzXHRcbiAgIDE1NFx0ICByZXR1cm4gKFxuICAgMTU1XHQgICAgPG1vdGlvbi5mb3JtXG4gICAxNTZcdCAgICAgIGluaXRpYWw9XCJoaWRkZW5cIlxuICAgMTU3XHQgICAgICBhbmltYXRlPVwidmlzaWJsZVwiXG4gICAxNThcdCAgICAgIHZhcmlhbnRzPXtjb250YWluZXJWYXJpYW50c31cbiAgIDE1OVx0ICAgICAgb25TdWJtaXQ9e2hhbmRsZVN1Ym1pdChoYW5kbGVGb3JtU3VibWl0IGFzIGFueSl9XG4gICAxNjBcdCAgICAgIGNsYXNzTmFtZT1cInNwYWNlLXktOCByb3VuZGVkLXhsIGJnLWdyYWRpZW50LXRvLWJyIGZyb20tb3JhbmdlLTUwIHRvLWFtYmVyLTUwIHAtOCBzaGFkb3ctbGcgYm9yZGVyIGJvcmRlci1hbWJlci0xMDBcIlxuICAgMTYxXHQgICAgPlxuICAgMTYyXHQgICAgICA8QWNjb3JkaW9uIHR5cGU9XCJzaW5nbGVcIiBjb2xsYXBzaWJsZSAgY2xhc3NOYW1lPVwidy1mdWxsIHNwYWNlLXktNFwiPlxuICAgMTYzXHQgICAgICA8QWNjb3JkaW9uSXRlbSB2YWx1ZT1cImFycml2YWxcIiBjbGFzc05hbWU9XCJib3JkZXItbm9uZVwiID5cbiAgIDE2NFx0ICAgICAgICA8bW90aW9uLmRpdlxuICAgMTY1XHQgICAgICAgICAgdmFyaWFudHM9e2l0ZW1WYXJpYW50c31cbiAgIDE2Nlx0ICAgICAgICAgIGNsYXNzTmFtZT1cImJnLXdoaXRlLzgwIHJvdW5kZWQtbGcgc2hhZG93LXNtIGJvcmRlci1sLTQgYm9yZGVyLVsjZjA0YzIzXSBvdmVyZmxvdy1oaWRkZW5cIlxuICAgMTY3XHQgICAgICAgID5cbiAgIDE2OFx0ICAgICAgICAgIDxBY2NvcmRpb25UcmlnZ2VyIGNsYXNzTmFtZT1cInB4LTYgcHktNCBob3Zlcjpuby11bmRlcmxpbmUgaG92ZXI6Ymctb3JhbmdlLTUwLzUwIHRyYW5zaXRpb24tYWxsXCI+XG4gICAxNjlcdCAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQteGwgZm9udC1zZW1pYm9sZCB0ZXh0LVsjZjA0YzIzXSBmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgMTcwXHQgICAgICAgICAgICAgIDxQbGFuZSBjbGFzc05hbWU9XCJoLTUgdy01XCIgLz4gQXJyaXbDqWVcbiAgIDE3MVx0ICAgICAgICAgICAgPC9zcGFuPlxuICAgMTcyXHQgICAgICAgICAgPC9BY2NvcmRpb25UcmlnZ2VyPlxuICAgMTczXHQgICAgICAgICAgPEFjY29yZGlvbkNvbnRlbnQgY2xhc3NOYW1lPVwicHgtNiBzcGFjZS15LTRcIj5cbiAgIDE3NFx0XG4gICAxNzVcdCAgICAgICAgPElucHV0Rm9ybVxuICAgMTc2XHQgICAgICAgICAgbGFiZWw9XCJIZXVyZSBkJ2Fycml2w6llXCJcbiAgIDE3N1x0ICAgICAgICAgIG5hbWU9XCJhcnJpdmFsVGltZVwiXG4gICAxNzhcdCAgICAgICAgICBwbGFjZWhvbGRlcj1cIkV4OiAxNTowMFwiXG4gICAxNzlcdCAgICAgICAgICByZWdpc3Rlcj17cmVnaXN0ZXJ9XG4gICAxODBcdCAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgIDE4MVx0ICAgICAgICAvPlxuICAgMTgyXHRcbiAgIDE4M1x0ICAgICAgICA8SW5wdXRGb3JtXG4gICAxODRcdCAgICAgICAgICBsYWJlbD1cIkluc3RydWN0aW9ucyBkJ2FjY8Ooc1wiXG4gICAxODVcdCAgICAgICAgICBuYW1lPVwiYWNjZXNzSW5zdHJ1Y3Rpb25zXCJcbiAgIDE4Nlx0ICAgICAgICAgIHBsYWNlaG9sZGVyPVwiQ29tbWVudCBhY2PDqWRlciBhdSBsb2dlbWVudFwiXG4gICAxODdcdCAgICAgICAgICByZWdpc3Rlcj17cmVnaXN0ZXJ9XG4gICAxODhcdCAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgIDE4OVx0ICAgICAgICAvPlxuICAgMTkwXHRcbiAgIDE5MVx0ICAgICAgICA8SW5wdXRGb3JtXG4gICAxOTJcdCAgICAgICAgICBsYWJlbD1cIkluZm9ybWF0aW9ucyBzdXBwbMOpbWVudGFpcmVzXCJcbiAgIDE5M1x0ICAgICAgICAgIG5hbWU9XCJhcnJpdmFsQWRkaXRpb25hbEluZm9cIlxuICAgMTk0XHQgICAgICAgICAgcGxhY2Vob2xkZXI9XCJBdXRyZXMgaW5mb3JtYXRpb25zIHV0aWxlcyBwb3VyIGwnYXJyaXbDqWVcIlxuICAgMTk1XHQgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgMTk2XHQgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAxOTdcdCAgICAgICAgLz5cbiAgIDE5OFx0ICAgICAgICAgIDwvQWNjb3JkaW9uQ29udGVudD5cbiAgIDE5OVx0ICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAyMDBcdCAgICAgIDwvQWNjb3JkaW9uSXRlbT5cbiAgIDIwMVx0XG4gICAyMDJcdCAgICAgIDxBY2NvcmRpb25JdGVtIHZhbHVlPVwiZGVwYXJ0dXJlXCIgY2xhc3NOYW1lPVwiYm9yZGVyLW5vbmVcIj5cbiAgIDIwM1x0ICAgICAgICA8bW90aW9uLmRpdlxuICAgMjA0XHQgICAgICAgICAgdmFyaWFudHM9e2l0ZW1WYXJpYW50c31cbiAgIDIwNVx0ICAgICAgICAgIGNsYXNzTmFtZT1cImJnLXdoaXRlLzgwIHJvdW5kZWQtbGcgc2hhZG93LXNtIGJvcmRlci1sLTQgYm9yZGVyLXBpbmstNDAwIG92ZXJmbG93LWhpZGRlblwiXG4gICAyMDZcdCAgICAgICAgPlxuICAgMjA3XHQgICAgICAgICAgPEFjY29yZGlvblRyaWdnZXIgY2xhc3NOYW1lPVwicHgtNiBweS00IGhvdmVyOm5vLXVuZGVybGluZSBob3ZlcjpiZy1waW5rLTUwLzUwIHRyYW5zaXRpb24tYWxsXCI+XG4gICAyMDhcdCAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQteGwgZm9udC1zZW1pYm9sZCB0ZXh0LXBpbmstNTAwIGZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAyMDlcdCAgICAgICAgICAgICAgPFBsYW5lIGNsYXNzTmFtZT1cImgtNSB3LTUgcm90YXRlLTE4MFwiIC8+IETDqXBhcnRcbiAgIDIxMFx0ICAgICAgICAgICAgPC9zcGFuPlxuICAgMjExXHQgICAgICAgICAgPC9BY2NvcmRpb25UcmlnZ2VyPlxuICAgMjEyXHQgICAgICAgICAgPEFjY29yZGlvbkNvbnRlbnQgY2xhc3NOYW1lPVwicHgtNiBzcGFjZS15LTRcIj5cbiAgIDIxM1x0XG4gICAyMTRcdCAgICAgICAgPElucHV0Rm9ybVxuICAgMjE1XHQgICAgICAgICAgbGFiZWw9XCJIZXVyZSBkZSBkw6lwYXJ0XCJcbiAgIDIxNlx0ICAgICAgICAgIG5hbWU9XCJkZXBhcnR1cmVUaW1lXCJcbiAgIDIxN1x0ICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRXg6IDExOjAwXCJcbiAgIDIxOFx0ICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgIDIxOVx0ICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgMjIwXHQgICAgICAgIC8+XG4gICAyMjFcdFxuICAgMjIyXHQgICAgICAgIDxJbnB1dEZvcm1cbiAgIDIyM1x0ICAgICAgICAgIGxhYmVsPVwiSW5zdHJ1Y3Rpb25zIGRlIHNvcnRpZVwiXG4gICAyMjRcdCAgICAgICAgICBuYW1lPVwiZXhpdEluc3RydWN0aW9uc1wiXG4gICAyMjVcdCAgICAgICAgICBwbGFjZWhvbGRlcj1cIkNvbW1lbnQgcXVpdHRlciBsZSBsb2dlbWVudFwiXG4gICAyMjZcdCAgICAgICAgICByZWdpc3Rlcj17cmVnaXN0ZXJ9XG4gICAyMjdcdCAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgIDIyOFx0ICAgICAgICAvPlxuICAgMjI5XHRcbiAgIDIzMFx0ICAgICAgICA8SW5wdXRGb3JtXG4gICAyMzFcdCAgICAgICAgICBsYWJlbD1cIkluZm9ybWF0aW9ucyBzdXBwbMOpbWVudGFpcmVzXCJcbiAgIDIzMlx0ICAgICAgICAgIG5hbWU9XCJkZXBhcnR1cmVBZGRpdGlvbmFsSW5mb1wiXG4gICAyMzNcdCAgICAgICAgICBwbGFjZWhvbGRlcj1cIkF1dHJlcyBpbmZvcm1hdGlvbnMgdXRpbGVzIHBvdXIgbGUgZMOpcGFydFwiXG4gICAyMzRcdCAgICAgICAgICByZWdpc3Rlcj17cmVnaXN0ZXJ9XG4gICAyMzVcdCAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgIDIzNlx0ICAgICAgICAvPlxuICAgMjM3XHQgICAgICAgICAgPC9BY2NvcmRpb25Db250ZW50PlxuICAgMjM4XHQgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDIzOVx0ICAgICAgPC9BY2NvcmRpb25JdGVtPlxuICAgMjQwXHRcbiAgIDI0MVx0ICAgICAgPEFjY29yZGlvbkl0ZW0gdmFsdWU9XCJhY2NvbW1vZGF0aW9uXCIgY2xhc3NOYW1lPVwiYm9yZGVyLW5vbmVcIj5cbiAgIDI0Mlx0ICAgICAgICA8bW90aW9uLmRpdlxuICAgMjQzXHQgICAgICAgICAgdmFyaWFudHM9e2l0ZW1WYXJpYW50c31cbiAgIDI0NFx0ICAgICAgICAgIGNsYXNzTmFtZT1cImJnLXdoaXRlLzgwIHJvdW5kZWQtbGcgc2hhZG93LXNtIGJvcmRlci1sLTQgYm9yZGVyLWFtYmVyLTQwMCBvdmVyZmxvdy1oaWRkZW5cIlxuICAgMjQ1XHQgICAgICAgID5cbiAgIDI0Nlx0ICAgICAgICAgIDxBY2NvcmRpb25UcmlnZ2VyIGNsYXNzTmFtZT1cInB4LTYgcHktNCBob3Zlcjpuby11bmRlcmxpbmUgaG92ZXI6YmctYW1iZXItNTAvNTAgdHJhbnNpdGlvbi1hbGxcIj5cbiAgIDI0N1x0ICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC14bCBmb250LXNlbWlib2xkIHRleHQtYW1iZXItNTAwIGZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAyNDhcdCAgICAgICAgICAgICAgPEhvbWUgY2xhc3NOYW1lPVwiaC01IHctNVwiIC8+IEjDqWJlcmdlbWVudFxuICAgMjQ5XHQgICAgICAgICAgICA8L3NwYW4+XG4gICAyNTBcdCAgICAgICAgICA8L0FjY29yZGlvblRyaWdnZXI+XG4gICAyNTFcdCAgICAgICAgICA8QWNjb3JkaW9uQ29udGVudCBjbGFzc05hbWU9XCJweC02IHNwYWNlLXktNFwiPlxuICAgMjUyXHRcbiAgIDI1M1x0ICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyaWQgZ3JpZC1jb2xzLTIgZ2FwLTRcIj5cbiAgIDI1NFx0ICAgICAgICAgIDxJbnB1dEZvcm1cbiAgIDI1NVx0ICAgICAgICAgICAgbGFiZWw9XCJOb20gZHUgcsOpc2VhdSBXaWZpXCJcbiAgIDI1Nlx0ICAgICAgICAgICAgbmFtZT1cIndpZmlOYW1lXCJcbiAgIDI1N1x0ICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJOb20gZHUgcsOpc2VhdSBXaWZpXCJcbiAgIDI1OFx0ICAgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgMjU5XHQgICAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgIDI2MFx0ICAgICAgICAgIC8+XG4gICAyNjFcdFxuICAgMjYyXHQgICAgICAgICAgPElucHV0Rm9ybVxuICAgMjYzXHQgICAgICAgICAgICBsYWJlbD1cIk1vdCBkZSBwYXNzZSBXaWZpXCJcbiAgIDI2NFx0ICAgICAgICAgICAgbmFtZT1cIndpZmlQYXNzd29yZFwiXG4gICAyNjVcdCAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiTW90IGRlIHBhc3NlIFdpZmlcIlxuICAgMjY2XHQgICAgICAgICAgICByZWdpc3Rlcj17cmVnaXN0ZXJ9XG4gICAyNjdcdCAgICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgMjY4XHQgICAgICAgICAgLz5cbiAgIDI2OVx0ICAgICAgICA8L2Rpdj5cbiAgIDI3MFx0XG4gICAyNzFcdCAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTJcIj5cbiAgIDI3Mlx0ICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiaG91c2VSdWxlc1wiIGNsYXNzTmFtZT1cInRleHQtc20gZm9udC1tZWRpdW1cIj5cbiAgIDI3M1x0ICAgICAgICAgICAgUsOoZ2xlcyBkZSBsYSBtYWlzb25cbiAgIDI3NFx0ICAgICAgICAgIDwvbGFiZWw+XG4gICAyNzVcdCAgICAgICAgICA8dGV4dGFyZWFcbiAgIDI3Nlx0ICAgICAgICAgICAgaWQ9XCJob3VzZVJ1bGVzXCJcbiAgIDI3N1x0ICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJFbnRyZXogY2hhcXVlIHLDqGdsZSBzdXIgdW5lIG5vdXZlbGxlIGxpZ25lXCJcbiAgIDI3OFx0ICAgICAgICAgICAgey4uLnJlZ2lzdGVyKCdob3VzZVJ1bGVzJyl9XG4gICAyNzlcdCAgICAgICAgICAgIGNsYXNzTmFtZT17YHctZnVsbCBtaW4taC1bMTAwcHhdIHJvdW5kZWQtbWQgYm9yZGVyICR7ZXJyb3JzLmhvdXNlUnVsZXMgPyAnYm9yZGVyLWRlc3RydWN0aXZlJyA6ICdib3JkZXItaW5wdXQnfSBiZy10cmFuc3BhcmVudCBweC0zIHB5LTIgdGV4dC1zbSBzaGFkb3ctc21gfVxuICAgMjgwXHQgICAgICAgICAgLz5cbiAgIDI4MVx0ICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQteHMgdGV4dC1tdXRlZC1mb3JlZ3JvdW5kXCI+RW50cmV6IGNoYXF1ZSByw6hnbGUgc3VyIHVuZSBub3V2ZWxsZSBsaWduZTwvcD5cbiAgIDI4Mlx0ICAgICAgICAgIHtlcnJvcnMuaG91c2VSdWxlcyAmJiAoXG4gICAyODNcdCAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtc20gdGV4dC1kZXN0cnVjdGl2ZVwiPntlcnJvcnMuaG91c2VSdWxlcy5tZXNzYWdlPy50b1N0cmluZygpfTwvcD5cbiAgIDI4NFx0ICAgICAgICAgICl9XG4gICAyODVcdCAgICAgICAgPC9kaXY+XG4gICAyODZcdFxuICAgMjg3XHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMiBnYXAtNFwiPlxuICAgMjg4XHQgICAgICAgICAgPElucHV0Rm9ybVxuICAgMjg5XHQgICAgICAgICAgICBsYWJlbD1cIk5vbSBkdSBwcm9wcmnDqXRhaXJlXCJcbiAgIDI5MFx0ICAgICAgICAgICAgbmFtZT1cIm93bmVyTmFtZVwiXG4gICAyOTFcdCAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVm90cmUgbm9tXCJcbiAgIDI5Mlx0ICAgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgMjkzXHQgICAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgIDI5NFx0ICAgICAgICAgIC8+XG4gICAyOTVcdFxuICAgMjk2XHQgICAgICAgICAgPElucHV0Rm9ybVxuICAgMjk3XHQgICAgICAgICAgICBsYWJlbD1cIkNvbnRhY3QgZHUgcHJvcHJpw6l0YWlyZVwiXG4gICAyOThcdCAgICAgICAgICAgIG5hbWU9XCJvd25lckNvbnRhY3RcIlxuICAgMjk5XHQgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlZvdHJlIG51bcOpcm8gZGUgdMOpbMOpcGhvbmVcIlxuICAgMzAwXHQgICAgICAgICAgICByZWdpc3Rlcj17cmVnaXN0ZXJ9XG4gICAzMDFcdCAgICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgMzAyXHQgICAgICAgICAgLz5cbiAgIDMwM1x0ICAgICAgICA8L2Rpdj5cbiAgIDMwNFx0XG4gICAzMDVcdCAgICAgICAgPElucHV0Rm9ybVxuICAgMzA2XHQgICAgICAgICAgbGFiZWw9XCJJbmZvcm1hdGlvbnMgZ8OpbsOpcmFsZXNcIlxuICAgMzA3XHQgICAgICAgICAgbmFtZT1cImdlbmVyYWxJbmZvXCJcbiAgIDMwOFx0ICAgICAgICAgIHBsYWNlaG9sZGVyPVwiQXV0cmVzIGluZm9ybWF0aW9ucyB1dGlsZXMgc3VyIGxlIGxvZ2VtZW50XCJcbiAgIDMwOVx0ICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgIDMxMFx0ICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgMzExXHQgICAgICAgIC8+XG4gICAzMTJcdCAgICAgICAgICA8L0FjY29yZGlvbkNvbnRlbnQ+XG4gICAzMTNcdCAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMzE0XHQgICAgICA8L0FjY29yZGlvbkl0ZW0+XG4gICAzMTVcdFxuICAgMzE2XHQgICAgICA8QWNjb3JkaW9uSXRlbSB2YWx1ZT1cInJlY29tbWVuZGF0aW9uc1wiIGNsYXNzTmFtZT1cImJvcmRlci1ub25lXCI+XG4gICAzMTdcdCAgICAgICAgPG1vdGlvbi5kaXZcbiAgIDMxOFx0ICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAzMTlcdCAgICAgICAgICBjbGFzc05hbWU9XCJiZy13aGl0ZS84MCByb3VuZGVkLWxnIHNoYWRvdy1zbSBib3JkZXItbC00IGJvcmRlci10ZWFsLTQwMCBvdmVyZmxvdy1oaWRkZW5cIlxuICAgMzIwXHQgICAgICAgID5cbiAgIDMyMVx0ICAgICAgICAgIDxBY2NvcmRpb25UcmlnZ2VyIGNsYXNzTmFtZT1cInB4LTYgcHktNCBob3Zlcjpuby11bmRlcmxpbmUgaG92ZXI6YmctdGVhbC01MC81MCB0cmFuc2l0aW9uLWFsbFwiPlxuICAgMzIyXHQgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtc2VtaWJvbGQgdGV4dC10ZWFsLTYwMCBmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgMzIzXHQgICAgICAgICAgICAgIDxNYXBQaW4gY2xhc3NOYW1lPVwiaC01IHctNVwiIC8+IFJlY29tbWFuZGF0aW9uc1xuICAgMzI0XHQgICAgICAgICAgICA8L3NwYW4+XG4gICAzMjVcdCAgICAgICAgICA8L0FjY29yZGlvblRyaWdnZXI+XG4gICAzMjZcdCAgICAgICAgICA8QWNjb3JkaW9uQ29udGVudCBjbGFzc05hbWU9XCJweC02IHNwYWNlLXktNFwiPlxuICAgMzI3XHQgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIHRleHQtdGVhbC03MDAvNzBcIj5Bam91dGV6IGRlcyByZWNvbW1hbmRhdGlvbnMgcG91ciB2b3MgaW52aXTDqXMgKHJlc3RhdXJhbnRzLCBhY3Rpdml0w6lzLCBiYXJzLCBldGMuKTwvcD5cbiAgIDMyOFx0XG4gICAzMjlcdCAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTRcIj5cbiAgIDMzMFx0ICAgICAgICAgIHtmaWVsZHMubWFwKChmaWVsZCwgaW5kZXgpID0+IChcbiAgIDMzMVx0ICAgICAgICAgICAgPFJlY29tbWVuZGF0aW9uXG4gICAzMzJcdCAgICAgICAgICAgICAga2V5PXtmaWVsZC5pZH1cbiAgIDMzM1x0ICAgICAgICAgICAgICBmaWVsZD17ZmllbGR9XG4gICAzMzRcdCAgICAgICAgICAgICAgaW5kZXg9e2luZGV4fVxuICAgMzM1XHQgICAgICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgIDMzNlx0ICAgICAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgIDMzN1x0ICAgICAgICAgICAgICByZW1vdmU9e3JlbW92ZX1cbiAgIDMzOFx0ICAgICAgICAgICAgLz5cbiAgIDMzOVx0ICAgICAgICAgICkpfVxuICAgMzQwXHRcbiAgIDM0MVx0ICAgICAgICAgIDxtb3Rpb24uYnV0dG9uXG4gICAzNDJcdCAgICAgICAgICAgIHdoaWxlSG92ZXI9e3sgc2NhbGU6IDEuMDIgfX1cbiAgIDM0M1x0ICAgICAgICAgICAgd2hpbGVUYXA9e3sgc2NhbGU6IDAuOTggfX1cbiAgIDM0NFx0ICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAzNDVcdCAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGFwcGVuZCh7IG5hbWU6ICcnLCB0eXBlOiAnJyBhcyBhbnksIGFkZHJlc3M6ICcnLCBkZXNjcmlwdGlvbjogJycgfSl9XG4gICAzNDZcdCAgICAgICAgICAgIGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHctZnVsbCBweS0zIHB4LTQgYm9yZGVyIGJvcmRlci1kYXNoZWQgcm91bmRlZC1tZCBiZy1ncmFkaWVudC10by1yIGZyb20tdGVhbC00MDAgdG8tdGVhbC0zMDAgdGV4dC13aGl0ZSBob3Zlcjpmcm9tLXRlYWwtNTAwIGhvdmVyOnRvLXRlYWwtNDAwIHRyYW5zaXRpb24tYWxsIHNoYWRvdy1zbSBjdXJzb3ItcG9pbnRlclwiXG4gICAzNDdcdCAgICAgICAgICA+XG4gICAzNDhcdCAgICAgICAgICAgIDxQbHVzQ2lyY2xlIHNpemU9ezE4fSBjbGFzc05hbWU9XCJtci0yXCIgLz5cbiAgIDM0OVx0ICAgICAgICAgICAgQWpvdXRlciB1bmUgcmVjb21tYW5kYXRpb25cbiAgIDM1MFx0ICAgICAgICAgIDwvbW90aW9uLmJ1dHRvbj5cbiAgIDM1MVx0ICAgICAgICA8L2Rpdj5cbiAgIDM1Mlx0ICAgICAgICAgIDwvQWNjb3JkaW9uQ29udGVudD5cbiAgIDM1M1x0ICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAzNTRcdCAgICAgIDwvQWNjb3JkaW9uSXRlbT5cbiAgIDM1NVx0ICAgICAgPC9BY2NvcmRpb24+XG4gICAzNTZcdFxuICAgMzU3XHQgICAgICA8bW90aW9uLmRpdlxuICAgMzU4XHQgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAzNTlcdCAgICAgICAgY2xhc3NOYW1lPVwiZmxleCBqdXN0aWZ5LWVuZCBtdC04XCJcbiAgIDM2MFx0ICAgICAgPlxuICAgMzYxXHQgICAgICAgIDxtb3Rpb24uYnV0dG9uXG4gICAzNjJcdCAgICAgICAgICB3aGlsZUhvdmVyPXt7IHNjYWxlOiAxLjA1IH19XG4gICAzNjNcdCAgICAgICAgICB3aGlsZVRhcD17eyBzY2FsZTogMC45NSB9fVxuICAgMzY0XHQgICAgICAgICAgdHlwZT1cInN1Ym1pdFwiXG4gICAzNjVcdCAgICAgICAgICBkaXNhYmxlZD17aXNTYXZpbmd9XG4gICAzNjZcdCAgICAgICAgICBjbGFzc05hbWU9e2BweC02IHB5LTMgdGV4dC13aGl0ZSByb3VuZGVkLW1kIHRyYW5zaXRpb24tYWxsIHNoYWRvdy1tZCBkaXNhYmxlZDpvcGFjaXR5LTUwIGZvbnQtbWVkaXVtIGZsZXggaXRlbXMtY2VudGVyICR7aXNNb2RpZmllZCA/ICdiZy1ncmFkaWVudC10by1yIGZyb20tWyNmMDRjMjNdIHRvLXBpbmstNTAwIGhvdmVyOmZyb20tWyNmMDRjMjNdIGhvdmVyOnRvLXBpbmstNDAwJyA6ICdiZy1ncmFkaWVudC10by1yIGZyb20tZ3JheS00MDAgdG8tZ3JheS01MDAgaG92ZXI6ZnJvbS1ncmF5LTUwMCBob3Zlcjp0by1ncmF5LTYwMCd9YH1cbiAgIDM2N1x0ICAgICAgICA+XG4gICAzNjhcdCAgICAgICAgICB7IWlzTW9kaWZpZWQgJiYgPEFycm93TGVmdCBzaXplPXsxOH0gY2xhc3NOYW1lPVwibXItMlwiIC8+fVxuICAgMzY5XHQgICAgICAgICAge2lzU2F2aW5nID8gJ0VucmVnaXN0cmVtZW50IGVuIGNvdXJzLi4uJyA6IGlzTW9kaWZpZWQgPyAnRW5yZWdpc3RyZXIgbGVzIG1vZGlmaWNhdGlvbnMnIDogJ1JldG91ciDDoCBsXFwnYWNjdWVpbCd9XG4gICAzNzBcdCAgICAgICAgPC9tb3Rpb24uYnV0dG9uPlxuICAgMzcxXHQgICAgICA8L21vdGlvbi5kaXY+XG4gICAzNzJcdCAgICA8L21vdGlvbi5mb3JtPlxuICAgMzczXHQgICk7XG4gICAzNzRcdH1cbiAgIDM3NVx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAzNzVcbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDFKcHRMZEU1OE5wVUJWY2kyRzhHR0ppIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQiLCJmb2xkZXJSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzZW50IiwicmVxdWVzdF9pZCI6IjQ2ZTA1ZmQwLWVjNGEtNDE4OS1hN2NkLWQ1YmYyOTEwNzEzMCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbXSwic2Vlbl9zdGF0ZSI6InVuc2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gc3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3g6XG4gICAxMTBcdCAgICAgICAgICAgICAgICBvblN1Ym1pdD17YXN5bmMgKGRhdGEpID0+IHtcbiAgIDExMVx0ICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm7DqWVzIGR1IGZvcm11bGFpcmUgc291bWlzZXM6JywgZGF0YSk7XG4gICAxMTJcdFxuICAgMTEzXHQgICAgICAgICAgICAgICAgICB0cnkge1xuICAgMTE0XHQgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmlkKSB7XG4gICAxMTVcdCAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmlzbWFEYXRhID0ge1xuICAgMTE2XHQgICAgICAgICAgICAgICAgICAgICAgICBhcnJpdmFsVGltZTogZGF0YS5hcnJpdmFsVGltZSxcbiAgIDExN1x0ICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzSW5zdHJ1Y3Rpb25zOiBkYXRhLmFjY2Vzc0luc3RydWN0aW9ucyxcbiAgIDExOFx0ICAgICAgICAgICAgICAgICAgICAgICAgYXJyaXZhbEFkZGl0aW9uYWxJbmZvOiBkYXRhLmFycml2YWxBZGRpdGlvbmFsSW5mbyxcbiAgIDExOVx0ICAgICAgICAgICAgICAgICAgICAgICAgZGVwYXJ0dXJlVGltZTogZGF0YS5kZXBhcnR1cmVUaW1lLFxuICAgMTIwXHQgICAgICAgICAgICAgICAgICAgICAgICBleGl0SW5zdHJ1Y3Rpb25zOiBkYXRhLmV4aXRJbnN0cnVjdGlvbnMsXG4gICAxMjFcdCAgICAgICAgICAgICAgICAgICAgICAgIGRlcGFydHVyZUFkZGl0aW9uYWxJbmZvOiBkYXRhLmRlcGFydHVyZUFkZGl0aW9uYWxJbmZvLFxuICAgMTIyXHQgICAgICAgICAgICAgICAgICAgICAgICB3aWZpTmFtZTogZGF0YS53aWZpTmFtZSxcbiAgIDEyM1x0ICAgICAgICAgICAgICAgICAgICAgICAgd2lmaVBhc3N3b3JkOiBkYXRhLndpZmlQYXNzd29yZCxcbiAgIDEyNFx0ICAgICAgICAgICAgICAgICAgICAgICAgaG91c2VSdWxlczogZGF0YS5ob3VzZVJ1bGVzLFxuICAgMTI1XHQgICAgICAgICAgICAgICAgICAgICAgICBvd25lckNvbnRhY3Q6IGRhdGEub3duZXJDb250YWN0LFxuICAgMTI2XHQgICAgICAgICAgICAgICAgICAgICAgICBvd25lck5hbWU6IGRhdGEub3duZXJOYW1lLFxuICAgMTI3XHQgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmFsSW5mbzogZGF0YS5nZW5lcmFsSW5mbyxcbiAgIDEyOFx0ICAgICAgICAgICAgICAgICAgICAgICAgcmVjb21tZW5kYXRpb25zOiB7XG4gICAxMjlcdCAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlTWFueToge30sXG4gICAxMzBcdCAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlOiBkYXRhLnJlY29tbWVuZGF0aW9ucy5tYXAocmVjID0+ICh7XG4gICAxMzFcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiByZWMubmFtZSxcbiAgIDEzMlx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IHJlYy5hZGRyZXNzIHx8ICcnLFxuICAgMTMzXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHJlYy5kZXNjcmlwdGlvbiB8fCAnJyxcbiAgIDEzNFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHJlYy50eXBlXG4gICAxMzVcdCAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAxMzZcdCAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgIDEzN1x0ICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAxMzhcdFxuICAgMTM5XHQgICAgICAgICAgICAgICAgICAgICAgLy8gRW52b3llciB1bmUgcmVxdcOqdGUgUFVUIHBvdXIgbWV0dHJlIMOgIGpvdXIgbGVzIGRvbm7DqWVzXG4gICAxNDBcdCAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnB1dChgaHR0cDovL2xvY2FsaG9zdDozMDAxL2FwaS9zdGF5LyR7ZGF0YS5pZH1gLCBwcmlzbWFEYXRhKTtcbiAgIDE0MVx0XG4gICAxNDJcdCAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcbiAgIDE0M1x0ICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm7DqWVzIG1pc2VzIMOgIGpvdXIgYXZlYyBzdWNjw6hzOicsIHJlc3BvbnNlLmRhdGEpO1xuICAgMTQ0XHRcbiAgIDE0NVx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWV0dHJlIMOgIGpvdXIgbGUgc3RhdGUgYm9va0RhdGEgYXZlYyBsZXMgZG9ubsOpZXMgcsOpY3Vww6lyw6llc1xuICAgMTQ2XHQgICAgICAgICAgICAgICAgICAgICAgICBzZXRCb29rRGF0YShyZXNwb25zZS5kYXRhKTtcbiAgIDE0N1x0XG4gICAxNDhcdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhdXZlZ2FyZGVyIGxlcyBkb25uw6llcyBtaXNlcyDDoCBqb3VyIGRhbnMgbGUgbG9jYWxTdG9yYWdlXG4gICAxNDlcdCAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdib29rRGF0YScsIEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLmRhdGEpKTtcbiAgIDE1MFx0XG4gICAxNTFcdCAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdNb2RpZmljYXRpb25zIGVucmVnaXN0csOpZXMgYXZlYyBzdWNjw6hzIScpO1xuICAgMTUyXHRcbiAgIDE1M1x0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yY2VyIHVuIHJlY2hhcmdlbWVudCBkdSBjb21wb3NhbnQgcG91ciByw6lpbml0aWFsaXNlciBsJ8OpdGF0XG4gICAxNTRcdCAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgIDE1NVx0ICAgICAgICAgICAgICAgICAgICAgIH1cbiAgIDE1Nlx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgMTU3XHQgICAgICAgICAgICAgICAgICAgICAgLy8gUGFzIGQnSUQsIGRvbmMgb24gbWV0IHNpbXBsZW1lbnQgw6Agam91ciBsZSBzdGF0ZVxuICAgMTU4XHQgICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEoZGF0YSk7XG4gICAxNTlcdCAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAxNjBcdCAgICAgICAgICAgICAgICAgICAgICBhbGVydCgnTW9kaWZpY2F0aW9ucyBlbnJlZ2lzdHLDqWVzIGF2ZWMgc3VjY8OocyEnKTtcbiAgIDE2MVx0XG4gICAxNjJcdCAgICAgICAgICAgICAgICAgICAgICAvLyBGb3JjZXIgdW4gcmVjaGFyZ2VtZW50IGR1IGNvbXBvc2FudCBwb3VyIHLDqWluaXRpYWxpc2VyIGwnw6l0YXRcbiAgIDE2M1x0ICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgIDE2NFx0ICAgICAgICAgICAgICAgICAgICB9XG4gICAxNjVcdCAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAxODdcbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDFBdXI4UDhjTFlrUmhlQ3FaQXFqQVYxIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQiLCJmb2xkZXJSb290IjoiL1VzZXJzL2VyYXRlbC9Eb2N1bWVudHMveW5vdi95bm92TTEvaGFja2F0aG9uSG9zdEJvb2svaG9zdEJvb2stZnJvbnQifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvZXJhdGVsL0RvY3VtZW50cy95bm92L3lub3ZNMS9oYWNrYXRob25Ib3N0Qm9vay9ob3N0Qm9vay1mcm9udCJ9fX1dLCJyZXNwb25zZV90ZXh0IjoiTWFpbnRlbmFudCwgbmV0dG95b25zIGxlcyBkZXV4IGZpY2hpZXJzIGVuIHN1cHByaW1hbnQgbGVzIGNvbW1lbnRhaXJlcyBldCBsZSBjb2RlIGludXRpbGUgOlxuXG4xLiBEJ2Fib3JkLCBuZXR0b3lvbnMgYEJvb2tFZGl0Rm9ybS50c3hgIDoiLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfV0sImZlZWRiYWNrU3RhdGVzIjp7InRlbXAtZmUtM2ZjZDgyNzUtMmRjOS00MGIwLThkNDAtYWJjMTQ2NWVmNzdmIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1hY2RmMTU4My1iYzJkLTQ2OTktODY4ZC1hZWU1YWQ3NDk2NjMiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWZhYWRjMTQ2LTc2MTUtNDJiZi1iZjU4LWE1MTkxNThkZTA5MyI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNzAwODgzMjQtZjlkNi00MTEzLWFjODktZWRiMTIzMzY1ZGRiIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1kYTZlNDQ1Zi02NTE2LTRiOTYtOTFlNC0yZDEzZTk0NzFjNDciOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTJhYWQ5YjFlLWNiY2ItNDdjZi04ZWMyLWYxOTVlNDEyYjUxOSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZGZjNTNiYzUtZTU3MS00Mzk3LThmODUtODJjNjZiMjYzMzg1Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS01MDgyYjJiNi05MzMwLTQ3MzgtYTgxNi04ZTFlOWNjOGRiOWMiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTExYmRkMDkyLTM4NDEtNGFkZS1hNzM2LTE5MjljMWQxMGQ5OCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZDVkYTQyNDItODgwZC00YWM3LWFiMzAtNTMzZWM0ZjYwMzA0Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS03ZDE4N2VkZS0wYWFkLTRjZGEtYTIyNi1mZTAzOTZjNWI0N2MiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWEzNzI0NGY2LTBmYTQtNDg0Mi1iYjg3LTdlNjJmOTI5MWJjMyI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtMTliMTY4OTctYjIwMS00NWI0LTg2MjgtYTU5MGExZjJjOThhIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS00ZGUxOWQ4YS1hYTk3LTQxNWMtYjNmMi1lODVmYjE5MWMwODAiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWE4MGM3OTk1LWU2OWEtNDRiZS1hYWQyLWZkNjEzODQyYWRhYyI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtYmRiZTY5NTAtMWFlMi00NjUyLWIxNjMtZWFkNTVkMzZjY2Y0Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1hYTdlMDkzYS1hN2IzLTQ4YTYtODQxZS1mZTVhNDRmNGQ4NDUiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTlkOTFhOTgyLWFiOTktNDMzOC1iMTI4LTYzZDQ0ZmFjNWJiNiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtYWZlNzA0ZTMtYTI4MC00MWViLTgyYTMtOWZmMmQ2NmFhOWQyIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS03MmI1ZDNlYy05M2U0LTQ2MGEtYTNhNi1lYmQyOGE2N2E5OWUiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWY5ZDBmYzdiLWIzZGMtNDkxYi04NzE5LTViZjM3ZDQ4OWE2NSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtOWNkNzBkYzktYWY0NC00OWQyLWI1Y2EtMjUzMGFjMjdhNjU1Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1mNzQ5Yjk1Yy03MzM5LTQ3MTMtODQ5Ny05Mzg3NDcxMzY1YzMiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTRiNGRhZmVhLWY5ZWItNDExYy1hZmY1LTY0MWNmNDVmNzg4ZCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNmM5YjQ5YjktMGEzMC00OGJhLWFjMjgtNDA4ODhmZTAxNzNiIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1lZWVlNjgzYS05YTUxLTQyYzktOWI2ZC0xYjkyNWRiODUyYzUiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTg5MDU1ZmMxLTE2ZDctNDY5Yi1hMWUwLWIxMTczNDNmMTM3ZiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNTE3NzViYWUtNzg2MS00NDIzLWI2NDgtMjJlNmEwYWM2NDdjIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0yZGVjYTQ2Zi1kMTVkLTRjY2ItOTgyZC05YzBmMmE3MTc1YzEiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTFjZmQ0YjFhLWU4MjAtNDcxYi05YTY1LWI3YzY5YTg5MGM3ZSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZmI0NTJjMzgtMDYxMi00YjViLWIxMGQtYTM4Y2JlNTE1OWQ4Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1iZGFkNWY1ZC0yYjJmLTRkMGMtODFkOS0wMGYxN2YzNDQ1ZTAiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLThlZTU5Y2VlLTk5YjktNDY1Ny1hYTBmLTRhODRkOTBiOWU4ZiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNzYxZTlkN2YtNmQyOC00YzZkLTk4NDktMjNiZDdmM2Q0ZjAwIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1lMTI2OTA4ZS1hYjdhLTQzODEtYTc1NC00MTRhMmNiYmI3ZWQiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWMxZTdiNTU3LWQyNTItNDE4ZC05OGQ2LTE3MmExMDU4NThhYSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtYmYwMDFhNGYtMmIyMy00ZDYyLThiMTQtMTU4ODhiZDQwYWQ3Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS05MzU2MzZkMi1hNDlhLTQ4MDMtYTdlMy04NjE2OGYwM2M4NzMiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWM1MmIzN2U0LTgyMzQtNGY0Yi1iMmYwLWRhYzk2NjBjZjQyYiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtMjRhNDc5MzgtYjA1OS00ZjNjLWE0NjItMTgwOGViNjViM2E2Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0xMmJmN2YyYi1mMjQzLTRmZTMtYjRkYy1kM2FkM2Q0NDNjNjMiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWMyYzlhN2FhLTFlYTYtNDI3ZS1iYjMzLTg3Yzk0YTVkNzRiMSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtODA0MGY3YTMtYzRlNS00Y2M1LWJlNjgtNDNjMmUxYmY2ZmVkIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0zNDM1NDZhMi01YjA3LTQ5MTYtYWFlYS00NDk4NGVkNjJjYzUiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWUwMjJkOGFlLTRjYmYtNDQ1Yy1hOTVmLTc2ZDM5ZDYyMDZkYiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtOTUwZGM5NmQtNTY0Yy00ZTg4LTlhZGUtMjhlYjFlNGQwNWYzIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS03NjZkM2I4My0zOTdkLTRlNzYtOTZiNy1hNjVmMjM4NzEyYTciOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTY5N2UxZTZjLTIwYzItNDU2YS1hYjk2LWE3ZjdhMTJlMzFjNiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtYzRlNzY5YmUtZDk2Ny00ZWQ5LTgyMDEtNzc2Zjc2MjNhNWI2Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifX0sInRvb2xVc2VTdGF0ZXMiOnsiNWZhZTM0NjctMzA2ZC00MTAxLWE1YjAtMjI3ZTQ0NDA5NDY2O3Rvb2x1XzAxNUhEa0M2Z29mRE5Bb1dEUzVXTE11MyI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4XG4ndXNlIGNsaWVudCc7XG5cbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlRm9ybSwgdXNlRmllbGRBcnJheSB9IGZyb20gJ3JlYWN0LWhvb2stZm9ybSc7XG5pbXBvcnQgeyB6b2RSZXNvbHZlciB9IGZyb20gJ0Bob29rZm9ybS9yZXNvbHZlcnMvem9kJztcbmltcG9ydCB7IEJvb2tEYXRhIH0gZnJvbSAnQC90eXBlcy9Cb29rRGF0YSc7XG5pbXBvcnQgeyBCb29rRm9ybVNjaGVtYSwgQm9va0Zvcm1WYWx1ZXNUeXBlIH0gZnJvbSAnLi9zY2hlbWFzL0Jvb2tGb3JtU2NoZW1hJztcbmltcG9ydCBJbnB1dEZvcm0gZnJvbSAnLi9JbnB1dEZvcm0nO1xuaW1wb3J0IHsgUGx1c0NpcmNsZSwgUGFsbXRyZWUsIFBsYW5lLCBIb21lLCBNYXBQaW4gfSBmcm9tICdsdWNpZGUtcmVhY3QnO1xuaW1wb3J0IFJlY29tbWVuZGF0aW9uIGZyb20gJy4vUmVjb21tZW5kYXRpb24nO1xuaW1wb3J0IHsgbW90aW9uIH0gZnJvbSAnZnJhbWVyLW1vdGlvbic7XG5pbXBvcnQgeyBBY2NvcmRpb24sIEFjY29yZGlvbkNvbnRlbnQsIEFjY29yZGlvbkl0ZW0sIEFjY29yZGlvblRyaWdnZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvYWNjb3JkaW9uJztcblxuY29uc3QgY29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzID0gKGRhdGE6IEJvb2tEYXRhIHwgdW5kZWZpbmVkKTogQm9va0Zvcm1WYWx1ZXNUeXBlID0+IHtcbiAgcmV0dXJuIHtcbiAgICBpZDogZGF0YT8uaWQsXG4gICAgYXJyaXZhbFRpbWU6IGRhdGE/LmFycml2YWxUaW1lIHx8ICcnLFxuICAgIGFjY2Vzc0luc3RydWN0aW9uczogZGF0YT8uYWNjZXNzSW5zdHJ1Y3Rpb25zIHx8ICcnLFxuICAgIGFycml2YWxBZGRpdGlvbmFsSW5mbzogZGF0YT8uYXJyaXZhbEFkZGl0aW9uYWxJbmZvIHx8ICcnLFxuICAgIGRlcGFydHVyZVRpbWU6IGRhdGE/LmRlcGFydHVyZVRpbWUgfHwgJycsXG4gICAgZXhpdEluc3RydWN0aW9uczogZGF0YT8uZXhpdEluc3RydWN0aW9ucyB8fCAnJyxcbiAgICBkZXBhcnR1cmVBZGRpdGlvbmFsSW5mbzogZGF0YT8uZGVwYXJ0dXJlQWRkaXRpb25hbEluZm8gfHwgJycsXG4gICAgd2lmaU5hbWU6IGRhdGE/LndpZmlOYW1lIHx8ICcnLFxuICAgIHdpZmlQYXNzd29yZDogZGF0YT8ud2lmaVBhc3N3b3JkIHx8ICcnLFxuICAgIGhvdXNlUnVsZXM6IGRhdGE/LmhvdXNlUnVsZXMgfHwgJycsXG4gICAgb3duZXJDb250YWN0OiBkYXRhPy5vd25lckNvbnRhY3QgfHwgJycsXG4gICAgb3duZXJOYW1lOiBkYXRhPy5vd25lck5hbWUgfHwgJycsXG4gICAgZ2VuZXJhbEluZm86IGRhdGE/LmdlbmVyYWxJbmZvIHx8ICcnLFxuICAgIHJlY29tbWVuZGF0aW9uczogZGF0YT8ucmVjb21tZW5kYXRpb25zIHx8IFtdLFxuICB9O1xufTtcblxuY29uc3QgY29udmVydEZvcm1WYWx1ZXNUb0Jvb2tEYXRhID0gKHZhbHVlczogQm9va0Zvcm1WYWx1ZXNUeXBlKTogQm9va0RhdGEgPT4ge1xuICByZXR1cm4ge1xuICAgIGlkOiB2YWx1ZXMuaWQsXG4gICAgYXJyaXZhbFRpbWU6IHZhbHVlcy5hcnJpdmFsVGltZSxcbiAgICBhY2Nlc3NJbnN0cnVjdGlvbnM6IHZhbHVlcy5hY2Nlc3NJbnN0cnVjdGlvbnMsXG4gICAgYXJyaXZhbEFkZGl0aW9uYWxJbmZvOiB2YWx1ZXMuYXJyaXZhbEFkZGl0aW9uYWxJbmZvIHx8ICcnLFxuICAgIGRlcGFydHVyZVRpbWU6IHZhbHVlcy5kZXBhcnR1cmVUaW1lLFxuICAgIGV4aXRJbnN0cnVjdGlvbnM6IHZhbHVlcy5leGl0SW5zdHJ1Y3Rpb25zLFxuICAgIGRlcGFydHVyZUFkZGl0aW9uYWxJbmZvOiB2YWx1ZXMuZGVwYXJ0dXJlQWRkaXRpb25hbEluZm8gfHwgJycsXG4gICAgd2lmaU5hbWU6IHZhbHVlcy53aWZpTmFtZSxcbiAgICB3aWZpUGFzc3dvcmQ6IHZhbHVlcy53aWZpUGFzc3dvcmQsXG4gICAgaG91c2VSdWxlczogdmFsdWVzLmhvdXNlUnVsZXMsXG4gICAgb3duZXJDb250YWN0OiB2YWx1ZXMub3duZXJDb250YWN0LFxuICAgIG93bmVyTmFtZTogdmFsdWVzLm93bmVyTmFtZSxcbiAgICBnZW5lcmFsSW5mbzogdmFsdWVzLmdlbmVyYWxJbmZvIHx8ICcnLFxuICAgIHJlY29tbWVuZGF0aW9uczogdmFsdWVzLnJlY29tbWVuZGF0aW9ucyB8fCBbXSxcbiAgfTtcbn07XG5cbmludGVyZmFjZSBCb29rRWRpdEZvcm1Qcm9wcyB7XG4gIGluaXRpYWxEYXRhPzogQm9va0RhdGE7XG4gIG9uU3VibWl0PzogKGRhdGE6IEJvb2tEYXRhKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQm9va0VkaXRGb3JtKHsgaW5pdGlhbERhdGEsIG9uU3VibWl0IH06IEJvb2tFZGl0Rm9ybVByb3BzKSB7XG4gIGNvbnN0IFtpc1NhdmluZywgc2V0SXNTYXZpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IHtcbiAgICByZWdpc3RlcixcbiAgICBoYW5kbGVTdWJtaXQsXG4gICAgY29udHJvbCxcbiAgICBmb3JtU3RhdGU6IHsgZXJyb3JzIH0sXG4gIH0gPSB1c2VGb3JtPEJvb2tGb3JtVmFsdWVzVHlwZT4oe1xuICAgIHJlc29sdmVyOiB6b2RSZXNvbHZlcihCb29rRm9ybVNjaGVtYSkgYXMgYW55LFxuICAgIGRlZmF1bHRWYWx1ZXM6IGNvbnZlcnRCb29rRGF0YVRvRm9ybVZhbHVlcyhpbml0aWFsRGF0YSksXG4gIH0pO1xuXG4gIGNvbnN0IHsgZmllbGRzLCBhcHBlbmQsIHJlbW92ZSB9ID0gdXNlRmllbGRBcnJheSh7XG4gICAgY29udHJvbCxcbiAgICBuYW1lOiBcInJlY29tbWVuZGF0aW9uc1wiLFxuICB9KTtcblxuICBjb25zdCBoYW5kbGVGb3JtU3VibWl0ID0gKGRhdGE6IEJvb2tGb3JtVmFsdWVzVHlwZSkgPT4ge1xuICAgIHNldElzU2F2aW5nKHRydWUpO1xuXG4gICAgY29uc3QgYm9va0RhdGEgPSBjb252ZXJ0Rm9ybVZhbHVlc1RvQm9va0RhdGEoZGF0YSk7XG5cbiAgICBpZiAob25TdWJtaXQpIHtcbiAgICAgIG9uU3VibWl0KGJvb2tEYXRhKTtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygnRG9ubsOpZXMgc291bWlzZXM6JywgYm9va0RhdGEpO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBzZXRJc1NhdmluZyhmYWxzZSk7XG4gICAgfSwgMTAwMCk7XG4gIH07XG5cbiAgY29uc3QgY29udGFpbmVyVmFyaWFudHMgPSB7XG4gICAgaGlkZGVuOiB7IG9wYWNpdHk6IDAgfSxcbiAgICB2aXNpYmxlOiB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgdHJhbnNpdGlvbjoge1xuICAgICAgICBzdGFnZ2VyQ2hpbGRyZW46IDAuMlxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCBpdGVtVmFyaWFudHMgPSB7XG4gICAgaGlkZGVuOiB7IHk6IDIwLCBvcGFjaXR5OiAwIH0sXG4gICAgdmlzaWJsZToge1xuICAgICAgeTogMCxcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICB0cmFuc2l0aW9uOiB7XG4gICAgICAgIHR5cGU6ICdzcHJpbmcnLFxuICAgICAgICBzdGlmZm5lc3M6IDEwMCxcbiAgICAgICAgZGFtcGluZzogMTJcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8bW90aW9uLmZvcm1cbiAgICAgIGluaXRpYWw9XCJoaWRkZW5cIlxuICAgICAgYW5pbWF0ZT1cInZpc2libGVcIlxuICAgICAgdmFyaWFudHM9e2NvbnRhaW5lclZhcmlhbnRzfVxuICAgICAgb25TdWJtaXQ9e2hhbmRsZVN1Ym1pdChoYW5kbGVGb3JtU3VibWl0IGFzIGFueSl9XG4gICAgICBjbGFzc05hbWU9XCJzcGFjZS15LTggcm91bmRlZC14bCBiZy1ncmFkaWVudC10by1iciBmcm9tLW9yYW5nZS01MCB0by1hbWJlci01MCBwLTggc2hhZG93LWxnIGJvcmRlciBib3JkZXItYW1iZXItMTAwXCJcbiAgICA+XG4gICAgICA8QWNjb3JkaW9uIHR5cGU9XCJzaW5nbGVcIiBjb2xsYXBzaWJsZSAgY2xhc3NOYW1lPVwidy1mdWxsIHNwYWNlLXktNFwiPlxuICAgICAgPEFjY29yZGlvbkl0ZW0gdmFsdWU9XCJhcnJpdmFsXCIgY2xhc3NOYW1lPVwiYm9yZGVyLW5vbmVcIiA+XG4gICAgICAgIDxtb3Rpb24uZGl2XG4gICAgICAgICAgdmFyaWFudHM9e2l0ZW1WYXJpYW50c31cbiAgICAgICAgICBjbGFzc05hbWU9XCJiZy13aGl0ZS84MCByb3VuZGVkLWxnIHNoYWRvdy1zbSBib3JkZXItbC00IGJvcmRlci1bI2YwNGMyM10gb3ZlcmZsb3ctaGlkZGVuXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxBY2NvcmRpb25UcmlnZ2VyIGNsYXNzTmFtZT1cInB4LTYgcHktNCBob3Zlcjpuby11bmRlcmxpbmUgaG92ZXI6Ymctb3JhbmdlLTUwLzUwIHRyYW5zaXRpb24tYWxsXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtc2VtaWJvbGQgdGV4dC1bI2YwNGMyM10gZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgICAgICAgICAgICAgPFBsYW5lIGNsYXNzTmFtZT1cImgtNSB3LTVcIiAvPiBBcnJpdsOpZVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvQWNjb3JkaW9uVHJpZ2dlcj5cbiAgICAgICAgICA8QWNjb3JkaW9uQ29udGVudCBjbGFzc05hbWU9XCJweC02IHNwYWNlLXktNFwiPlxuXG4gICAgICAgIDxJbnB1dEZvcm1cbiAgICAgICAgICBsYWJlbD1cIkhldXJlIGQnYXJyaXbDqWVcIlxuICAgICAgICAgIG5hbWU9XCJhcnJpdmFsVGltZVwiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJFeDogMTU6MDBcIlxuICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgICAgICAgLz5cblxuICAgICAgICA8SW5wdXRGb3JtXG4gICAgICAgICAgbGFiZWw9XCJJbnN0cnVjdGlvbnMgZCdhY2PDqHNcIlxuICAgICAgICAgIG5hbWU9XCJhY2Nlc3NJbnN0cnVjdGlvbnNcIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiQ29tbWVudCBhY2PDqWRlciBhdSBsb2dlbWVudFwiXG4gICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgICAgICAvPlxuXG4gICAgICAgIDxJbnB1dEZvcm1cbiAgICAgICAgICBsYWJlbD1cIkluZm9ybWF0aW9ucyBzdXBwbMOpbWVudGFpcmVzXCJcbiAgICAgICAgICBuYW1lPVwiYXJyaXZhbEFkZGl0aW9uYWxJbmZvXCJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIkF1dHJlcyBpbmZvcm1hdGlvbnMgdXRpbGVzIHBvdXIgbCdhcnJpdsOpZVwiXG4gICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgICAgICAvPlxuICAgICAgICAgIDwvQWNjb3JkaW9uQ29udGVudD5cbiAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgICAgPC9BY2NvcmRpb25JdGVtPlxuXG4gICAgICA8QWNjb3JkaW9uSXRlbSB2YWx1ZT1cImRlcGFydHVyZVwiIGNsYXNzTmFtZT1cImJvcmRlci1ub25lXCI+XG4gICAgICAgIDxtb3Rpb24uZGl2XG4gICAgICAgICAgdmFyaWFudHM9e2l0ZW1WYXJpYW50c31cbiAgICAgICAgICBjbGFzc05hbWU9XCJiZy13aGl0ZS84MCByb3VuZGVkLWxnIHNoYWRvdy1zbSBib3JkZXItbC00IGJvcmRlci1waW5rLTQwMCBvdmVyZmxvdy1oaWRkZW5cIlxuICAgICAgICA+XG4gICAgICAgICAgPEFjY29yZGlvblRyaWdnZXIgY2xhc3NOYW1lPVwicHgtNiBweS00IGhvdmVyOm5vLXVuZGVybGluZSBob3ZlcjpiZy1waW5rLTUwLzUwIHRyYW5zaXRpb24tYWxsXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtc2VtaWJvbGQgdGV4dC1waW5rLTUwMCBmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgICAgICAgICAgICA8UGxhbmUgY2xhc3NOYW1lPVwiaC01IHctNSByb3RhdGUtMTgwXCIgLz4gRMOpcGFydFxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvQWNjb3JkaW9uVHJpZ2dlcj5cbiAgICAgICAgICA8QWNjb3JkaW9uQ29udGVudCBjbGFzc05hbWU9XCJweC02IHNwYWNlLXktNFwiPlxuXG4gICAgICAgIDxJbnB1dEZvcm1cbiAgICAgICAgICBsYWJlbD1cIkhldXJlIGRlIGTDqXBhcnRcIlxuICAgICAgICAgIG5hbWU9XCJkZXBhcnR1cmVUaW1lXCJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIkV4OiAxMTowMFwiXG4gICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgICAgICAvPlxuXG4gICAgICAgIDxJbnB1dEZvcm1cbiAgICAgICAgICBsYWJlbD1cIkluc3RydWN0aW9ucyBkZSBzb3J0aWVcIlxuICAgICAgICAgIG5hbWU9XCJleGl0SW5zdHJ1Y3Rpb25zXCJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIkNvbW1lbnQgcXVpdHRlciBsZSBsb2dlbWVudFwiXG4gICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgICAgICAvPlxuXG4gICAgICAgIDxJbnB1dEZvcm1cbiAgICAgICAgICBsYWJlbD1cIkluZm9ybWF0aW9ucyBzdXBwbMOpbWVudGFpcmVzXCJcbiAgICAgICAgICBuYW1lPVwiZGVwYXJ0dXJlQWRkaXRpb25hbEluZm9cIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiQXV0cmVzIGluZm9ybWF0aW9ucyB1dGlsZXMgcG91ciBsZSBkw6lwYXJ0XCJcbiAgICAgICAgICByZWdpc3Rlcj17cmVnaXN0ZXJ9XG4gICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAgICAgIC8+XG4gICAgICAgICAgPC9BY2NvcmRpb25Db250ZW50PlxuICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAgICA8L0FjY29yZGlvbkl0ZW0+XG5cbiAgICAgIDxBY2NvcmRpb25JdGVtIHZhbHVlPVwiYWNjb21tb2RhdGlvblwiIGNsYXNzTmFtZT1cImJvcmRlci1ub25lXCI+XG4gICAgICAgIDxtb3Rpb24uZGl2XG4gICAgICAgICAgdmFyaWFudHM9e2l0ZW1WYXJpYW50c31cbiAgICAgICAgICBjbGFzc05hbWU9XCJiZy13aGl0ZS84MCByb3VuZGVkLWxnIHNoYWRvdy1zbSBib3JkZXItbC00IGJvcmRlci1hbWJlci00MDAgb3ZlcmZsb3ctaGlkZGVuXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxBY2NvcmRpb25UcmlnZ2VyIGNsYXNzTmFtZT1cInB4LTYgcHktNCBob3Zlcjpuby11bmRlcmxpbmUgaG92ZXI6YmctYW1iZXItNTAvNTAgdHJhbnNpdGlvbi1hbGxcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQteGwgZm9udC1zZW1pYm9sZCB0ZXh0LWFtYmVyLTUwMCBmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgICAgICAgICAgICA8SG9tZSBjbGFzc05hbWU9XCJoLTUgdy01XCIgLz4gSMOpYmVyZ2VtZW50XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9BY2NvcmRpb25UcmlnZ2VyPlxuICAgICAgICAgIDxBY2NvcmRpb25Db250ZW50IGNsYXNzTmFtZT1cInB4LTYgc3BhY2UteS00XCI+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncmlkIGdyaWQtY29scy0yIGdhcC00XCI+XG4gICAgICAgICAgPElucHV0Rm9ybVxuICAgICAgICAgICAgbGFiZWw9XCJOb20gZHUgcsOpc2VhdSBXaWZpXCJcbiAgICAgICAgICAgIG5hbWU9XCJ3aWZpTmFtZVwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIk5vbSBkdSByw6lzZWF1IFdpZmlcIlxuICAgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAgICAgICAgLz5cblxuICAgICAgICAgIDxJbnB1dEZvcm1cbiAgICAgICAgICAgIGxhYmVsPVwiTW90IGRlIHBhc3NlIFdpZmlcIlxuICAgICAgICAgICAgbmFtZT1cIndpZmlQYXNzd29yZFwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIk1vdCBkZSBwYXNzZSBXaWZpXCJcbiAgICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS0yXCI+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJob3VzZVJ1bGVzXCIgY2xhc3NOYW1lPVwidGV4dC1zbSBmb250LW1lZGl1bVwiPlxuICAgICAgICAgICAgUsOoZ2xlcyBkZSBsYSBtYWlzb25cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDx0ZXh0YXJlYVxuICAgICAgICAgICAgaWQ9XCJob3VzZVJ1bGVzXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRW50cmV6IGNoYXF1ZSByw6hnbGUgc3VyIHVuZSBub3V2ZWxsZSBsaWduZVwiXG4gICAgICAgICAgICB7Li4ucmVnaXN0ZXIoJ2hvdXNlUnVsZXMnKX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17YHctZnVsbCBtaW4taC1bMTAwcHhdIHJvdW5kZWQtbWQgYm9yZGVyICR7ZXJyb3JzLmhvdXNlUnVsZXMgPyAnYm9yZGVyLWRlc3RydWN0aXZlJyA6ICdib3JkZXItaW5wdXQnfSBiZy10cmFuc3BhcmVudCBweC0zIHB5LTIgdGV4dC1zbSBzaGFkb3ctc21gfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC14cyB0ZXh0LW11dGVkLWZvcmVncm91bmRcIj5FbnRyZXogY2hhcXVlIHLDqGdsZSBzdXIgdW5lIG5vdXZlbGxlIGxpZ25lPC9wPlxuICAgICAgICAgIHtlcnJvcnMuaG91c2VSdWxlcyAmJiAoXG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIHRleHQtZGVzdHJ1Y3RpdmVcIj57ZXJyb3JzLmhvdXNlUnVsZXMubWVzc2FnZT8udG9TdHJpbmcoKX08L3A+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncmlkIGdyaWQtY29scy0yIGdhcC00XCI+XG4gICAgICAgICAgPElucHV0Rm9ybVxuICAgICAgICAgICAgbGFiZWw9XCJOb20gZHUgcHJvcHJpw6l0YWlyZVwiXG4gICAgICAgICAgICBuYW1lPVwib3duZXJOYW1lXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVm90cmUgbm9tXCJcbiAgICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgICAgICAgIC8+XG5cbiAgICAgICAgICA8SW5wdXRGb3JtXG4gICAgICAgICAgICBsYWJlbD1cIkNvbnRhY3QgZHUgcHJvcHJpw6l0YWlyZVwiXG4gICAgICAgICAgICBuYW1lPVwib3duZXJDb250YWN0XCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVm90cmUgbnVtw6lybyBkZSB0w6lsw6lwaG9uZVwiXG4gICAgICAgICAgICByZWdpc3Rlcj17cmVnaXN0ZXJ9XG4gICAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8SW5wdXRGb3JtXG4gICAgICAgICAgbGFiZWw9XCJJbmZvcm1hdGlvbnMgZ8OpbsOpcmFsZXNcIlxuICAgICAgICAgIG5hbWU9XCJnZW5lcmFsSW5mb1wiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJBdXRyZXMgaW5mb3JtYXRpb25zIHV0aWxlcyBzdXIgbGUgbG9nZW1lbnRcIlxuICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgICAgICAgLz5cbiAgICAgICAgICA8L0FjY29yZGlvbkNvbnRlbnQ+XG4gICAgICAgIDwvbW90aW9uLmRpdj5cbiAgICAgIDwvQWNjb3JkaW9uSXRlbT5cblxuICAgICAgPEFjY29yZGlvbkl0ZW0gdmFsdWU9XCJyZWNvbW1lbmRhdGlvbnNcIiBjbGFzc05hbWU9XCJib3JkZXItbm9uZVwiPlxuICAgICAgICA8bW90aW9uLmRpdlxuICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiYmctd2hpdGUvODAgcm91bmRlZC1sZyBzaGFkb3ctc20gYm9yZGVyLWwtNCBib3JkZXItdGVhbC00MDAgb3ZlcmZsb3ctaGlkZGVuXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxBY2NvcmRpb25UcmlnZ2VyIGNsYXNzTmFtZT1cInB4LTYgcHktNCBob3Zlcjpuby11bmRlcmxpbmUgaG92ZXI6YmctdGVhbC01MC81MCB0cmFuc2l0aW9uLWFsbFwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC14bCBmb250LXNlbWlib2xkIHRleHQtdGVhbC02MDAgZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgICAgICAgICAgICAgPE1hcFBpbiBjbGFzc05hbWU9XCJoLTUgdy01XCIgLz4gUmVjb21tYW5kYXRpb25zXG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9BY2NvcmRpb25UcmlnZ2VyPlxuICAgICAgICAgIDxBY2NvcmRpb25Db250ZW50IGNsYXNzTmFtZT1cInB4LTYgc3BhY2UteS00XCI+XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIHRleHQtdGVhbC03MDAvNzBcIj5Bam91dGV6IGRlcyByZWNvbW1hbmRhdGlvbnMgcG91ciB2b3MgaW52aXTDqXMgKHJlc3RhdXJhbnRzLCBhY3Rpdml0w6lzLCBiYXJzLCBldGMuKTwvcD5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktNFwiPlxuICAgICAgICAgIHtmaWVsZHMubWFwKChmaWVsZCwgaW5kZXgpID0+IChcbiAgICAgICAgICAgIDxSZWNvbW1lbmRhdGlvblxuICAgICAgICAgICAgICBrZXk9e2ZpZWxkLmlkfVxuICAgICAgICAgICAgICBmaWVsZD17ZmllbGR9XG4gICAgICAgICAgICAgIGluZGV4PXtpbmRleH1cbiAgICAgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgICAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgICAgICAgICAgICAgcmVtb3ZlPXtyZW1vdmV9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICkpfVxuXG4gICAgICAgICAgPG1vdGlvbi5idXR0b25cbiAgICAgICAgICAgIHdoaWxlSG92ZXI9e3sgc2NhbGU6IDEuMDIgfX1cbiAgICAgICAgICAgIHdoaWxlVGFwPXt7IHNjYWxlOiAwLjk4IH19XG4gICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGFwcGVuZCh7IG5hbWU6ICcnLCB0eXBlOiAnJyBhcyBhbnksIGFkZHJlc3M6ICcnLCBkZXNjcmlwdGlvbjogJycgfSl9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciB3LWZ1bGwgcHktMyBweC00IGJvcmRlciBib3JkZXItZGFzaGVkIHJvdW5kZWQtbWQgYmctZ3JhZGllbnQtdG8tciBmcm9tLXRlYWwtNDAwIHRvLXRlYWwtMzAwIHRleHQtd2hpdGUgaG92ZXI6ZnJvbS10ZWFsLTUwMCBob3Zlcjp0by10ZWFsLTQwMCB0cmFuc2l0aW9uLWFsbCBzaGFkb3ctc20gY3Vyc29yLXBvaW50ZXJcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxQbHVzQ2lyY2xlIHNpemU9ezE4fSBjbGFzc05hbWU9XCJtci0yXCIgLz5cbiAgICAgICAgICAgIEFqb3V0ZXIgdW5lIHJlY29tbWFuZGF0aW9uXG4gICAgICAgICAgPC9tb3Rpb24uYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L0FjY29yZGlvbkNvbnRlbnQ+XG4gICAgICAgIDwvbW90aW9uLmRpdj5cbiAgICAgIDwvQWNjb3JkaW9uSXRlbT5cbiAgICAgIDwvQWNjb3JkaW9uPlxuXG4gICAgICA8bW90aW9uLmRpdlxuICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxuICAgICAgICBjbGFzc05hbWU9XCJmbGV4IGp1c3RpZnktZW5kIG10LThcIlxuICAgICAgPlxuICAgICAgICA8bW90aW9uLmJ1dHRvblxuICAgICAgICAgIHdoaWxlSG92ZXI9e3sgc2NhbGU6IDEuMDUgfX1cbiAgICAgICAgICB3aGlsZVRhcD17eyBzY2FsZTogMC45NSB9fVxuICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgIGRpc2FibGVkPXtpc1NhdmluZ31cbiAgICAgICAgICBjbGFzc05hbWU9XCJweC02IHB5LTMgYmctZ3JhZGllbnQtdG8tciBmcm9tLVsjZjA0YzIzXSB0by1waW5rLTUwMCB0ZXh0LXdoaXRlIHJvdW5kZWQtbWQgaG92ZXI6ZnJvbS1bI2YwNGMyM10gaG92ZXI6dG8tcGluay00MDAgdHJhbnNpdGlvbi1hbGwgc2hhZG93LW1kIGRpc2FibGVkOm9wYWNpdHktNTAgZm9udC1tZWRpdW1cIlxuICAgICAgICA+XG4gICAgICAgICAge2lzU2F2aW5nID8gJ0Nyw6lhdGlvbiBlbiBjb3Vycy4uLicgOiAnQ3LDqWVyIG1vbiBsaXZyZXQnfVxuICAgICAgICA8L21vdGlvbi5idXR0b24+XG4gICAgICA8L21vdGlvbi5kaXY+XG4gICAgPC9tb3Rpb24uZm9ybT5cbiAgKTtcbn1cbi4uLlxuUGF0aDogc3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3hcbid1c2UgY2xpZW50JztcblxuaW1wb3J0IHsgQm9va0VkaXRGb3JtIH0gZnJvbSAnQC9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybSc7XG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQm9va0RhdGEgfSBmcm9tICdAL3R5cGVzL0Jvb2tEYXRhJztcbmltcG9ydCB7IG1vdGlvbiB9IGZyb20gJ2ZyYW1lci1tb3Rpb24nO1xuaW1wb3J0IHsgUGFsbXRyZWUsIEJvb2ssIFN1biB9IGZyb20gJ2x1Y2lkZS1yZWFjdCc7XG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tICduZXh0L25hdmlnYXRpb24nO1xuaW1wb3J0IHtQYXNzd29yZERpc3BsYXl9IGZyb20gXCIuLi8uLi8uLi9jb21wb25lbnRzL1Bhc3N3b3JkRGlzcGxheVwiO1xuXG5mdW5jdGlvbiBFZGl0Rm9ybUJvb2soKSB7XG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xuICBjb25zdCBbYm9va0RhdGEsIHNldEJvb2tEYXRhXSA9IHVzZVN0YXRlPEJvb2tEYXRhIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcblxuICBjb25zdCBjb250YWluZXJWYXJpYW50cyA9IHtcbiAgICBoaWRkZW46IHsgb3BhY2l0eTogMCB9LFxuICAgIHZpc2libGU6IHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICB0cmFuc2l0aW9uOiB7XG4gICAgICAgIHN0YWdnZXJDaGlsZHJlbjogMC4yXG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGl0ZW1WYXJpYW50cyA9IHtcbiAgICBoaWRkZW46IHsgeTogMjAsIG9wYWNpdHk6IDAgfSxcbiAgICB2aXNpYmxlOiB7XG4gICAgICB5OiAwLFxuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIHRyYW5zaXRpb246IHtcbiAgICAgICAgdHlwZTogJ3NwcmluZycsXG4gICAgICAgIHN0aWZmbmVzczogMTAwLFxuICAgICAgICBkYW1waW5nOiAxMlxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHN0b3JlZERhdGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYm9va0RhdGEnKTtcbiAgICBpZiAoc3RvcmVkRGF0YSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcGFyc2VkRGF0YSA9IEpTT04ucGFyc2Uoc3RvcmVkRGF0YSk7XG4gICAgICAgIHNldEJvb2tEYXRhKHBhcnNlZERhdGEpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgcsOpY3Vww6lyYXRpb24gZGVzIGRvbm7DqWVzOicsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPG1vdGlvbi5zZWN0aW9uXG4gICAgICBpbml0aWFsPVwiaGlkZGVuXCJcbiAgICAgIGFuaW1hdGU9XCJ2aXNpYmxlXCJcbiAgICAgIHZhcmlhbnRzPXtjb250YWluZXJWYXJpYW50c31cbiAgICAgIGNsYXNzTmFtZT1cIm1pbi1oLXNjcmVlbiB3LWZ1bGwgYmctZ3JhZGllbnQtdG8tYiBmcm9tLW9yYW5nZS01MCB0by1hbWJlci0xMDAgcHktMTJcIlxuICAgID5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyIG14LWF1dG8gcHgtNFwiPlxuICAgICAgICA8bW90aW9uLmRpdlxuICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAgICAgICAgY2xhc3NOYW1lPVwidy1mdWxsIG1heC13LTR4bCBteC1hdXRvIHAtOCBzcGFjZS15LTggYmctZ3JhZGllbnQtdG8tYiBmcm9tLXdoaXRlIHRvLWFtYmVyLTUwIHJvdW5kZWQteGwgc2hhZG93LWxnIGJvcmRlciBib3JkZXItYW1iZXItMTAwXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxtb3Rpb24uZGl2XG4gICAgICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXIgc3BhY2UteS0yXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGdhcC0zIG1iLTRcIj5cbiAgICAgICAgICAgICAgPFBhbG10cmVlIGNsYXNzTmFtZT1cImgtOCB3LTggdGV4dC1bI2YwNGMyM11cIiAvPlxuICAgICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwidGV4dC0zeGwgZm9udC1ib2xkIGJnLWdyYWRpZW50LXRvLXIgZnJvbS1bI2YwNGMyM10gdG8tcGluay01MDAgYmctY2xpcC10ZXh0IHRleHQtdHJhbnNwYXJlbnRcIj5cbiAgICAgICAgICAgICAgICBWb3RyZSBMaXZyZXQgZCdBY2N1ZWlsXG4gICAgICAgICAgICAgIDwvaDI+XG4gICAgICAgICAgICAgIDxTdW4gY2xhc3NOYW1lPVwiaC04IHctOCB0ZXh0LWFtYmVyLTQwMFwiIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbi4uLlxuXG4gICAgICAgICAge2lzTG9hZGluZyA/IChcbiAgICAgICAgICAgIDxtb3Rpb24uZGl2XG4gICAgICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRleHQtY2VudGVyIHB5LTEyIGZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHNwYWNlLXktNFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxCb29rIGNsYXNzTmFtZT1cImgtMTIgdy0xMiB0ZXh0LWFtYmVyLTQwMCBhbmltYXRlLXB1bHNlXCIgLz5cbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1sZyB0ZXh0LWdyYXktNjAwXCI+Q2hhcmdlbWVudCBkZSB2b3RyZSBsaXZyZXQuLi48L3A+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy02NCBoLTIgYmctZ3JheS0yMDAgcm91bmRlZC1mdWxsIG92ZXJmbG93LWhpZGRlblwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaC1mdWxsIGJnLWdyYWRpZW50LXRvLXIgZnJvbS1bI2YwNGMyM10gdG8tcGluay01MDAgYW5pbWF0ZS1bbG9hZGluZ18xLjVzX2Vhc2UtaW4tb3V0X2luZmluaXRlXVwiIHN0eWxlPXt7IHdpZHRoOiAnNzAlJyB9fT48L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDxtb3Rpb24uZGl2IHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9IGNsYXNzTmFtZT1cInNwYWNlLXktOFwiPlxuICAgICAgICAgICAgICB7LyogQWZmaWNoYWdlIGR1IG1vdCBkZSBwYXNzZSAqL31cbiAgICAgICAgICAgICAge2Jvb2tEYXRhPy5hY2Nlc3NQYXNzd29yZCAmJiBib29rRGF0YT8uaWQgJiYgKFxuICAgICAgICAgICAgICAgIDxtb3Rpb24uZGl2IHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9PlxuICAgICAgICAgICAgICAgICAgPFBhc3N3b3JkRGlzcGxheSBwYXNzd29yZD17Ym9va0RhdGEuYWNjZXNzUGFzc3dvcmR9IGJvb2tJZD17Ym9va0RhdGEuaWR9IC8+XG4gICAgICAgICAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgICAgICAgICAgICApfVxuXG4gICAgICAgICAgICAgIDxCb29rRWRpdEZvcm1cbiAgICAgICAgICAgICAgICBpbml0aWFsRGF0YT17Ym9va0RhdGEgfHwgdW5kZWZpbmVkfVxuICAgICAgICAgICAgICAgIG9uU3VibWl0PXsoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm7DqWVzIGR1IGZvcm11bGFpcmUgc291bWlzZXM6JywgZGF0YSk7XG4gICAgICAgICAgICAgICAgICBhbGVydCgnTW9kaWZpY2F0aW9ucyBlbnJlZ2lzdHLDqWVzIGF2ZWMgc3VjY8OocyEnKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvbW90aW9uLmRpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8c3R5bGUganN4IGdsb2JhbD57YFxuICAgICAgICBAa2V5ZnJhbWVzIGxvYWRpbmcge1xuICAgICAgICAgIDAlIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKTsgfVxuICAgICAgICAgIDUwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWCgzMCUpOyB9XG4gICAgICAgICAgMTAwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWCgxMDAlKTsgfVxuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9tb3Rpb24uc2VjdGlvbj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRWRpdEZvcm1Cb29rOy4uLlxuUGF0aDogc3JjL2NvbXBvbmVudHMvU2ltcGxlRm9ybS50c3hcblwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VGb3JtIH0gZnJvbSBcInJlYWN0LWhvb2stZm9ybVwiO1xuaW1wb3J0IHsgem9kUmVzb2x2ZXIgfSBmcm9tIFwiQGhvb2tmb3JtL3Jlc29sdmVycy96b2RcIjtcbmltcG9ydCB7IElucHV0IH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9pbnB1dFwiO1xuaW1wb3J0IExpbmsgZnJvbSBcIm5leHQvbGlua1wiO1xuaW1wb3J0IHsgTWFpbkZvcm1TY2hlbWEsIE1haW5Gb3JtVmFsdWVzVHlwZSB9IGZyb20gXCIuL3NjaGVtYXMvTWFpbkZvcm1TY2hlbWFcIjtcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gXCJuZXh0L25hdmlnYXRpb25cIjtcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCB7IEJvb2tEYXRhIH0gZnJvbSBcIkAvdHlwZXMvQm9va0RhdGFcIjtcbmltcG9ydCB7IG1vdGlvbiB9IGZyb20gXCJmcmFtZXItbW90aW9uXCI7XG5pbXBvcnQgeyBGaWxlVXAsIExpbmsyLCBQYWxtdHJlZSwgU3VuLCBVcGxvYWQgfSBmcm9tIFwibHVjaWRlLXJlYWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBTaW1wbGVGb3JtKCkge1xuICBjb25zdCBbaXNTdWJtaXR0ZWQsIHNldElzU3VibWl0dGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2ZpbGVOYW1lLCBzZXRGaWxlTmFtZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KFwiXCIpO1xuICBjb25zdCBbZmlsZUluZm8sIHNldEZpbGVJbmZvXSA9IHVzZVN0YXRlPHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIHNpemU6IHN0cmluZztcbiAgfSB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbYm9va0RhdGEsIHNldEJvb2tEYXRhXSA9IHVzZVN0YXRlPEJvb2tEYXRhIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xuXG4gIC8vIETDqWZpbmlyIGxlcyBhbmltYXRpb25zXG4gIGNvbnN0IGNvbnRhaW5lclZhcmlhbnRzID0ge1xuICAgIGhpZGRlbjogeyBvcGFjaXR5OiAwIH0sXG4gICAgdmlzaWJsZToge1xuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIHRyYW5zaXRpb246IHtcbiAgICAgICAgc3RhZ2dlckNoaWxkcmVuOiAwLjJcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaXRlbVZhcmlhbnRzID0ge1xuICAgIGhpZGRlbjogeyB5OiAyMCwgb3BhY2l0eTogMCB9LFxuICAgIHZpc2libGU6IHtcbiAgICAgIHk6IDAsXG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgdHJhbnNpdGlvbjoge1xuICAgICAgICB0eXBlOiAnc3ByaW5nJyxcbiAgICAgICAgc3RpZmZuZXNzOiAxMDAsXG4gICAgICAgIGRhbXBpbmc6IDEyXG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHtcbiAgICByZWdpc3RlcixcbiAgICBoYW5kbGVTdWJtaXQsXG4gICAgc2V0VmFsdWUsXG4gICAgZm9ybVN0YXRlOiB7IGVycm9ycywgaXNTdWJtaXR0aW5nIH0sXG4gICAgd2F0Y2gsXG4gIH0gPSB1c2VGb3JtPE1haW5Gb3JtVmFsdWVzVHlwZT4oe1xuICAgIHJlc29sdmVyOiB6b2RSZXNvbHZlcihNYWluRm9ybVNjaGVtYSksXG4gICAgZGVmYXVsdFZhbHVlczoge1xuICAgICAgdXJsOiBcIlwiLFxuICAgIH0sXG4gICAgbW9kZTogXCJvbkNoYW5nZVwiLFxuICB9KTtcblxuXG4gIGNvbnN0IG9uU3VibWl0ID0gKGRhdGE6IE1haW5Gb3JtVmFsdWVzVHlwZSkgPT4ge1xuICAgIHNldElzTG9hZGluZyh0cnVlKTtcbiAgICBjb25zdCBoYXNGaWxlID0gZGF0YS5maWxlICYmIGRhdGEuZmlsZS5sZW5ndGggPiAwO1xuXG4gICAgaWYgKCFoYXNGaWxlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyZXVyOiBBdWN1biBmaWNoaWVyIG4nZXN0IHPDqWxlY3Rpb25uw6lcIik7XG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbi4uLlxuUGF0aDogc3JjL2NvbXBvbmVudHMvc2NoZW1hcy9Cb29rRm9ybVNjaGVtYS50c1xuaW1wb3J0IHsgeiB9IGZyb20gXCJ6b2RcIjtcbmltcG9ydCB7IFJlY29tbWVuZGF0aW9uVHlwZSB9IGZyb20gXCJAL3R5cGVzL0Jvb2tEYXRhXCI7XG5cbi8vIFNjaMOpbWEgcG91ciBsZXMgcmVjb21tYW5kYXRpb25zXG5jb25zdCByZWNvbW1lbmRhdGlvblNjaGVtYSA9IHoub2JqZWN0KHtcbiAgaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgbmFtZTogei5zdHJpbmcoKS5taW4oMSwgXCJMZSBub20gZXN0IHJlcXVpc1wiKSxcbiAgYWRkcmVzczogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBkZXNjcmlwdGlvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICB0eXBlOiB6Lm5hdGl2ZUVudW0oUmVjb21tZW5kYXRpb25UeXBlKVxufSk7XG5cbi8vIFNjaMOpbWEgZGUgdmFsaWRhdGlvbiBwb3VyIGxlIGZvcm11bGFpcmVcbmV4cG9ydCBjb25zdCBCb29rRm9ybVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgXG4gIC8vIEFycml2w6llXG4gIGFycml2YWxUaW1lOiB6LnN0cmluZygpLm1pbigxLCBcIkwnaGV1cmUgZCdhcnJpdsOpZSBlc3QgcmVxdWlzZVwiKSxcbiAgYWNjZXNzSW5zdHJ1Y3Rpb25zOiB6LnN0cmluZygpLm1pbigxLCBcIkxlcyBpbnN0cnVjdGlvbnMgZCdhY2PDqHMgc29udCByZXF1aXNlc1wiKSxcbiAgYXJyaXZhbEFkZGl0aW9uYWxJbmZvOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIFxuICAvLyBEw6lwYXJ0XG4gIGRlcGFydHVyZVRpbWU6IHouc3RyaW5nKCkubWluKDEsIFwiTCdoZXVyZSBkZSBkw6lwYXJ0IGVzdCByZXF1aXNlXCIpLFxuICBleGl0SW5zdHJ1Y3Rpb25zOiB6LnN0cmluZygpLm1pbigxLCBcIkxlcyBpbnN0cnVjdGlvbnMgZGUgc29ydGllIHNvbnQgcmVxdWlzZXNcIiksXG4gIGRlcGFydHVyZUFkZGl0aW9uYWxJbmZvOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIFxuICAvLyBIw6liZXJnZW1lbnRcbiAgd2lmaU5hbWU6IHouc3RyaW5nKCkubWluKDEsIFwiTGUgbm9tIGR1IHLDqXNlYXUgV2lGaSBlc3QgcmVxdWlzXCIpLFxuICB3aWZpUGFzc3dvcmQ6IHouc3RyaW5nKCkubWluKDEsIFwiTGUgbW90IGRlIHBhc3NlIFdpRmkgZXN0IHJlcXVpc1wiKSxcbiAgaG91c2VSdWxlczogei5zdHJpbmcoKS5taW4oMSwgXCJMZXMgcsOoZ2xlcyBkZSBsYSBtYWlzb24gc29udCByZXF1aXNlc1wiKSxcbiAgb3duZXJDb250YWN0OiB6LnN0cmluZygpLm1pbigxLCBcIkxlIGNvbnRhY3QgZHUgcHJvcHJpw6l0YWlyZSBlc3QgcmVxdWlzXCIpLFxuICBvd25lck5hbWU6IHouc3RyaW5nKCkubWluKDEsIFwiTGUgbm9tIGR1IHByb3ByacOpdGFpcmUgZXN0IHJlcXVpc1wiKSxcbiAgZ2VuZXJhbEluZm86IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgXG4gIC8vIFJlY29tbWFuZGF0aW9uc1xuICByZWNvbW1lbmRhdGlvbnM6IHouYXJyYXkocmVjb21tZW5kYXRpb25TY2hlbWEpLm9wdGlvbmFsKCkuZGVmYXVsdChbXSlcbn0pO1xuXG5leHBvcnQgdHlwZSBCb29rRm9ybVZhbHVlc1R5cGUgPSB6LmluZmVyPHR5cGVvZiBCb29rRm9ybVNjaGVtYT47XG4uLi5cblBhdGg6IHNyYy9jb21wb25lbnRzL3NjaGVtYXMvTWFpbkZvcm1TY2hlbWEudHNcbmltcG9ydCB7IHogfSBmcm9tIFwiem9kXCI7XG5cbmV4cG9ydCBjb25zdCBNYWluRm9ybVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgdXJsOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIGZpbGU6IHouYW55KClcbiAgICAub3B0aW9uYWwoKVxuICAgIC50cmFuc2Zvcm0odmFsID0+IHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfSlcbiAgICAuc3VwZXJSZWZpbmUoKGZpbGVzLCBjdHgpID0+IHtcblxuICAgICAgaWYgKGZpbGVzICYmIGZpbGVzIGluc3RhbmNlb2YgRmlsZUxpc3QgJiYgZmlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBmaWxlID0gZmlsZXNbMF07XG4gICAgICAgIGNvbnNvbGUubG9nKCdGaWNoaWVyIGTDqXRlY3TDqSBkYW5zIHN1cGVyUmVmaW5lOicsIGZpbGUubmFtZSwgZmlsZS50eXBlKTtcblxuICAgICAgICBpZiAoZmlsZS50eXBlICE9PSAnYXBwbGljYXRpb24vcGRmJykge1xuICAgICAgICAgIGN0eC5hZGRJc3N1ZSh7XG4gICAgICAgICAgICBjb2RlOiB6LlpvZElzc3VlQ29kZS5jdXN0b20sXG4gICAgICAgICAgICBtZXNzYWdlOiBcIkxlIGZpY2hpZXIgZG9pdCDDqnRyZSBhdSBmb3JtYXQgUERGXCIsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxufSkuc3VwZXJSZWZpbmUoKGRhdGEsIGN0eCkgPT4ge1xuICBjb25zdCBoYXNVcmwgPSBkYXRhLnVybCAmJiBkYXRhLnVybC50cmltKCkgIT09ICcnO1xuICBjb25zdCBoYXNGaWxlID0gZGF0YS5maWxlICYmIGRhdGEuZmlsZSBpbnN0YW5jZW9mIEZpbGVMaXN0ICYmIGRhdGEuZmlsZS5sZW5ndGggPiAwO1xuXG5cbiAgLy8gVsOpcmlmaWVyIHF1J2V4YWN0ZW1lbnQgdW4gZGVzIGRldXggY2hhbXBzIGVzdCByZW1wbGlcbiAgaWYgKCFoYXNVcmwgJiYgIWhhc0ZpbGUpIHtcbiAgICAvLyBBdWN1biBjaGFtcCByZW1wbGlcbiAgICBjdHguYWRkSXNzdWUoe1xuICAgICAgY29kZTogei5ab2RJc3N1ZUNvZGUuY3VzdG9tLFxuICAgICAgbWVzc2FnZTogXCJWZXVpbGxleiBmb3VybmlyIHVuZSBVUkwgb3UgaW1wb3J0ZXIgdW4gZmljaGllciBQREZcIixcbiAgICAgIHBhdGg6IFsndXJsJ10sXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaGFzVXJsICYmIGhhc0ZpbGUpIHtcbiAgICAvLyBMZXMgZGV1eCBjaGFtcHMgc29udCByZW1wbGlzXG4gICAgY3R4LmFkZElzc3VlKHtcbiAgICAgIGNvZGU6IHouWm9kSXNzdWVDb2RlLmN1c3RvbSxcbiAgICAgIG1lc3NhZ2U6IFwiVmV1aWxsZXogZm91cm5pciBzb2l0IHVuZSBVUkwsIHNvaXQgdW4gZmljaC4uLiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImE0MmY4NmM0LTk2NWEtNGY4ZS1iZjgyLTQ2ZDZiMWE1NWU5Yjt0b29sdV8wMTU4MlM5cENUSnNBWnJKd3pKTXRqRGIiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogc3JjL3R5cGVzL0Jvb2tEYXRhLnRzXG5leHBvcnQgZW51bSBSZWNvbW1lbmRhdGlvblR5cGUge1xuICBSRVNUQVVSQU5UID0gJ1JFU1RBVVJBTlQnLFxuICBBQ1RJVklUWSA9ICdBQ1RJVklUWScsXG4gIEJBUiA9ICdCQVInLFxuICBUT1VSSVNNID0gJ1RPVVJJU00nLFxuICBHUk9DRVJZID0gJ0dST0NFUlknXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVjb21tZW5kYXRpb24ge1xuICBpZD86IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBhZGRyZXNzPzogc3RyaW5nO1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgdHlwZTogUmVjb21tZW5kYXRpb25UeXBlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJvb2tEYXRhIHtcbiAgaWQ/OiBzdHJpbmc7XG5cbiAgLy8gQXJyaXbDqWVcbiAgYXJyaXZhbFRpbWU6IHN0cmluZztcbiAgYWNjZXNzSW5zdHJ1Y3Rpb25zOiBzdHJpbmc7XG4gIGFycml2YWxBZGRpdGlvbmFsSW5mbzogc3RyaW5nO1xuXG4gIC8vIETDqXBhcnRcbiAgZGVwYXJ0dXJlVGltZTogc3RyaW5nO1xuICBleGl0SW5zdHJ1Y3Rpb25zOiBzdHJpbmc7XG4gIGRlcGFydHVyZUFkZGl0aW9uYWxJbmZvOiBzdHJpbmc7XG5cbiAgLy8gSMOpYmVyZ2VtZW50XG4gIHdpZmlOYW1lOiBzdHJpbmc7XG4gIHdpZmlQYXNzd29yZDogc3RyaW5nO1xuICBob3VzZVJ1bGVzOiBzdHJpbmc7XG4gIG93bmVyQ29udGFjdDogc3RyaW5nO1xuICBvd25lck5hbWU6IHN0cmluZztcbiAgZ2VuZXJhbEluZm86IHN0cmluZztcblxuICAvLyBTw6ljdXJpdMOpXG4gIGFjY2Vzc1Bhc3N3b3JkPzogc3RyaW5nO1xuXG4gIC8vIFJlY29tbWFuZGF0aW9uc1xuICByZWNvbW1lbmRhdGlvbnM6IFJlY29tbWVuZGF0aW9uW107XG59XG4uLi5cblBhdGg6IHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3hcbid1c2UgY2xpZW50JztcblxuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VGb3JtLCB1c2VGaWVsZEFycmF5IH0gZnJvbSAncmVhY3QtaG9vay1mb3JtJztcbmltcG9ydCB7IHpvZFJlc29sdmVyIH0gZnJvbSAnQGhvb2tmb3JtL3Jlc29sdmVycy96b2QnO1xuaW1wb3J0IHsgQm9va0RhdGEgfSBmcm9tICdAL3R5cGVzL0Jvb2tEYXRhJztcbmltcG9ydCB7IEJvb2tGb3JtU2NoZW1hLCBCb29rRm9ybVZhbHVlc1R5cGUgfSBmcm9tICcuL3NjaGVtYXMvQm9va0Zvcm1TY2hlbWEnO1xuaW1wb3J0IElucHV0Rm9ybSBmcm9tICcuL0lucHV0Rm9ybSc7XG5pbXBvcnQgeyBQbHVzQ2lyY2xlLCBQYWxtdHJlZSwgUGxhbmUsIEhvbWUsIE1hcFBpbiB9IGZyb20gJ2x1Y2lkZS1yZWFjdCc7XG5pbXBvcnQgUmVjb21tZW5kYXRpb24gZnJvbSAnLi9SZWNvbW1lbmRhdGlvbic7XG5pbXBvcnQgeyBtb3Rpb24gfSBmcm9tICdmcmFtZXItbW90aW9uJztcbmltcG9ydCB7IEFjY29yZGlvbiwgQWNjb3JkaW9uQ29udGVudCwgQWNjb3JkaW9uSXRlbSwgQWNjb3JkaW9uVHJpZ2dlciB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9hY2NvcmRpb24nO1xuXG5jb25zdCBjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMgPSAoZGF0YTogQm9va0RhdGEgfCB1bmRlZmluZWQpOiBCb29rRm9ybVZhbHVlc1R5cGUgPT4ge1xuICByZXR1cm4ge1xuICAgIGlkOiBkYXRhPy5pZCxcbiAgICBhcnJpdmFsVGltZTogZGF0YT8uYXJyaXZhbFRpbWUgfHwgJycsXG4gICAgYWNjZXNzSW5zdHJ1Y3Rpb25zOiBkYXRhPy5hY2Nlc3NJbnN0cnVjdGlvbnMgfHwgJycsXG4gICAgYXJyaXZhbEFkZGl0aW9uYWxJbmZvOiBkYXRhPy5hcnJpdmFsQWRkaXRpb25hbEluZm8gfHwgJycsXG4gICAgZGVwYXJ0dXJlVGltZTogZGF0YT8uZGVwYXJ0dXJlVGltZSB8fCAnJyxcbiAgICBleGl0SW5zdHJ1Y3Rpb25zOiBkYXRhPy5leGl0SW5zdHJ1Y3Rpb25zIHx8ICcnLFxuICAgIGRlcGFydHVyZUFkZGl0aW9uYWxJbmZvOiBkYXRhPy5kZXBhcnR1cmVBZGRpdGlvbmFsSW5mbyB8fCAnJyxcbiAgICB3aWZpTmFtZTogZGF0YT8ud2lmaU5hbWUgfHwgJycsXG4gICAgd2lmaVBhc3N3b3JkOiBkYXRhPy53aWZpUGFzc3dvcmQgfHwgJycsXG4gICAgaG91c2VSdWxlczogZGF0YT8uaG91c2VSdWxlcyB8fCAnJyxcbiAgICBvd25lckNvbnRhY3Q6IGRhdGE/Lm93bmVyQ29udGFjdCB8fCAnJyxcbiAgICBvd25lck5hbWU6IGRhdGE/Lm93bmVyTmFtZSB8fCAnJyxcbiAgICBnZW5lcmFsSW5mbzogZGF0YT8uZ2VuZXJhbEluZm8gfHwgJycsXG4gICAgcmVjb21tZW5kYXRpb25zOiBkYXRhPy5yZWNvbW1lbmRhdGlvbnMgfHwgW10sXG4gIH07XG59O1xuXG5jb25zdCBjb252ZXJ0Rm9ybVZhbHVlc1RvQm9va0RhdGEgPSAodmFsdWVzOiBCb29rRm9ybVZhbHVlc1R5cGUpOiBCb29rRGF0YSA9PiB7XG4gIHJldHVybiB7XG4gICAgaWQ6IHZhbHVlcy5pZCxcbiAgICBhcnJpdmFsVGltZTogdmFsdWVzLmFycml2YWxUaW1lLFxuICAgIGFjY2Vzc0luc3RydWN0aW9uczogdmFsdWVzLmFjY2Vzc0luc3RydWN0aW9ucyxcbiAgICBhcnJpdmFsQWRkaXRpb25hbEluZm86IHZhbHVlcy5hcnJpdmFsQWRkaXRpb25hbEluZm8gfHwgJycsXG4gICAgZGVwYXJ0dXJlVGltZTogdmFsdWVzLmRlcGFydHVyZVRpbWUsXG4gICAgZXhpdEluc3RydWN0aW9uczogdmFsdWVzLmV4aXRJbnN0cnVjdGlvbnMsXG4gICAgZGVwYXJ0dXJlQWRkaXRpb25hbEluZm86IHZhbHVlcy5kZXBhcnR1cmVBZGRpdGlvbmFsSW5mbyB8fCAnJyxcbiAgICB3aWZpTmFtZTogdmFsdWVzLndpZmlOYW1lLFxuICAgIHdpZmlQYXNzd29yZDogdmFsdWVzLndpZmlQYXNzd29yZCxcbiAgICBob3VzZVJ1bGVzOiB2YWx1ZXMuaG91c2VSdWxlcyxcbiAgICBvd25lckNvbnRhY3Q6IHZhbHVlcy5vd25lckNvbnRhY3QsXG4gICAgb3duZXJOYW1lOiB2YWx1ZXMub3duZXJOYW1lLFxuICAgIGdlbmVyYWxJbmZvOiB2YWx1ZXMuZ2VuZXJhbEluZm8gfHwgJycsXG4gICAgcmVjb21tZW5kYXRpb25zOiB2YWx1ZXMucmVjb21tZW5kYXRpb25zIHx8IFtdLFxuICB9O1xufTtcblxuaW50ZXJmYWNlIEJvb2tFZGl0Rm9ybVByb3BzIHtcbiAgaW5pdGlhbERhdGE/OiBCb29rRGF0YTtcbiAgb25TdWJtaXQ/OiAoZGF0YTogQm9va0RhdGEpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBCb29rRWRpdEZvcm0oeyBpbml0aWFsRGF0YSwgb25TdWJtaXQgfTogQm9va0VkaXRGb3JtUHJvcHMpIHtcbiAgY29uc3QgW2lzU2F2aW5nLCBzZXRJc1NhdmluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3Qge1xuICAgIHJlZ2lzdGVyLFxuICAgIGhhbmRsZVN1Ym1pdCxcbiAgICBjb250cm9sLFxuICAgIGZvcm1TdGF0ZTogeyBlcnJvcnMgfSxcbiAgfSA9IHVzZUZvcm08Qm9va0Zvcm1WYWx1ZXNUeXBlPih7XG4gICAgcmVzb2x2ZXI6IHpvZFJlc29sdmVyKEJvb2tGb3JtU2NoZW1hKSBhcyBhbnksXG4gICAgZGVmYXVsdFZhbHVlczogY29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzKGluaXRpYWxEYXRhKSxcbiAgfSk7XG5cbiAgY29uc3QgeyBmaWVsZHMsIGFwcGVuZCwgcmVtb3ZlIH0gPSB1c2VGaWVsZEFycmF5KHtcbiAgICBjb250cm9sLFxuICAgIG5hbWU6IFwicmVjb21tZW5kYXRpb25zXCIsXG4gIH0pO1xuXG4gIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XG4gICAgc2V0SXNTYXZpbmcodHJ1ZSk7XG5cbiAgICBjb25zdCBib29rRGF0YSA9IGNvbnZlcnRGb3JtVmFsdWVzVG9Cb29rRGF0YShkYXRhKTtcblxuICAgIGlmIChvblN1Ym1pdCkge1xuICAgICAgb25TdWJtaXQoYm9va0RhdGEpO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKCdEb25uw6llcyBzb3VtaXNlczonLCBib29rRGF0YSk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHNldElzU2F2aW5nKGZhbHNlKTtcbiAgICB9LCAxMDAwKTtcbiAgfTtcbi4uLlxuUGF0aDogc3JjL2NvbXBvbmVudHMvc2NoZW1hcy9Cb29rRm9ybVNjaGVtYS50c1xuaW1wb3J0IHsgeiB9IGZyb20gXCJ6b2RcIjtcbmltcG9ydCB7IFJlY29tbWVuZGF0aW9uVHlwZSB9IGZyb20gXCJAL3R5cGVzL0Jvb2tEYXRhXCI7XG5cbi8vIFNjaMOpbWEgcG91ciBsZXMgcmVjb21tYW5kYXRpb25zXG5jb25zdCByZWNvbW1lbmRhdGlvblNjaGVtYSA9IHoub2JqZWN0KHtcbiAgaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgbmFtZTogei5zdHJpbmcoKS5taW4oMSwgXCJMZSBub20gZXN0IHJlcXVpc1wiKSxcbiAgYWRkcmVzczogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBkZXNjcmlwdGlvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICB0eXBlOiB6Lm5hdGl2ZUVudW0oUmVjb21tZW5kYXRpb25UeXBlKVxufSk7XG5cbi8vIFNjaMOpbWEgZGUgdmFsaWRhdGlvbiBwb3VyIGxlIGZvcm11bGFpcmVcbmV4cG9ydCBjb25zdCBCb29rRm9ybVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgXG4gIC8vIEFycml2w6llXG4gIGFycml2YWxUaW1lOiB6LnN0cmluZygpLm1pbigxLCBcIkwnaGV1cmUgZCdhcnJpdsOpZSBlc3QgcmVxdWlzZVwiKSxcbiAgYWNjZXNzSW5zdHJ1Y3Rpb25zOiB6LnN0cmluZygpLm1pbigxLCBcIkxlcyBpbnN0cnVjdGlvbnMgZCdhY2PDqHMgc29udCByZXF1aXNlc1wiKSxcbiAgYXJyaXZhbEFkZGl0aW9uYWxJbmZvOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIFxuICAvLyBEw6lwYXJ0XG4gIGRlcGFydHVyZVRpbWU6IHouc3RyaW5nKCkubWluKDEsIFwiTCdoZXVyZSBkZSBkw6lwYXJ0IGVzdCByZXF1aXNlXCIpLFxuICBleGl0SW5zdHJ1Y3Rpb25zOiB6LnN0cmluZygpLm1pbigxLCBcIkxlcyBpbnN0cnVjdGlvbnMgZGUgc29ydGllIHNvbnQgcmVxdWlzZXNcIiksXG4gIGRlcGFydHVyZUFkZGl0aW9uYWxJbmZvOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIFxuICAvLyBIw6liZXJnZW1lbnRcbiAgd2lmaU5hbWU6IHouc3RyaW5nKCkubWluKDEsIFwiTGUgbm9tIGR1IHLDqXNlYXUgV2lGaSBlc3QgcmVxdWlzXCIpLFxuICB3aWZpUGFzc3dvcmQ6IHouc3RyaW5nKCkubWluKDEsIFwiTGUgbW90IGRlIHBhc3NlIFdpRmkgZXN0IHJlcXVpc1wiKSxcbiAgaG91c2VSdWxlczogei5zdHJpbmcoKS5taW4oMSwgXCJMZXMgcsOoZ2xlcyBkZSBsYSBtYWlzb24gc29udCByZXF1aXNlc1wiKSxcbiAgb3duZXJDb250YWN0OiB6LnN0cmluZygpLm1pbigxLCBcIkxlIGNvbnRhY3QgZHUgcHJvcHJpw6l0YWlyZSBlc3QgcmVxdWlzXCIpLFxuICBvd25lck5hbWU6IHouc3RyaW5nKCkubWluKDEsIFwiTGUgbm9tIGR1IHByb3ByacOpdGFpcmUgZXN0IHJlcXVpc1wiKSxcbiAgZ2VuZXJhbEluZm86IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgXG4gIC8vIFJlY29tbWFuZGF0aW9uc1xuICByZWNvbW1lbmRhdGlvbnM6IHouYXJyYXkocmVjb21tZW5kYXRpb25TY2hlbWEpLm9wdGlvbmFsKCkuZGVmYXVsdChbXSlcbn0pO1xuXG5leHBvcnQgdHlwZSBCb29rRm9ybVZhbHVlc1R5cGUgPSB6LmluZmVyPHR5cGVvZiBCb29rRm9ybVNjaGVtYT47XG4uLi5cblBhdGg6IHNyYy9hcHAvd2VsY29tZS1ib29rL1tpZF0vcGFnZS50c3hcbid1c2UgY2xpZW50JztcblxuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJvb2tEYXRhIH0gZnJvbSAnQC90eXBlcy9Cb29rRGF0YSc7XG5pbXBvcnQgeyB1c2VQYXJhbXMgfSBmcm9tICduZXh0L25hdmlnYXRpb24nO1xuaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvaW5wdXQnO1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2J1dHRvbic7XG5pbXBvcnQgeyBMb2NrIH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcblxuZnVuY3Rpb24gQ2xpZW50Qm9vaygpIHtcbiAgY29uc3QgcGFyYW1zID0gdXNlUGFyYW1zKCk7XG4gIGNvbnN0IFtib29rRGF0YSwgc2V0Qm9va0RhdGFdID0gdXNlU3RhdGU8Qm9va0RhdGEgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW3Bhc3N3b3JkLCBzZXRQYXNzd29yZF0gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFtpc1Bhc3N3b3JkUmVxdWlyZWQsIHNldElzUGFzc3dvcmRSZXF1aXJlZF0gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgY29uc3QgW3Bhc3N3b3JkRXJyb3IsIHNldFBhc3N3b3JkRXJyb3JdID0gdXNlU3RhdGU8c3RyaW5nIHwgbnVsbD4obnVsbCk7XG5cbiAgY29uc3QgZmV0Y2hCb29rRGF0YSA9IGFzeW5jIChwd2Q6IHN0cmluZykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgICBzZXRFcnJvcihudWxsKTtcbiAgICAgIHNldFBhc3N3b3JkRXJyb3IobnVsbCk7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMS9hcGkvc3RheS8ke3BhcmFtcy5pZH0/cGFzc3dvcmQ9JHtwd2R9YCwge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcbiAgICAgICAgc2V0UGFzc3dvcmRFcnJvcignTW90IGRlIHBhc3NlIGluY29ycmVjdCcpO1xuICAgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJldXIgSFRUUDogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICBzZXRCb29rRGF0YShkYXRhKTtcbiAgICAgIHNldElzUGFzc3dvcmRSZXF1aXJlZChmYWxzZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBzZXRFcnJvcignSW1wb3NzaWJsZSBkZSByw6ljdXDDqXJlciBsZXMgZG9ubsOpZXMgZHUgbGl2cmV0LiBWZXVpbGxleiByw6llc3NheWVyIHBsdXMgdGFyZC4nKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgICBpZiAocGFyYW1zLmlkKSB7XG4gICAgICBmZXRjaEJvb2tEYXRhKCk7XG4gICAgfVxuICB9LCBbcGFyYW1zLmlkXSk7XG5cbiAgaWYgKGlzTG9hZGluZykge1xuICAgIHJldHVybiAoXG4gICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJoLXNjcmVlbiB3LXNjcmVlbiBiZy1iYWNrZ3JvdW5kIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXhsXCI+Q2hhcmdlbWVudCBkdSBsaXZyZXQgZCdow6liZXJnZW1lbnQuLi48L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9zZWN0aW9uPlxuICAgICk7XG4gIH1cblxuICBpZiAoZXJyb3IpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiaC1zY3JlZW4gdy1zY3JlZW4gYmctYmFja2dyb3VuZCBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlclwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtY2VudGVyIHRleHQtZGVzdHJ1Y3RpdmVcIj5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXhsXCI+e2Vycm9yfTwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgKTtcbiAgfVxuXG4gIGlmICghYm9va0RhdGEpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiaC1zY3JlZW4gdy1zY3JlZW4gYmctYmFja2dyb3VuZCBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlclwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtY2VudGVyIHRleHQtZGVzdHJ1Y3RpdmVcIj5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXhsXCI+TGl2cmV0IGQnaMOpYmVyZ2VtZW50IGludHJvdXZhYmxlLjwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgKTtcbiAgfVxuLi4uXG5cbiAgICAgICAgICB7LyogSW5mb3JtYXRpb25zIGQnYXJyaXbDqWUgKi99XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTRcIj5cbiAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtc2VtaWJvbGRcIj5BcnJpdsOpZTwvaDM+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyaWQgZ3JpZC1jb2xzLTEgbWQ6Z3JpZC1jb2xzLTIgZ2FwLTRcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTQgYmctbXV0ZWQvMjAgcm91bmRlZC1tZFwiPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImZvbnQtbWVkaXVtXCI+SGV1cmUgZCdhcnJpdsOpZTwvcD5cbiAgICAgICAgICAgICAgICA8cD57Ym9va0RhdGEuYXJyaXZhbFRpbWV9PC9wPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTQgYmctbXV0ZWQvMjAgcm91bmRlZC1tZFwiPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImZvbnQtbWVkaXVtXCI+SW5zdHJ1Y3Rpb25zIGQnYWNjw6hzPC9wPlxuICAgICAgICAgICAgICAgIDxwPntib29rRGF0YS5hY2Nlc3NJbnN0cnVjdGlvbnN9PC9wPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAge2Jvb2tEYXRhLmFycml2YWxBZGRpdGlvbmFsSW5mbyAmJiAoXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicC00IGJnLW11dGVkLzIwIHJvdW5kZWQtbWRcIj5cbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJmb250LW1lZGl1bVwiPkluZm9ybWF0aW9ucyBzdXBwbMOpbWVudGFpcmVzPC9wPlxuICAgICAgICAgICAgICAgIDxwPntib29rRGF0YS5hcnJpdmFsQWRkaXRpb25hbEluZm99PC9wPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICB7LyogSW5mb3JtYXRpb25zIGRlIGTDqXBhcnQgKi99XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTRcIj5cbiAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtc2VtaWJvbGRcIj5Ew6lwYXJ0PC9oMz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMSBtZDpncmlkLWNvbHMtMiBnYXAtNFwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInAtNCBiZy1tdXRlZC8yMCByb3VuZGVkLW1kXCI+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZm9udC1tZWRpdW1cIj5IZXVyZSBkZSBkw6lwYXJ0PC9wPlxuICAgICAgICAgICAgICAgIDxwPntib29rRGF0YS5kZXBhcnR1cmVUaW1lfTwvcD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicC00IGJnLW11dGVkLzIwIHJvdW5kZWQtbWRcIj5cbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJmb250LW1lZGl1bVwiPkluc3RydWN0aW9ucyBkZSBzb3J0aWU8L3A+XG4gICAgICAgICAgICAgICAgPHA+e2Jvb2tEYXRhLmV4aXRJbnN0cnVjdGlvbnN9PC9wPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAge2Jvb2tEYXRhLmRlcGFydHVyZUFkZGl0aW9uYWxJbmZvICYmIChcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTQgYmctbXV0ZWQvMjAgcm91bmRlZC1tZFwiPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImZvbnQtbWVkaXVtXCI+SW5mb3JtYXRpb25zIHN1cHBsw6ltZW50YWlyZXM8L3A+XG4gICAgICAgICAgICAgICAgPHA+e2Jvb2tEYXRhLmRlcGFydHVyZUFkZGl0aW9uYWxJbmZvfTwvcD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgey8qIEluZm9ybWF0aW9ucyBXaUZpICovfVxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS00XCI+XG4gICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwidGV4dC14bCBmb250LXNlbWlib2xkXCI+V2lGaTwvaDM+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyaWQgZ3JpZC1jb2xzLTEgbWQ6Z3JpZC1jb2xzLTIgZ2FwLTRcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTQgYmctbXV0ZWQvMjAgcm91bmRlZC1tZFwiPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImZvbnQtbWVkaXVtXCI+Tm9tIGR1IHLDqXNlYXU8L3A+XG4gICAgICAgICAgICAgICAgPHA+e2Jvb2tEYXRhLndpZmlOYW1lfTwvcD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicC00IGJnLW11dGVkLzIwIHJvdW5kZWQtbWRcIj5cbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJmb250LW1lZGl1bVwiPk1vdCBkZSBwYXNzZTwvcD5cbiAgICAgICAgICAgICAgICA8cD57Ym9va0RhdGEud2lmaVBhc3N3b3JkfTwvcD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIHsvKiBSw6hnbGVzIGRlIGxhIG1haXNvbiAqL31cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktNFwiPlxuICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQteGwgZm9udC1zZW1pYm9sZFwiPlLDqGdsZXMgZGUgbGEgbWFpc29uPC9oMz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicC00IGJnLW11dGVkLzIwIHJvdW5kZWQtbWRcIj5cbiAgICAgICAgICAgICAge2Jvb2tEYXRhLmhvdXNlUnVsZXMuc3BsaXQoJ1xcbicpLm1hcCgocnVsZSwgaW5kZXgpID0+IChcbiAgICAgICAgICAgICAgICA8ZGl2IGtleT17aW5kZXh9IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtc3RhcnQgbWItMlwiPlxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibXItMlwiPuKAojwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDxwPntydWxlfTwvcD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIHsvKiBSZWNvbW1hbmRhdGlvbnMgKi99XG4gICAgICAgICAge2Jvb2tEYXRhLnJlY29tbWVuZGF0aW9ucyAmJiBib29rRGF0YS5yZWNvbW1lbmRhdGlvbnMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktNFwiPlxuICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwidGV4dC14bCBmb250LXNlbWlib2xkXCI+UmVjb21tYW5kYXRpb25zPC9oMz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncmlkIGdyaWQtY29scy0xIG1kOmdyaWQtY29scy0yIGdhcC00XCI+XG4gICAgICAgICAgICAgICAge2Jvb2tEYXRhLnJlY29tbWVuZGF0aW9ucy5tYXAoKHJlYykgPT4gKFxuICAgICAgICAgICAgICAgICAgPGRpdiBrZXk9e3JlYy5pZH0gY2xhc3NOYW1lPVwicC00IGJnLW11dGVkLzIwIHJvdW5kZWQtbWRcIj5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZm9udC1tZWRpdW1cIj57cmVjLm5hbWV9PC9wPlxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIHRleHQtbXV0ZWQtZm9yZWdyb3VuZFwiPntyZWMudHlwZX08L3A+XG4gICAgICAgICAgICAgICAgICAgIHtyZWMuYWRkcmVzcyAmJiA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtXCI+e3JlYy5hZGRyZXNzfTwvcD59XG4gICAgICAgICAgICAgICAgICAgIHtyZWMuZGVzY3JpcHRpb24gJiYgPHAgY2xhc3NOYW1lPVwibXQtMlwiPntyZWMuZGVzY3JpcHRpb259PC9wPn1cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG5cbiAgICAgICAgICB7LyogQ29udGFjdCAqL31cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktNFwiPlxuICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQteGwgZm9udC1zZW1pYm9sZFwiPkNvbnRhY3Q8L2gzPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTQgYmctbXV0ZWQvMjAgcm91bmRlZC1tZFwiPlxuICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJmb250LW1lZGl1bVwiPntib29rRGF0YS5vd25lck5hbWV9PC9wPlxuICAgICAgICAgICAgICA8cD57Ym9va0RhdGEub3duZXJDb250YWN0fTwvcD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgey8qIEluZm9ybWF0aW9ucyBnw6luw6lyYWxlcyAqL31cbiAgICAgICAgICB7Ym9va0RhdGEuZ2VuZXJhbEluZm8gJiYgKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTRcIj5cbiAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQteGwgZm9udC1zZW1pYm9sZFwiPkluZm9ybWF0aW9ucyBnw6luw6lyYWxlczwvaDM+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicC00IGJnLW11dGVkLzIwIHJvdW5kZWQtbWRcIj5cbiAgICAgICAgICAgICAgICA8cD57Ym9va0RhdGEuZ2VuZXJhbEluZm99PC9wPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9zZWN0aW9uPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBDbGllbnRCb29rOy4uLlxuUGF0aDogcHJpc21hL3NjaGVtYS5wcmlzbWFcbmdlbmVyYXRvciBjbGllbnQge1xuICBwcm92aWRlciA9IFwicHJpc21hLWNsaWVudC1qc1wiXG59XG5cbmRhdGFzb3VyY2UgZGIge1xuICBwcm92aWRlciA9IFwic3FsaXRlXCJcbiAgdXJsICAgICAgPSBcImZpbGU6Li9kZXYuZGJcIlxufVxuXG5tb2RlbCBTdGF5SW5mbyB7XG4gIGlkIFN0cmluZyBAaWQgQGRlZmF1bHQodXVpZCgpKVxuXG4gIC8vIEFycml2YWxcbiAgYXJyaXZhbFRpbWUgICAgICAgICAgIFN0cmluZ1xuICBhY2Nlc3NJbnN0cnVjdGlvbnMgICAgU3RyaW5nXG4gIGFycml2YWxBZGRpdGlvbmFsSW5mbyBTdHJpbmdcblxuICAvLyBEZXBhcnR1cmVcbiAgZGVwYXJ0dXJlVGltZSAgICAgICAgICAgU3RyaW5nXG4gIGV4aXRJbnN0cnVjdGlvbnMgICAgICAgIFN0cmluZ1xuICBkZXBhcnR1cmVBZGRpdGlvbmFsSW5mbyBTdHJpbmdcblxuICAvLyBBY2NvbW1vZGF0aW9uXG4gIHdpZmlOYW1lICAgICBTdHJpbmdcbiAgd2lmaVBhc3N3b3JkIFN0cmluZ1xuICBob3VzZVJ1bGVzICAgU3RyaW5nXG4gIG93bmVyQ29udGFjdCBTdHJpbmdcbiAgb3duZXJOYW1lICAgIFN0cmluZ1xuICBnZW5lcmFsSW5mbyAgU3RyaW5nXG5cbiAgLy8gU2VjdXJpdHlcbiAgYWNjZXNzUGFzc3dvcmQgU3RyaW5nXG5cbiAgLy8gVW5pZmllZCBSZWNvbW1lbmRhdGlvbnNcbiAgcmVjb21tZW5kYXRpb25zIFJlY29tbWVuZGF0aW9uW11cbn1cblxubW9kZWwgUmVjb21tZW5kYXRpb24ge1xuICBpZCAgICAgICAgICBTdHJpbmcgICAgICAgICAgICAgQGlkIEBkZWZhdWx0KHV1aWQoKSlcbiAgbmFtZSAgICAgICAgU3RyaW5nXG4gIGFkZHJlc3MgICAgIFN0cmluZz9cbiAgZGVzY3JpcHRpb24gU3RyaW5nP1xuICB0eXBlICAgICAgICBSZWNvbW1lbmRhdGlvblR5cGVcbiAgc3RheUluZm8gICAgU3RheUluZm8gICAgICAgICAgIEByZWxhdGlvbihmaWVsZHM6IFtzdGF5SW5mb0lkXSwgcmVmZXJlbmNlczogW2lkXSlcbiAgc3RheUluZm9JZCAgU3RyaW5nXG59XG5cbmVudW0gUmVjb21tZW5kYXRpb25UeXBlIHtcbiAgUkVTVEFVUkFOVFxuICBBQ1RJVklUWVxuICBCQVJcbiAgVE9VUklTTVxuICBHUk9DRVJZXG59XG4uLi5cblBhdGg6IHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4XG4ndXNlIGNsaWVudCc7XG5cbmltcG9ydCB7IEJvb2tFZGl0Rm9ybSB9IGZyb20gJ0AvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0nO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJvb2tEYXRhIH0gZnJvbSAnQC90eXBlcy9Cb29rRGF0YSc7XG5pbXBvcnQgeyBtb3Rpb24gfSBmcm9tICdmcmFtZXItbW90aW9uJztcbmltcG9ydCB7IFBhbG10cmVlLCBCb29rLCBTdW4gfSBmcm9tICdsdWNpZGUtcmVhY3QnO1xuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9uYXZpZ2F0aW9uJztcbmltcG9ydCB7UGFzc3dvcmREaXNwbGF5fSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50cy9QYXNzd29yZERpc3BsYXlcIjtcblxuZnVuY3Rpb24gRWRpdEZvcm1Cb29rKCkge1xuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcbiAgY29uc3QgW2Jvb2tEYXRhLCBzZXRCb29rRGF0YV0gPSB1c2VTdGF0ZTxCb29rRGF0YSB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSk7XG5cbiAgY29uc3QgY29udGFpbmVyVmFyaWFudHMgPSB7XG4gICAgaGlkZGVuOiB7IG9wYWNpdHk6IDAgfSxcbiAgICB2aXNpYmxlOiB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgdHJhbnNpdGlvbjoge1xuICAgICAgICBzdGFnZ2VyQ2hpbGRyZW46IDAuMlxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCBpdGVtVmFyaWFudHMgPSB7XG4gICAgaGlkZGVuOiB7IHk6IDIwLCBvcGFjaXR5OiAwIH0sXG4gICAgdmlzaWJsZToge1xuICAgICAgeTogMCxcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICB0cmFuc2l0aW9uOiB7XG4gICAgICAgIHR5cGU6ICdzcHJpbmcnLFxuICAgICAgICBzdGlmZm5lc3M6IDEwMCxcbiAgICAgICAgZGFtcGluZzogMTJcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBzdG9yZWREYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2Jvb2tEYXRhJyk7XG4gICAgaWYgKHN0b3JlZERhdGEpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZERhdGEgPSBKU09OLnBhcnNlKHN0b3JlZERhdGEpO1xuICAgICAgICBzZXRCb29rRGF0YShwYXJzZWREYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBsb3JzIGRlIGxhIHLDqWN1cMOpcmF0aW9uIGRlcyBkb25uw6llczonLCBlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gIH0sIFtdKTtcbi4uLlxuXG4gICAgICAgICAge2lzTG9hZGluZyA/IChcbiAgICAgICAgICAgIDxtb3Rpb24uZGl2XG4gICAgICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRleHQtY2VudGVyIHB5LTEyIGZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHNwYWNlLXktNFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxCb29rIGNsYXNzTmFtZT1cImgtMTIgdy0xMiB0ZXh0LWFtYmVyLTQwMCBhbmltYXRlLXB1bHNlXCIgLz5cbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1sZyB0ZXh0LWdyYXktNjAwXCI+Q2hhcmdlbWVudCBkZSB2b3RyZSBsaXZyZXQuLi48L3A+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy02NCBoLTIgYmctZ3JheS0yMDAgcm91bmRlZC1mdWxsIG92ZXJmbG93LWhpZGRlblwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaC1mdWxsIGJnLWdyYWRpZW50LXRvLXIgZnJvbS1bI2YwNGMyM10gdG8tcGluay01MDAgYW5pbWF0ZS1bbG9hZGluZ18xLjVzX2Vhc2UtaW4tb3V0X2luZmluaXRlXVwiIHN0eWxlPXt7IHdpZHRoOiAnNzAlJyB9fT48L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDxtb3Rpb24uZGl2IHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9IGNsYXNzTmFtZT1cInNwYWNlLXktOFwiPlxuICAgICAgICAgICAgICB7LyogQWZmaWNoYWdlIGR1IG1vdCBkZSBwYXNzZSAqL31cbiAgICAgICAgICAgICAge2Jvb2tEYXRhPy5hY2Nlc3NQYXNzd29yZCAmJiBib29rRGF0YT8uaWQgJiYgKFxuICAgICAgICAgICAgICAgIDxtb3Rpb24uZGl2IHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9PlxuICAgICAgICAgICAgICAgICAgPFBhc3N3b3JkRGlzcGxheSBwYXNzd29yZD17Ym9va0RhdGEuYWNjZXNzUGFzc3dvcmR9IGJvb2tJZD17Ym9va0RhdGEuaWR9IC8+XG4gICAgICAgICAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgICAgICAgICAgICApfVxuXG4gICAgICAgICAgICAgIDxCb29rRWRpdEZvcm1cbiAgICAgICAgICAgICAgICBpbml0aWFsRGF0YT17Ym9va0RhdGEgfHwgdW5kZWZpbmVkfVxuICAgICAgICAgICAgICAgIG9uU3VibWl0PXsoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm7DqWVzIGR1IGZvcm11bGFpcmUgc291bWlzZXM6JywgZGF0YSk7XG4gICAgICAgICAgICAgICAgICBhbGVydCgnTW9kaWZpY2F0aW9ucyBlbnJlZ2lzdHLDqWVzIGF2ZWMgc3VjY8OocyEnKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvbW90aW9uLmRpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8c3R5bGUganN4IGdsb2JhbD57YFxuICAgICAgICBAa2V5ZnJhbWVzIGxvYWRpbmcge1xuICAgICAgICAgIDAlIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKTsgfVxuICAgICAgICAgIDUwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWCgzMCUpOyB9XG4gICAgICAgICAgMTAwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWCgxMDAlKTsgfVxuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9tb3Rpb24uc2VjdGlvbj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRWRpdEZvcm1Cb29rOy4uLlxuUGF0aDogc3JjL2NvbXBvbmVudHMvc2NoZW1hcy9NYWluRm9ybVNjaGVtYS50c1xuaW1wb3J0IHsgeiB9IGZyb20gXCJ6b2RcIjtcblxuZXhwb3J0IGNvbnN0IE1haW5Gb3JtU2NoZW1hID0gei5vYmplY3Qoe1xuICB1cmw6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgZmlsZTogei5hbnkoKVxuICAgIC5vcHRpb25hbCgpXG4gICAgLnRyYW5zZm9ybSh2YWwgPT4ge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9KVxuICAgIC5zdXBlclJlZmluZSgoZmlsZXMsIGN0eCkgPT4ge1xuXG4gICAgICBpZiAoZmlsZXMgJiYgZmlsZXMgaW5zdGFuY2VvZiBGaWxlTGlzdCAmJiBmaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGZpbGUgPSBmaWxlc1swXTtcbiAgICAgICAgY29uc29sZS5sb2coJ0ZpY2hpZXIgZMOpdGVjdMOpIGRhbnMgc3VwZXJSZWZpbmU6JywgZmlsZS5uYW1lLCBmaWxlLnR5cGUpO1xuXG4gICAgICAgIGlmIChmaWxlLnR5cGUgIT09ICdhcHBsaWNhdGlvbi9wZGYnKSB7XG4gICAgICAgICAgY3R4LmFkZElzc3VlKHtcbiAgICAgICAgICAgIGNvZGU6IHouWm9kSXNzdWVDb2RlLmN1c3RvbSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiTGUgZmljaGllciBkb2l0IMOqdHJlIGF1IGZvcm1hdCBQREZcIixcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG59KS5zdXBlclJlZmluZSgoZGF0YSwgY3R4KSA9PiB7XG4gIGNvbnN0IGhhc1VybCA9IGRhdGEudXJsICYmIGRhdGEudXJsLnRyaW0oKSAhPT0gJyc7XG4gIGNvbnN0IGhhc0ZpbGUgPSBkYXRhLmZpbGUgJiYgZGF0YS5maWxlIGluc3RhbmNlb2YgRmlsZUxpc3QgJiYgZGF0YS5maWxlLmxlbmd0aCA+IDA7XG4uLi5cblBhdGg6IHBhY2thZ2UuanNvblxue1xuICBcIm5hbWVcIjogXCJob3N0Qm9vay1iYWNrXCIsXG4gIFwicGFja2FnZU1hbmFnZXJcIjogXCJ5YXJuQDQuNC4xXCIsXG4gIFwic2NyaXB0c1wiOiB7XG4gICAgXCJkZXZcIjogXCJ0cy1ub2RlLWRldiAtLXJlc3Bhd24gLS10cmFuc3BpbGUtb25seSAuL3NyYy9pbmRleC50c1wiLFxuICAgIFwiYnVpbGRcIjogXCJ0c2NcIixcbiAgICBcInN0YXJ0XCI6IFwibm9kZSBkaXN0L2luZGV4LmpzXCJcbiAgfSxcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQHR5cGVzL211bHRlclwiOiBcIl4xLjQuMTJcIixcbiAgICBcImNvcnNcIjogXCJeMi44LjVcIixcbiAgICBcImRvdGVudlwiOiBcIl4xNi41LjBcIixcbiAgICBcImV4cHJlc3NcIjogXCJeNS4xLjBcIixcbiAgICBcImx1Y2lkZS1yZWFjdFwiOiBcIl4wLjQ4Ny4wXCIsXG4gICAgXCJtdWx0ZXJcIjogXCJeMS40LjUtbHRzLjJcIixcbiAgICBcIm9wZW5haVwiOiBcIl40LjkzLjBcIixcbiAgICBcInBkZi1wYXJzZVwiOiBcIl4xLjEuMVwiLFxuICAgIFwicHJpc21hXCI6IFwiXjYuNi4wXCIsXG4gICAgXCJzcWxpdGUzXCI6IFwiXjUuMS43XCJcbiAgfSxcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQHByaXNtYS9jbGllbnRcIjogXCJeNi42LjBcIixcbiAgICBcIkB0eXBlcy9jb3JzXCI6IFwiXjIuOC4xN1wiLFxuICAgIFwiQHR5cGVzL2V4cHJlc3NcIjogXCJeNS4wLjFcIixcbiAgICBcIkB0eXBlcy9ub2RlXCI6IFwiXjIyLjE0LjBcIixcbiAgICBcIkB0eXBlcy9wZGYtcGFyc2VcIjogXCJeMS4xLjVcIixcbiAgICBcImF4aW9zXCI6IFwiXjEuOC40XCIsXG4gICAgXCJmb3JtLWRhdGFcIjogXCJeNC4wLjJcIixcbiAgICBcInRzLW5vZGUtZGV2XCI6IFwiXjIuMC4wXCIsXG4gICAgXCJ0eXBlc2NyaXB0XCI6IFwiXjUuOC4zXCJcbiAgfVxufVxuLi4uXG5QYXRoOiBzcmMvY29tcG9uZW50cy9TaW1wbGVGb3JtLnRzeFxuXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZUZvcm0gfSBmcm9tIFwicmVhY3QtaG9vay1mb3JtXCI7XG5pbXBvcnQgeyB6b2RSZXNvbHZlciB9IGZyb20gXCJAaG9va2Zvcm0vcmVzb2x2ZXJzL3pvZFwiO1xuaW1wb3J0IHsgSW5wdXQgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL2lucHV0XCI7XG5pbXBvcnQgTGluayBmcm9tIFwibmV4dC9saW5rXCI7XG5pbXBvcnQgeyBNYWluRm9ybVNjaGVtYSwgTWFpbkZvcm1WYWx1ZXNUeXBlIH0gZnJvbSBcIi4vc2NoZW1hcy9NYWluRm9ybVNjaGVtYVwiO1xuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSBcIm5leHQvbmF2aWdhdGlvblwiO1xuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuaW1wb3J0IHsgQm9va0RhdGEgfSBmcm9tIFwiQC90eXBlcy9Cb29rRGF0YVwiO1xuaW1wb3J0IHsgbW90aW9uIH0gZnJvbSBcImZyYW1lci1tb3Rpb25cIjtcbmltcG9ydCB7IEZpbGVVcCwgTGluazIsIFBhbG10cmVlLCBTdW4sIFVwbG9hZCB9IGZyb20gXCJsdWNpZGUtcmVhY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIFNpbXBsZUZvcm0oKSB7XG4gIGNvbnN0IFtpc1N1Ym1pdHRlZCwgc2V0SXNTdWJtaXR0ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbZmlsZU5hbWUsIHNldEZpbGVOYW1lXSA9IHVzZVN0YXRlPHN0cmluZz4oXCJcIik7XG4gIGNvbnN0IFtmaWxlSW5mbywgc2V0RmlsZUluZm9dID0gdXNlU3RhdGU8e1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgc2l6ZTogc3RyaW5nO1xuICB9IHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFtib29rRGF0YSwgc2V0Qm9va0RhdGFdID0gdXNlU3RhdGU8Qm9va0RhdGEgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG5cbiAgLy8gRMOpZmluaXIgbGVzIGFuaW1hdGlvbnNcbiAgY29uc3QgY29udGFpbmVyVmFyaWFudHMgPSB7XG4gICAgaGlkZGVuOiB7IG9wYWNpdHk6IDAgfSxcbiAgICB2aXNpYmxlOiB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgdHJhbnNpdGlvbjoge1xuICAgICAgICBzdGFnZ2VyQ2hpbGRyZW46IDAuMlxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCBpdGVtVmFyaWFudHMgPSB7XG4gICAgaGlkZGVuOiB7IHk6IDIwLCBvcGFjaXR5OiAwIH0sXG4gICAgdmlzaWJsZToge1xuICAgICAgeTogMCxcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICB0cmFuc2l0aW9uOiB7XG4gICAgICAgIHR5cGU6ICdzcHJpbmcnLFxuICAgICAgICBzdGlmZm5lc3M6IDEwMCxcbiAgICAgICAgZGFtcGluZzogMTJcbiAgICAgIH1cbiAgICB9XG4gIH07XG4uLi5cblBhdGg6IHlhcm4ubG9ja1xuLi4uXG5cblwiaG9zdEJvb2stYmFja0B3b3Jrc3BhY2U6LlwiOlxuICB2ZXJzaW9uOiAwLjAuMC11c2UubG9jYWxcbiAgcmVzb2x1dGlvbjogXCJob3N0Qm9vay1iYWNrQHdvcmtzcGFjZTouXCJcbiAgZGVwZW5kZW5jaWVzOlxuICAgIFwiQHByaXNtYS9jbGllbnRcIjogXCJucG06XjYuNi4wXCJcbiAgICBcIkB0eXBlcy9jb3JzXCI6IFwibnBtOl4yLjguMTdcIlxuICAgIFwiQHR5cGVzL2V4cHJlc3NcIjogXCJucG06XjUuMC4xXCJcbiAgICBcIkB0eXBlcy9tdWx0ZXJcIjogXCJucG06XjEuNC4xMlwiXG4gICAgXCJAdHlwZXMvbm9kZVwiOiBcIm5wbTpeMjIuMTQuMFwiXG4gICAgXCJAdHlwZXMvcGRmLXBhcnNlXCI6IFwibnBtOl4xLjEuNVwiXG4gICAgYXhpb3M6IFwibnBtOl4xLjguNFwiXG4gICAgY29yczogXCJucG06XjIuOC41XCJcbiAgICBkb3RlbnY6IFwibnBtOl4xNi41LjBcIlxuICAgIGV4cHJlc3M6IFwibnBtOl41LjEuMFwiXG4gICAgZm9ybS1kYXRhOiBcIm5wbTpeNC4wLjJcIlxuICAgIGx1Y2lkZS1yZWFjLi4uIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiYzI0OGYzOTQtYzEzMi00ZjU0LWIzYjctMmUwZDBmZGNkMjFjO3Rvb2x1XzAxR3pVVk1KaUVNNW11d1lGdUJmcVo0cyI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3g6XG4gICAgIDFcdCd1c2UgY2xpZW50JztcbiAgICAgMlx0XG4gICAgIDNcdGltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuICAgICA0XHRpbXBvcnQgeyB1c2VGb3JtLCB1c2VGaWVsZEFycmF5IH0gZnJvbSAncmVhY3QtaG9vay1mb3JtJztcbiAgICAgNVx0aW1wb3J0IHsgem9kUmVzb2x2ZXIgfSBmcm9tICdAaG9va2Zvcm0vcmVzb2x2ZXJzL3pvZCc7XG4gICAgIDZcdGltcG9ydCB7IEJvb2tEYXRhIH0gZnJvbSAnQC90eXBlcy9Cb29rRGF0YSc7XG4gICAgIDdcdGltcG9ydCB7IEJvb2tGb3JtU2NoZW1hLCBCb29rRm9ybVZhbHVlc1R5cGUgfSBmcm9tICcuL3NjaGVtYXMvQm9va0Zvcm1TY2hlbWEnO1xuICAgICA4XHRpbXBvcnQgSW5wdXRGb3JtIGZyb20gJy4vSW5wdXRGb3JtJztcbiAgICAgOVx0aW1wb3J0IHsgUGx1c0NpcmNsZSwgUGFsbXRyZWUsIFBsYW5lLCBIb21lLCBNYXBQaW4gfSBmcm9tICdsdWNpZGUtcmVhY3QnO1xuICAgIDEwXHRpbXBvcnQgUmVjb21tZW5kYXRpb24gZnJvbSAnLi9SZWNvbW1lbmRhdGlvbic7XG4gICAgMTFcdGltcG9ydCB7IG1vdGlvbiB9IGZyb20gJ2ZyYW1lci1tb3Rpb24nO1xuICAgIDEyXHRpbXBvcnQgeyBBY2NvcmRpb24sIEFjY29yZGlvbkNvbnRlbnQsIEFjY29yZGlvbkl0ZW0sIEFjY29yZGlvblRyaWdnZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvYWNjb3JkaW9uJztcbiAgICAxM1x0XG4gICAgMTRcdGNvbnN0IGNvbnZlcnRCb29rRGF0YVRvRm9ybVZhbHVlcyA9IChkYXRhOiBCb29rRGF0YSB8IHVuZGVmaW5lZCk6IEJvb2tGb3JtVmFsdWVzVHlwZSA9PiB7XG4gICAgMTVcdCAgcmV0dXJuIHtcbiAgICAxNlx0ICAgIGlkOiBkYXRhPy5pZCxcbiAgICAxN1x0ICAgIGFycml2YWxUaW1lOiBkYXRhPy5hcnJpdmFsVGltZSB8fCAnJyxcbiAgICAxOFx0ICAgIGFjY2Vzc0luc3RydWN0aW9uczogZGF0YT8uYWNjZXNzSW5zdHJ1Y3Rpb25zIHx8ICcnLFxuICAgIDE5XHQgICAgYXJyaXZhbEFkZGl0aW9uYWxJbmZvOiBkYXRhPy5hcnJpdmFsQWRkaXRpb25hbEluZm8gfHwgJycsXG4gICAgMjBcdCAgICBkZXBhcnR1cmVUaW1lOiBkYXRhPy5kZXBhcnR1cmVUaW1lIHx8ICcnLFxuICAgIDIxXHQgICAgZXhpdEluc3RydWN0aW9uczogZGF0YT8uZXhpdEluc3RydWN0aW9ucyB8fCAnJyxcbiAgICAyMlx0ICAgIGRlcGFydHVyZUFkZGl0aW9uYWxJbmZvOiBkYXRhPy5kZXBhcnR1cmVBZGRpdGlvbmFsSW5mbyB8fCAnJyxcbiAgICAyM1x0ICAgIHdpZmlOYW1lOiBkYXRhPy53aWZpTmFtZSB8fCAnJyxcbiAgICAyNFx0ICAgIHdpZmlQYXNzd29yZDogZGF0YT8ud2lmaVBhc3N3b3JkIHx8ICcnLFxuICAgIDI1XHQgICAgaG91c2VSdWxlczogZGF0YT8uaG91c2VSdWxlcyB8fCAnJyxcbiAgICAyNlx0ICAgIG93bmVyQ29udGFjdDogZGF0YT8ub3duZXJDb250YWN0IHx8ICcnLFxuICAgIDI3XHQgICAgb3duZXJOYW1lOiBkYXRhPy5vd25lck5hbWUgfHwgJycsXG4gICAgMjhcdCAgICBnZW5lcmFsSW5mbzogZGF0YT8uZ2VuZXJhbEluZm8gfHwgJycsXG4gICAgMjlcdCAgICByZWNvbW1lbmRhdGlvbnM6IGRhdGE/LnJlY29tbWVuZGF0aW9ucyB8fCBbXSxcbiAgICAzMFx0ICB9O1xuICAgIDMxXHR9O1xuICAgIDMyXHRcbiAgICAzM1x0Y29uc3QgY29udmVydEZvcm1WYWx1ZXNUb0Jvb2tEYXRhID0gKHZhbHVlczogQm9va0Zvcm1WYWx1ZXNUeXBlKTogQm9va0RhdGEgPT4ge1xuICAgIDM0XHQgIHJldHVybiB7XG4gICAgMzVcdCAgICBpZDogdmFsdWVzLmlkLFxuICAgIDM2XHQgICAgYXJyaXZhbFRpbWU6IHZhbHVlcy5hcnJpdmFsVGltZSxcbiAgICAzN1x0ICAgIGFjY2Vzc0luc3RydWN0aW9uczogdmFsdWVzLmFjY2Vzc0luc3RydWN0aW9ucyxcbiAgICAzOFx0ICAgIGFycml2YWxBZGRpdGlvbmFsSW5mbzogdmFsdWVzLmFycml2YWxBZGRpdGlvbmFsSW5mbyB8fCAnJyxcbiAgICAzOVx0ICAgIGRlcGFydHVyZVRpbWU6IHZhbHVlcy5kZXBhcnR1cmVUaW1lLFxuICAgIDQwXHQgICAgZXhpdEluc3RydWN0aW9uczogdmFsdWVzLmV4aXRJbnN0cnVjdGlvbnMsXG4gICAgNDFcdCAgICBkZXBhcnR1cmVBZGRpdGlvbmFsSW5mbzogdmFsdWVzLmRlcGFydHVyZUFkZGl0aW9uYWxJbmZvIHx8ICcnLFxuICAgIDQyXHQgICAgd2lmaU5hbWU6IHZhbHVlcy53aWZpTmFtZSxcbiAgICA0M1x0ICAgIHdpZmlQYXNzd29yZDogdmFsdWVzLndpZmlQYXNzd29yZCxcbiAgICA0NFx0ICAgIGhvdXNlUnVsZXM6IHZhbHVlcy5ob3VzZVJ1bGVzLFxuICAgIDQ1XHQgICAgb3duZXJDb250YWN0OiB2YWx1ZXMub3duZXJDb250YWN0LFxuICAgIDQ2XHQgICAgb3duZXJOYW1lOiB2YWx1ZXMub3duZXJOYW1lLFxuICAgIDQ3XHQgICAgZ2VuZXJhbEluZm86IHZhbHVlcy5nZW5lcmFsSW5mbyB8fCAnJyxcbiAgICA0OFx0ICAgIHJlY29tbWVuZGF0aW9uczogdmFsdWVzLnJlY29tbWVuZGF0aW9ucyB8fCBbXSxcbiAgICA0OVx0ICB9O1xuICAgIDUwXHR9O1xuICAgIDUxXHRcbiAgICA1Mlx0aW50ZXJmYWNlIEJvb2tFZGl0Rm9ybVByb3BzIHtcbiAgICA1M1x0ICBpbml0aWFsRGF0YT86IEJvb2tEYXRhO1xuICAgIDU0XHQgIG9uU3VibWl0PzogKGRhdGE6IEJvb2tEYXRhKSA9PiB2b2lkO1xuICAgIDU1XHR9XG4gICAgNTZcdFxuICAgIDU3XHRleHBvcnQgZnVuY3Rpb24gQm9va0VkaXRGb3JtKHsgaW5pdGlhbERhdGEsIG9uU3VibWl0IH06IEJvb2tFZGl0Rm9ybVByb3BzKSB7XG4gICAgNThcdCAgY29uc3QgW2lzU2F2aW5nLCBzZXRJc1NhdmluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgNTlcdFxuICAgIDYwXHQgIGNvbnN0IHtcbiAgICA2MVx0ICAgIHJlZ2lzdGVyLFxuICAgIDYyXHQgICAgaGFuZGxlU3VibWl0LFxuICAgIDYzXHQgICAgY29udHJvbCxcbiAgICA2NFx0ICAgIGZvcm1TdGF0ZTogeyBlcnJvcnMgfSxcbiAgICA2NVx0ICB9ID0gdXNlRm9ybTxCb29rRm9ybVZhbHVlc1R5cGU+KHtcbiAgICA2Nlx0ICAgIHJlc29sdmVyOiB6b2RSZXNvbHZlcihCb29rRm9ybVNjaGVtYSkgYXMgYW55LFxuICAgIDY3XHQgICAgZGVmYXVsdFZhbHVlczogY29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzKGluaXRpYWxEYXRhKSxcbiAgICA2OFx0ICB9KTtcbiAgICA2OVx0XG4gICAgNzBcdCAgY29uc3QgeyBmaWVsZHMsIGFwcGVuZCwgcmVtb3ZlIH0gPSB1c2VGaWVsZEFycmF5KHtcbiAgICA3MVx0ICAgIGNvbnRyb2wsXG4gICAgNzJcdCAgICBuYW1lOiBcInJlY29tbWVuZGF0aW9uc1wiLFxuICAgIDczXHQgIH0pO1xuICAgIDc0XHRcbiAgICA3NVx0ICBjb25zdCBoYW5kbGVGb3JtU3VibWl0ID0gKGRhdGE6IEJvb2tGb3JtVmFsdWVzVHlwZSkgPT4ge1xuICAgIDc2XHQgICAgc2V0SXNTYXZpbmcodHJ1ZSk7XG4gICAgNzdcdFxuICAgIDc4XHQgICAgY29uc3QgYm9va0RhdGEgPSBjb252ZXJ0Rm9ybVZhbHVlc1RvQm9va0RhdGEoZGF0YSk7XG4gICAgNzlcdFxuICAgIDgwXHQgICAgaWYgKG9uU3VibWl0KSB7XG4gICAgODFcdCAgICAgIG9uU3VibWl0KGJvb2tEYXRhKTtcbiAgICA4Mlx0ICAgIH1cbiAgICA4M1x0XG4gICAgODRcdCAgICBjb25zb2xlLmxvZygnRG9ubsOpZXMgc291bWlzZXM6JywgYm9va0RhdGEpO1xuICAgIDg1XHRcbiAgICA4Nlx0ICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIDg3XHQgICAgICBzZXRJc1NhdmluZyhmYWxzZSk7XG4gICAgODhcdCAgICB9LCAxMDAwKTtcbiAgICA4OVx0ICB9O1xuICAgIDkwXHRcbiAgICA5MVx0ICBjb25zdCBjb250YWluZXJWYXJpYW50cyA9IHtcbiAgICA5Mlx0ICAgIGhpZGRlbjogeyBvcGFjaXR5OiAwIH0sXG4gICAgOTNcdCAgICB2aXNpYmxlOiB7XG4gICAgOTRcdCAgICAgIG9wYWNpdHk6IDEsXG4gICAgOTVcdCAgICAgIHRyYW5zaXRpb246IHtcbiAgICA5Nlx0ICAgICAgICBzdGFnZ2VyQ2hpbGRyZW46IDAuMlxuICAgIDk3XHQgICAgICB9XG4gICAgOThcdCAgICB9XG4gICAgOTlcdCAgfTtcbiAgIDEwMFx0XG4gICAxMDFcdCAgY29uc3QgaXRlbVZhcmlhbnRzID0ge1xuICAgMTAyXHQgICAgaGlkZGVuOiB7IHk6IDIwLCBvcGFjaXR5OiAwIH0sXG4gICAxMDNcdCAgICB2aXNpYmxlOiB7XG4gICAxMDRcdCAgICAgIHk6IDAsXG4gICAxMDVcdCAgICAgIG9wYWNpdHk6IDEsXG4gICAxMDZcdCAgICAgIHRyYW5zaXRpb246IHtcbiAgIDEwN1x0ICAgICAgICB0eXBlOiAnc3ByaW5nJyxcbiAgIDEwOFx0ICAgICAgICBzdGlmZm5lc3M6IDEwMCxcbiAgIDEwOVx0ICAgICAgICBkYW1waW5nOiAxMlxuICAgMTEwXHQgICAgICB9XG4gICAxMTFcdCAgICB9XG4gICAxMTJcdCAgfTtcbiAgIDExM1x0XG4gICAxMTRcdCAgcmV0dXJuIChcbiAgIDExNVx0ICAgIDxtb3Rpb24uZm9ybVxuICAgMTE2XHQgICAgICBpbml0aWFsPVwiaGlkZGVuXCJcbiAgIDExN1x0ICAgICAgYW5pbWF0ZT1cInZpc2libGVcIlxuICAgMTE4XHQgICAgICB2YXJpYW50cz17Y29udGFpbmVyVmFyaWFudHN9XG4gICAxMTlcdCAgICAgIG9uU3VibWl0PXtoYW5kbGVTdWJtaXQoaGFuZGxlRm9ybVN1Ym1pdCBhcyBhbnkpfVxuICAgMTIwXHQgICAgICBjbGFzc05hbWU9XCJzcGFjZS15LTggcm91bmRlZC14bCBiZy1ncmFkaWVudC10by1iciBmcm9tLW9yYW5nZS01MCB0by1hbWJlci01MCBwLTggc2hhZG93LWxnIGJvcmRlciBib3JkZXItYW1iZXItMTAwXCJcbiAgIDEyMVx0ICAgID5cbiAgIDEyMlx0ICAgICAgPEFjY29yZGlvbiB0eXBlPVwic2luZ2xlXCIgY29sbGFwc2libGUgIGNsYXNzTmFtZT1cInctZnVsbCBzcGFjZS15LTRcIj5cbiAgIDEyM1x0ICAgICAgPEFjY29yZGlvbkl0ZW0gdmFsdWU9XCJhcnJpdmFsXCIgY2xhc3NOYW1lPVwiYm9yZGVyLW5vbmVcIiA+XG4gICAxMjRcdCAgICAgICAgPG1vdGlvbi5kaXZcbiAgIDEyNVx0ICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAxMjZcdCAgICAgICAgICBjbGFzc05hbWU9XCJiZy13aGl0ZS84MCByb3VuZGVkLWxnIHNoYWRvdy1zbSBib3JkZXItbC00IGJvcmRlci1bI2YwNGMyM10gb3ZlcmZsb3ctaGlkZGVuXCJcbiAgIDEyN1x0ICAgICAgICA+XG4gICAxMjhcdCAgICAgICAgICA8QWNjb3JkaW9uVHJpZ2dlciBjbGFzc05hbWU9XCJweC02IHB5LTQgaG92ZXI6bm8tdW5kZXJsaW5lIGhvdmVyOmJnLW9yYW5nZS01MC81MCB0cmFuc2l0aW9uLWFsbFwiPlxuICAgMTI5XHQgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtc2VtaWJvbGQgdGV4dC1bI2YwNGMyM10gZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgIDEzMFx0ICAgICAgICAgICAgICA8UGxhbmUgY2xhc3NOYW1lPVwiaC01IHctNVwiIC8+IEFycml2w6llXG4gICAxMzFcdCAgICAgICAgICAgIDwvc3Bhbj5cbiAgIDEzMlx0ICAgICAgICAgIDwvQWNjb3JkaW9uVHJpZ2dlcj5cbiAgIDEzM1x0ICAgICAgICAgIDxBY2NvcmRpb25Db250ZW50IGNsYXNzTmFtZT1cInB4LTYgc3BhY2UteS00XCI+XG4gICAxMzRcdFxuICAgMTM1XHQgICAgICAgIDxJbnB1dEZvcm1cbiAgIDEzNlx0ICAgICAgICAgIGxhYmVsPVwiSGV1cmUgZCdhcnJpdsOpZVwiXG4gICAxMzdcdCAgICAgICAgICBuYW1lPVwiYXJyaXZhbFRpbWVcIlxuICAgMTM4XHQgICAgICAgICAgcGxhY2Vob2xkZXI9XCJFeDogMTU6MDBcIlxuICAgMTM5XHQgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgMTQwXHQgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAxNDFcdCAgICAgICAgLz5cbiAgIDE0Mlx0XG4gICAxNDNcdCAgICAgICAgPElucHV0Rm9ybVxuICAgMTQ0XHQgICAgICAgICAgbGFiZWw9XCJJbnN0cnVjdGlvbnMgZCdhY2PDqHNcIlxuICAgMTQ1XHQgICAgICAgICAgbmFtZT1cImFjY2Vzc0luc3RydWN0aW9uc1wiXG4gICAxNDZcdCAgICAgICAgICBwbGFjZWhvbGRlcj1cIkNvbW1lbnQgYWNjw6lkZXIgYXUgbG9nZW1lbnRcIlxuICAgMTQ3XHQgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgMTQ4XHQgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAxNDlcdCAgICAgICAgLz5cbiAgIDE1MFx0XG4gICAxNTFcdCAgICAgICAgPElucHV0Rm9ybVxuICAgMTUyXHQgICAgICAgICAgbGFiZWw9XCJJbmZvcm1hdGlvbnMgc3VwcGzDqW1lbnRhaXJlc1wiXG4gICAxNTNcdCAgICAgICAgICBuYW1lPVwiYXJyaXZhbEFkZGl0aW9uYWxJbmZvXCJcbiAgIDE1NFx0ICAgICAgICAgIHBsYWNlaG9sZGVyPVwiQXV0cmVzIGluZm9ybWF0aW9ucyB1dGlsZXMgcG91ciBsJ2Fycml2w6llXCJcbiAgIDE1NVx0ICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgIDE1Nlx0ICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgMTU3XHQgICAgICAgIC8+XG4gICAxNThcdCAgICAgICAgICA8L0FjY29yZGlvbkNvbnRlbnQ+XG4gICAxNTlcdCAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMTYwXHQgICAgICA8L0FjY29yZGlvbkl0ZW0+XG4gICAxNjFcdFxuICAgMTYyXHQgICAgICA8QWNjb3JkaW9uSXRlbSB2YWx1ZT1cImRlcGFydHVyZVwiIGNsYXNzTmFtZT1cImJvcmRlci1ub25lXCI+XG4gICAxNjNcdCAgICAgICAgPG1vdGlvbi5kaXZcbiAgIDE2NFx0ICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAxNjVcdCAgICAgICAgICBjbGFzc05hbWU9XCJiZy13aGl0ZS84MCByb3VuZGVkLWxnIHNoYWRvdy1zbSBib3JkZXItbC00IGJvcmRlci1waW5rLTQwMCBvdmVyZmxvdy1oaWRkZW5cIlxuICAgMTY2XHQgICAgICAgID5cbiAgIDE2N1x0ICAgICAgICAgIDxBY2NvcmRpb25UcmlnZ2VyIGNsYXNzTmFtZT1cInB4LTYgcHktNCBob3Zlcjpuby11bmRlcmxpbmUgaG92ZXI6YmctcGluay01MC81MCB0cmFuc2l0aW9uLWFsbFwiPlxuICAgMTY4XHQgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtc2VtaWJvbGQgdGV4dC1waW5rLTUwMCBmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgMTY5XHQgICAgICAgICAgICAgIDxQbGFuZSBjbGFzc05hbWU9XCJoLTUgdy01IHJvdGF0ZS0xODBcIiAvPiBEw6lwYXJ0XG4gICAxNzBcdCAgICAgICAgICAgIDwvc3Bhbj5cbiAgIDE3MVx0ICAgICAgICAgIDwvQWNjb3JkaW9uVHJpZ2dlcj5cbiAgIDE3Mlx0ICAgICAgICAgIDxBY2NvcmRpb25Db250ZW50IGNsYXNzTmFtZT1cInB4LTYgc3BhY2UteS00XCI+XG4gICAxNzNcdFxuICAgMTc0XHQgICAgICAgIDxJbnB1dEZvcm1cbiAgIDE3NVx0ICAgICAgICAgIGxhYmVsPVwiSGV1cmUgZGUgZMOpcGFydFwiXG4gICAxNzZcdCAgICAgICAgICBuYW1lPVwiZGVwYXJ0dXJlVGltZVwiXG4gICAxNzdcdCAgICAgICAgICBwbGFjZWhvbGRlcj1cIkV4OiAxMTowMFwiXG4gICAxNzhcdCAgICAgICAgICByZWdpc3Rlcj17cmVnaXN0ZXJ9XG4gICAxNzlcdCAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgIDE4MFx0ICAgICAgICAvPlxuICAgMTgxXHRcbiAgIDE4Mlx0ICAgICAgICA8SW5wdXRGb3JtXG4gICAxODNcdCAgICAgICAgICBsYWJlbD1cIkluc3RydWN0aW9ucyBkZSBzb3J0aWVcIlxuICAgMTg0XHQgICAgICAgICAgbmFtZT1cImV4aXRJbnN0cnVjdGlvbnNcIlxuICAgMTg1XHQgICAgICAgICAgcGxhY2Vob2xkZXI9XCJDb21tZW50IHF1aXR0ZXIgbGUgbG9nZW1lbnRcIlxuICAgMTg2XHQgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgMTg3XHQgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAxODhcdCAgICAgICAgLz5cbiAgIDE4OVx0XG4gICAxOTBcdCAgICAgICAgPElucHV0Rm9ybVxuICAgMTkxXHQgICAgICAgICAgbGFiZWw9XCJJbmZvcm1hdGlvbnMgc3VwcGzDqW1lbnRhaXJlc1wiXG4gICAxOTJcdCAgICAgICAgICBuYW1lPVwiZGVwYXJ0dXJlQWRkaXRpb25hbEluZm9cIlxuICAgMTkzXHQgICAgICAgICAgcGxhY2Vob2xkZXI9XCJBdXRyZXMgaW5mb3JtYXRpb25zIHV0aWxlcyBwb3VyIGxlIGTDqXBhcnRcIlxuICAgMTk0XHQgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgMTk1XHQgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAxOTZcdCAgICAgICAgLz5cbiAgIDE5N1x0ICAgICAgICAgIDwvQWNjb3JkaW9uQ29udGVudD5cbiAgIDE5OFx0ICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAxOTlcdCAgICAgIDwvQWNjb3JkaW9uSXRlbT5cbiAgIDIwMFx0XG4gICAyMDFcdCAgICAgIDxBY2NvcmRpb25JdGVtIHZhbHVlPVwiYWNjb21tb2RhdGlvblwiIGNsYXNzTmFtZT1cImJvcmRlci1ub25lXCI+XG4gICAyMDJcdCAgICAgICAgPG1vdGlvbi5kaXZcbiAgIDIwM1x0ICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAyMDRcdCAgICAgICAgICBjbGFzc05hbWU9XCJiZy13aGl0ZS84MCByb3VuZGVkLWxnIHNoYWRvdy1zbSBib3JkZXItbC00IGJvcmRlci1hbWJlci00MDAgb3ZlcmZsb3ctaGlkZGVuXCJcbiAgIDIwNVx0ICAgICAgICA+XG4gICAyMDZcdCAgICAgICAgICA8QWNjb3JkaW9uVHJpZ2dlciBjbGFzc05hbWU9XCJweC02IHB5LTQgaG92ZXI6bm8tdW5kZXJsaW5lIGhvdmVyOmJnLWFtYmVyLTUwLzUwIHRyYW5zaXRpb24tYWxsXCI+XG4gICAyMDdcdCAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQteGwgZm9udC1zZW1pYm9sZCB0ZXh0LWFtYmVyLTUwMCBmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgMjA4XHQgICAgICAgICAgICAgIDxIb21lIGNsYXNzTmFtZT1cImgtNSB3LTVcIiAvPiBIw6liZXJnZW1lbnRcbiAgIDIwOVx0ICAgICAgICAgICAgPC9zcGFuPlxuICAgMjEwXHQgICAgICAgICAgPC9BY2NvcmRpb25UcmlnZ2VyPlxuICAgMjExXHQgICAgICAgICAgPEFjY29yZGlvbkNvbnRlbnQgY2xhc3NOYW1lPVwicHgtNiBzcGFjZS15LTRcIj5cbiAgIDIxMlx0XG4gICAyMTNcdCAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncmlkIGdyaWQtY29scy0yIGdhcC00XCI+XG4gICAyMTRcdCAgICAgICAgICA8SW5wdXRGb3JtXG4gICAyMTVcdCAgICAgICAgICAgIGxhYmVsPVwiTm9tIGR1IHLDqXNlYXUgV2lmaVwiXG4gICAyMTZcdCAgICAgICAgICAgIG5hbWU9XCJ3aWZpTmFtZVwiXG4gICAyMTdcdCAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiTm9tIGR1IHLDqXNlYXUgV2lmaVwiXG4gICAyMThcdCAgICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgIDIxOVx0ICAgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAyMjBcdCAgICAgICAgICAvPlxuICAgMjIxXHRcbiAgIDIyMlx0ICAgICAgICAgIDxJbnB1dEZvcm1cbiAgIDIyM1x0ICAgICAgICAgICAgbGFiZWw9XCJNb3QgZGUgcGFzc2UgV2lmaVwiXG4gICAyMjRcdCAgICAgICAgICAgIG5hbWU9XCJ3aWZpUGFzc3dvcmRcIlxuICAgMjI1XHQgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIk1vdCBkZSBwYXNzZSBXaWZpXCJcbiAgIDIyNlx0ICAgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgMjI3XHQgICAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgIDIyOFx0ICAgICAgICAgIC8+XG4gICAyMjlcdCAgICAgICAgPC9kaXY+XG4gICAyMzBcdFxuICAgMjMxXHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS0yXCI+XG4gICAyMzJcdCAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImhvdXNlUnVsZXNcIiBjbGFzc05hbWU9XCJ0ZXh0LXNtIGZvbnQtbWVkaXVtXCI+XG4gICAyMzNcdCAgICAgICAgICAgIFLDqGdsZXMgZGUgbGEgbWFpc29uXG4gICAyMzRcdCAgICAgICAgICA8L2xhYmVsPlxuICAgMjM1XHQgICAgICAgICAgPHRleHRhcmVhXG4gICAyMzZcdCAgICAgICAgICAgIGlkPVwiaG91c2VSdWxlc1wiXG4gICAyMzdcdCAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRW50cmV6IGNoYXF1ZSByw6hnbGUgc3VyIHVuZSBub3V2ZWxsZSBsaWduZVwiXG4gICAyMzhcdCAgICAgICAgICAgIHsuLi5yZWdpc3RlcignaG91c2VSdWxlcycpfVxuICAgMjM5XHQgICAgICAgICAgICBjbGFzc05hbWU9e2B3LWZ1bGwgbWluLWgtWzEwMHB4XSByb3VuZGVkLW1kIGJvcmRlciAke2Vycm9ycy5ob3VzZVJ1bGVzID8gJ2JvcmRlci1kZXN0cnVjdGl2ZScgOiAnYm9yZGVyLWlucHV0J30gYmctdHJhbnNwYXJlbnQgcHgtMyBweS0yIHRleHQtc20gc2hhZG93LXNtYH1cbiAgIDI0MFx0ICAgICAgICAgIC8+XG4gICAyNDFcdCAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXhzIHRleHQtbXV0ZWQtZm9yZWdyb3VuZFwiPkVudHJleiBjaGFxdWUgcsOoZ2xlIHN1ciB1bmUgbm91dmVsbGUgbGlnbmU8L3A+XG4gICAyNDJcdCAgICAgICAgICB7ZXJyb3JzLmhvdXNlUnVsZXMgJiYgKFxuICAgMjQzXHQgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIHRleHQtZGVzdHJ1Y3RpdmVcIj57ZXJyb3JzLmhvdXNlUnVsZXMubWVzc2FnZT8udG9TdHJpbmcoKX08L3A+XG4gICAyNDRcdCAgICAgICAgICApfVxuICAgMjQ1XHQgICAgICAgIDwvZGl2PlxuICAgMjQ2XHRcbiAgIDI0N1x0ICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyaWQgZ3JpZC1jb2xzLTIgZ2FwLTRcIj5cbiAgIDI0OFx0ICAgICAgICAgIDxJbnB1dEZvcm1cbiAgIDI0OVx0ICAgICAgICAgICAgbGFiZWw9XCJOb20gZHUgcHJvcHJpw6l0YWlyZVwiXG4gICAyNTBcdCAgICAgICAgICAgIG5hbWU9XCJvd25lck5hbWVcIlxuICAgMjUxXHQgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlZvdHJlIG5vbVwiXG4gICAyNTJcdCAgICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgIDI1M1x0ICAgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAyNTRcdCAgICAgICAgICAvPlxuICAgMjU1XHRcbiAgIDI1Nlx0ICAgICAgICAgIDxJbnB1dEZvcm1cbiAgIDI1N1x0ICAgICAgICAgICAgbGFiZWw9XCJDb250YWN0IGR1IHByb3ByacOpdGFpcmVcIlxuICAgMjU4XHQgICAgICAgICAgICBuYW1lPVwib3duZXJDb250YWN0XCJcbiAgIDI1OVx0ICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJWb3RyZSBudW3DqXJvIGRlIHTDqWzDqXBob25lXCJcbiAgIDI2MFx0ICAgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgMjYxXHQgICAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgIDI2Mlx0ICAgICAgICAgIC8+XG4gICAyNjNcdCAgICAgICAgPC9kaXY+XG4gICAyNjRcdFxuICAgMjY1XHQgICAgICAgIDxJbnB1dEZvcm1cbiAgIDI2Nlx0ICAgICAgICAgIGxhYmVsPVwiSW5mb3JtYXRpb25zIGfDqW7DqXJhbGVzXCJcbiAgIDI2N1x0ICAgICAgICAgIG5hbWU9XCJnZW5lcmFsSW5mb1wiXG4gICAyNjhcdCAgICAgICAgICBwbGFjZWhvbGRlcj1cIkF1dHJlcyBpbmZvcm1hdGlvbnMgdXRpbGVzIHN1ciBsZSBsb2dlbWVudFwiXG4gICAyNjlcdCAgICAgICAgICByZWdpc3Rlcj17cmVnaXN0ZXJ9XG4gICAyNzBcdCAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgIDI3MVx0ICAgICAgICAvPlxuICAgMjcyXHQgICAgICAgICAgPC9BY2NvcmRpb25Db250ZW50PlxuICAgMjczXHQgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDI3NFx0ICAgICAgPC9BY2NvcmRpb25JdGVtPlxuICAgMjc1XHRcbiAgIDI3Nlx0ICAgICAgPEFjY29yZGlvbkl0ZW0gdmFsdWU9XCJyZWNvbW1lbmRhdGlvbnNcIiBjbGFzc05hbWU9XCJib3JkZXItbm9uZVwiPlxuICAgMjc3XHQgICAgICAgIDxtb3Rpb24uZGl2XG4gICAyNzhcdCAgICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxuICAgMjc5XHQgICAgICAgICAgY2xhc3NOYW1lPVwiYmctd2hpdGUvODAgcm91bmRlZC1sZyBzaGFkb3ctc20gYm9yZGVyLWwtNCBib3JkZXItdGVhbC00MDAgb3ZlcmZsb3ctaGlkZGVuXCJcbiAgIDI4MFx0ICAgICAgICA+XG4gICAyODFcdCAgICAgICAgICA8QWNjb3JkaW9uVHJpZ2dlciBjbGFzc05hbWU9XCJweC02IHB5LTQgaG92ZXI6bm8tdW5kZXJsaW5lIGhvdmVyOmJnLXRlYWwtNTAvNTAgdHJhbnNpdGlvbi1hbGxcIj5cbiAgIDI4Mlx0ICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC14bCBmb250LXNlbWlib2xkIHRleHQtdGVhbC02MDAgZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgIDI4M1x0ICAgICAgICAgICAgICA8TWFwUGluIGNsYXNzTmFtZT1cImgtNSB3LTVcIiAvPiBSZWNvbW1hbmRhdGlvbnNcbiAgIDI4NFx0ICAgICAgICAgICAgPC9zcGFuPlxuICAgMjg1XHQgICAgICAgICAgPC9BY2NvcmRpb25UcmlnZ2VyPlxuICAgMjg2XHQgICAgICAgICAgPEFjY29yZGlvbkNvbnRlbnQgY2xhc3NOYW1lPVwicHgtNiBzcGFjZS15LTRcIj5cbiAgIDI4N1x0ICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LXRlYWwtNzAwLzcwXCI+QWpvdXRleiBkZXMgcmVjb21tYW5kYXRpb25zIHBvdXIgdm9zIGludml0w6lzIChyZXN0YXVyYW50cywgYWN0aXZpdMOpcywgYmFycywgZXRjLik8L3A+XG4gICAyODhcdFxuICAgMjg5XHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS00XCI+XG4gICAyOTBcdCAgICAgICAgICB7ZmllbGRzLm1hcCgoZmllbGQsIGluZGV4KSA9PiAoXG4gICAyOTFcdCAgICAgICAgICAgIDxSZWNvbW1lbmRhdGlvblxuICAgMjkyXHQgICAgICAgICAgICAgIGtleT17ZmllbGQuaWR9XG4gICAyOTNcdCAgICAgICAgICAgICAgZmllbGQ9e2ZpZWxkfVxuICAgMjk0XHQgICAgICAgICAgICAgIGluZGV4PXtpbmRleH1cbiAgIDI5NVx0ICAgICAgICAgICAgICByZWdpc3Rlcj17cmVnaXN0ZXJ9XG4gICAyOTZcdCAgICAgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAyOTdcdCAgICAgICAgICAgICAgcmVtb3ZlPXtyZW1vdmV9XG4gICAyOThcdCAgICAgICAgICAgIC8+XG4gICAyOTlcdCAgICAgICAgICApKX1cbiAgIDMwMFx0XG4gICAzMDFcdCAgICAgICAgICA8bW90aW9uLmJ1dHRvblxuICAgMzAyXHQgICAgICAgICAgICB3aGlsZUhvdmVyPXt7IHNjYWxlOiAxLjAyIH19XG4gICAzMDNcdCAgICAgICAgICAgIHdoaWxlVGFwPXt7IHNjYWxlOiAwLjk4IH19XG4gICAzMDRcdCAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgMzA1XHQgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBhcHBlbmQoeyBuYW1lOiAnJywgdHlwZTogJycgYXMgYW55LCBhZGRyZXNzOiAnJywgZGVzY3JpcHRpb246ICcnIH0pfVxuICAgMzA2XHQgICAgICAgICAgICBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciB3LWZ1bGwgcHktMyBweC00IGJvcmRlciBib3JkZXItZGFzaGVkIHJvdW5kZWQtbWQgYmctZ3JhZGllbnQtdG8tciBmcm9tLXRlYWwtNDAwIHRvLXRlYWwtMzAwIHRleHQtd2hpdGUgaG92ZXI6ZnJvbS10ZWFsLTUwMCBob3Zlcjp0by10ZWFsLTQwMCB0cmFuc2l0aW9uLWFsbCBzaGFkb3ctc20gY3Vyc29yLXBvaW50ZXJcIlxuICAgMzA3XHQgICAgICAgICAgPlxuICAgMzA4XHQgICAgICAgICAgICA8UGx1c0NpcmNsZSBzaXplPXsxOH0gY2xhc3NOYW1lPVwibXItMlwiIC8+XG4gICAzMDlcdCAgICAgICAgICAgIEFqb3V0ZXIgdW5lIHJlY29tbWFuZGF0aW9uXG4gICAzMTBcdCAgICAgICAgICA8L21vdGlvbi5idXR0b24+XG4gICAzMTFcdCAgICAgICAgPC9kaXY+XG4gICAzMTJcdCAgICAgICAgICA8L0FjY29yZGlvbkNvbnRlbnQ+XG4gICAzMTNcdCAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMzE0XHQgICAgICA8L0FjY29yZGlvbkl0ZW0+XG4gICAzMTVcdCAgICAgIDwvQWNjb3JkaW9uPlxuICAgMzE2XHRcbiAgIDMxN1x0ICAgICAgPG1vdGlvbi5kaXZcbiAgIDMxOFx0ICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxuICAgMzE5XHQgICAgICAgIGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1lbmQgbXQtOFwiXG4gICAzMjBcdCAgICAgID5cbiAgIDMyMVx0ICAgICAgICA8bW90aW9uLmJ1dHRvblxuICAgMzIyXHQgICAgICAgICAgd2hpbGVIb3Zlcj17eyBzY2FsZTogMS4wNSB9fVxuICAgMzIzXHQgICAgICAgICAgd2hpbGVUYXA9e3sgc2NhbGU6IDAuOTUgfX1cbiAgIDMyNFx0ICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgMzI1XHQgICAgICAgICAgZGlzYWJsZWQ9e2lzU2F2aW5nfVxuICAgMzI2XHQgICAgICAgICAgY2xhc3NOYW1lPVwicHgtNiBweS0zIGJnLWdyYWRpZW50LXRvLXIgZnJvbS1bI2YwNGMyM10gdG8tcGluay01MDAgdGV4dC13aGl0ZSByb3VuZGVkLW1kIGhvdmVyOmZyb20tWyNmMDRjMjNdIGhvdmVyOnRvLXBpbmstNDAwIHRyYW5zaXRpb24tYWxsIHNoYWRvdy1tZCBkaXNhYmxlZDpvcGFjaXR5LTUwIGZvbnQtbWVkaXVtXCJcbiAgIDMyN1x0ICAgICAgICA+XG4gICAzMjhcdCAgICAgICAgICB7aXNTYXZpbmcgPyAnQ3LDqWF0aW9uIGVuIGNvdXJzLi4uJyA6ICdDcsOpZXIgbW9uIGxpdnJldCd9XG4gICAzMjlcdCAgICAgICAgPC9tb3Rpb24uYnV0dG9uPlxuICAgMzMwXHQgICAgICA8L21vdGlvbi5kaXY+XG4gICAzMzFcdCAgICA8L21vdGlvbi5mb3JtPlxuICAgMzMyXHQgICk7XG4gICAzMzNcdH1cbiAgIDMzNFx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAzMzRcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImMwZmI2NGY2LWZhM2UtNGIyZC04NDM4LTY0OTg0OGY2Y2I3MDt0b29sdV8wMVNUSmZicTR5cGFLWWdlb1VWNzd3SGciOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeDpcbiAgICAgMVx0J3VzZSBjbGllbnQnO1xuICAgICAyXHRcbiAgICAgM1x0aW1wb3J0IHsgQm9va0VkaXRGb3JtIH0gZnJvbSAnQC9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybSc7XG4gICAgIDRcdGltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG4gICAgIDVcdGltcG9ydCB7IEJvb2tEYXRhIH0gZnJvbSAnQC90eXBlcy9Cb29rRGF0YSc7XG4gICAgIDZcdGltcG9ydCB7IG1vdGlvbiB9IGZyb20gJ2ZyYW1lci1tb3Rpb24nO1xuICAgICA3XHRpbXBvcnQgeyBQYWxtdHJlZSwgQm9vaywgU3VuIH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcbiAgICAgOFx0aW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9uYXZpZ2F0aW9uJztcbiAgICAgOVx0aW1wb3J0IHtQYXNzd29yZERpc3BsYXl9IGZyb20gXCIuLi8uLi8uLi9jb21wb25lbnRzL1Bhc3N3b3JkRGlzcGxheVwiO1xuICAgIDEwXHRcbiAgICAxMVx0ZnVuY3Rpb24gRWRpdEZvcm1Cb29rKCkge1xuICAgIDEyXHQgIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xuICAgIDEzXHQgIGNvbnN0IFtib29rRGF0YSwgc2V0Qm9va0RhdGFdID0gdXNlU3RhdGU8Qm9va0RhdGEgfCBudWxsPihudWxsKTtcbiAgICAxNFx0ICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSk7XG4gICAgMTVcdFxuICAgIDE2XHQgIGNvbnN0IGNvbnRhaW5lclZhcmlhbnRzID0ge1xuICAgIDE3XHQgICAgaGlkZGVuOiB7IG9wYWNpdHk6IDAgfSxcbiAgICAxOFx0ICAgIHZpc2libGU6IHtcbiAgICAxOVx0ICAgICAgb3BhY2l0eTogMSxcbiAgICAyMFx0ICAgICAgdHJhbnNpdGlvbjoge1xuICAgIDIxXHQgICAgICAgIHN0YWdnZXJDaGlsZHJlbjogMC4yXG4gICAgMjJcdCAgICAgIH1cbiAgICAyM1x0ICAgIH1cbiAgICAyNFx0ICB9O1xuICAgIDI1XHRcbiAgICAyNlx0ICBjb25zdCBpdGVtVmFyaWFudHMgPSB7XG4gICAgMjdcdCAgICBoaWRkZW46IHsgeTogMjAsIG9wYWNpdHk6IDAgfSxcbiAgICAyOFx0ICAgIHZpc2libGU6IHtcbiAgICAyOVx0ICAgICAgeTogMCxcbiAgICAzMFx0ICAgICAgb3BhY2l0eTogMSxcbiAgICAzMVx0ICAgICAgdHJhbnNpdGlvbjoge1xuICAgIDMyXHQgICAgICAgIHR5cGU6ICdzcHJpbmcnLFxuICAgIDMzXHQgICAgICAgIHN0aWZmbmVzczogMTAwLFxuICAgIDM0XHQgICAgICAgIGRhbXBpbmc6IDEyXG4gICAgMzVcdCAgICAgIH1cbiAgICAzNlx0ICAgIH1cbiAgICAzN1x0ICB9O1xuICAgIDM4XHRcbiAgICAzOVx0ICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIDQwXHQgICAgY29uc3Qgc3RvcmVkRGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdib29rRGF0YScpO1xuICAgIDQxXHQgICAgaWYgKHN0b3JlZERhdGEpIHtcbiAgICA0Mlx0ICAgICAgdHJ5IHtcbiAgICA0M1x0ICAgICAgICBjb25zdCBwYXJzZWREYXRhID0gSlNPTi5wYXJzZShzdG9yZWREYXRhKTtcbiAgICA0NFx0ICAgICAgICBzZXRCb29rRGF0YShwYXJzZWREYXRhKTtcbiAgICA0NVx0ICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICA0Nlx0ICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJldXIgbG9ycyBkZSBsYSByw6ljdXDDqXJhdGlvbiBkZXMgZG9ubsOpZXM6JywgZXJyb3IpO1xuICAgIDQ3XHQgICAgICB9XG4gICAgNDhcdCAgICB9XG4gICAgNDlcdCAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgIDUwXHQgIH0sIFtdKTtcbiAgICA1MVx0XG4gICAgNTJcdCAgcmV0dXJuIChcbiAgICA1M1x0ICAgIDxtb3Rpb24uc2VjdGlvblxuICAgIDU0XHQgICAgICBpbml0aWFsPVwiaGlkZGVuXCJcbiAgICA1NVx0ICAgICAgYW5pbWF0ZT1cInZpc2libGVcIlxuICAgIDU2XHQgICAgICB2YXJpYW50cz17Y29udGFpbmVyVmFyaWFudHN9XG4gICAgNTdcdCAgICAgIGNsYXNzTmFtZT1cIm1pbi1oLXNjcmVlbiB3LWZ1bGwgYmctZ3JhZGllbnQtdG8tYiBmcm9tLW9yYW5nZS01MCB0by1hbWJlci0xMDAgcHktMTJcIlxuICAgIDU4XHQgICAgPlxuICAgIDU5XHQgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lciBteC1hdXRvIHB4LTRcIj5cbiAgICA2MFx0ICAgICAgICA8bW90aW9uLmRpdlxuICAgIDYxXHQgICAgICAgICAgdmFyaWFudHM9e2l0ZW1WYXJpYW50c31cbiAgICA2Mlx0ICAgICAgICAgIGNsYXNzTmFtZT1cInctZnVsbCBtYXgtdy00eGwgbXgtYXV0byBwLTggc3BhY2UteS04IGJnLWdyYWRpZW50LXRvLWIgZnJvbS13aGl0ZSB0by1hbWJlci01MCByb3VuZGVkLXhsIHNoYWRvdy1sZyBib3JkZXIgYm9yZGVyLWFtYmVyLTEwMFwiXG4gICAgNjNcdCAgICAgICAgPlxuICAgIDY0XHQgICAgICAgICAgPG1vdGlvbi5kaXZcbiAgICA2NVx0ICAgICAgICAgICAgdmFyaWFudHM9e2l0ZW1WYXJpYW50c31cbiAgICA2Nlx0ICAgICAgICAgICAgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXIgc3BhY2UteS0yXCJcbiAgICA2N1x0ICAgICAgICAgID5cbiAgICA2OFx0ICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBnYXAtMyBtYi00XCI+XG4gICAgNjlcdCAgICAgICAgICAgICAgPFBhbG10cmVlIGNsYXNzTmFtZT1cImgtOCB3LTggdGV4dC1bI2YwNGMyM11cIiAvPlxuICAgIDcwXHQgICAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJ0ZXh0LTN4bCBmb250LWJvbGQgYmctZ3JhZGllbnQtdG8tciBmcm9tLVsjZjA0YzIzXSB0by1waW5rLTUwMCBiZy1jbGlwLXRleHQgdGV4dC10cmFuc3BhcmVudFwiPlxuICAgIDcxXHQgICAgICAgICAgICAgICAgVm90cmUgTGl2cmV0IGQnQWNjdWVpbFxuICAgIDcyXHQgICAgICAgICAgICAgIDwvaDI+XG4gICAgNzNcdCAgICAgICAgICAgICAgPFN1biBjbGFzc05hbWU9XCJoLTggdy04IHRleHQtYW1iZXItNDAwXCIgLz5cbiAgICA3NFx0ICAgICAgICAgICAgPC9kaXY+XG4gICAgNzVcdCAgICAgICAgICAgIDxtb3Rpb24ucFxuICAgIDc2XHQgICAgICAgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAgNzdcdCAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXIgdGV4dC1sZyB0ZXh0LWdyYXktNzAwXCJcbiAgICA3OFx0ICAgICAgICAgICAgPlxuICAgIDc5XHQgICAgICAgICAgICAgIFZvaWNpIGNlIHF1ZSBub3VzIGF2b25zIHB1IGfDqW7DqXJlciBwb3VyIHZvdHJlIGxpdnJldC5cbiAgICA4MFx0ICAgICAgICAgICAgPC9tb3Rpb24ucD5cbiAgICA4MVx0ICAgICAgICAgICAgPG1vdGlvbi5wXG4gICAgODJcdCAgICAgICAgICAgICAgdmFyaWFudHM9e2l0ZW1WYXJpYW50c31cbiAgICA4M1x0ICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlciB0ZXh0LWdyYXktNjAwXCJcbiAgICA4NFx0ICAgICAgICAgICAgPlxuICAgIDg1XHQgICAgICAgICAgICAgIE4naMOpc2l0ZXogcGFzIMOgIHJlbGlyZSBsZXMgaW5mb3JtYXRpb25zLCBldCDDoCBsZXMgbW9kaWZpZXIgc2kgbsOpY2Vzc2FpcmUuXG4gICAgODZcdCAgICAgICAgICAgIDwvbW90aW9uLnA+XG4gICAgODdcdCAgICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAgODhcdFxuICAgIDg5XHQgICAgICAgICAge2lzTG9hZGluZyA/IChcbiAgICA5MFx0ICAgICAgICAgICAgPG1vdGlvbi5kaXZcbiAgICA5MVx0ICAgICAgICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxuICAgIDkyXHQgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRleHQtY2VudGVyIHB5LTEyIGZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHNwYWNlLXktNFwiXG4gICAgOTNcdCAgICAgICAgICAgID5cbiAgICA5NFx0ICAgICAgICAgICAgICA8Qm9vayBjbGFzc05hbWU9XCJoLTEyIHctMTIgdGV4dC1hbWJlci00MDAgYW5pbWF0ZS1wdWxzZVwiIC8+XG4gICAgOTVcdCAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1sZyB0ZXh0LWdyYXktNjAwXCI+Q2hhcmdlbWVudCBkZSB2b3RyZSBsaXZyZXQuLi48L3A+XG4gICAgOTZcdCAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LTY0IGgtMiBiZy1ncmF5LTIwMCByb3VuZGVkLWZ1bGwgb3ZlcmZsb3ctaGlkZGVuXCI+XG4gICAgOTdcdCAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImgtZnVsbCBiZy1ncmFkaWVudC10by1yIGZyb20tWyNmMDRjMjNdIHRvLXBpbmstNTAwIGFuaW1hdGUtW2xvYWRpbmdfMS41c19lYXNlLWluLW91dF9pbmZpbml0ZV1cIiBzdHlsZT17eyB3aWR0aDogJzcwJScgfX0+PC9kaXY+XG4gICAgOThcdCAgICAgICAgICAgICAgPC9kaXY+XG4gICAgOTlcdCAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDEwMFx0ICAgICAgICAgICkgOiAoXG4gICAxMDFcdCAgICAgICAgICAgIDxtb3Rpb24uZGl2IHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9IGNsYXNzTmFtZT1cInNwYWNlLXktOFwiPlxuICAgMTAyXHQgICAgICAgICAgICAgIHsvKiBBZmZpY2hhZ2UgZHUgbW90IGRlIHBhc3NlICovfVxuICAgMTAzXHQgICAgICAgICAgICAgIHtib29rRGF0YT8uYWNjZXNzUGFzc3dvcmQgJiYgYm9va0RhdGE/LmlkICYmIChcbiAgIDEwNFx0ICAgICAgICAgICAgICAgIDxtb3Rpb24uZGl2IHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9PlxuICAgMTA1XHQgICAgICAgICAgICAgICAgICA8UGFzc3dvcmREaXNwbGF5IHBhc3N3b3JkPXtib29rRGF0YS5hY2Nlc3NQYXNzd29yZH0gYm9va0lkPXtib29rRGF0YS5pZH0gLz5cbiAgIDEwNlx0ICAgICAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDEwN1x0ICAgICAgICAgICAgICApfVxuICAgMTA4XHRcbiAgIDEwOVx0ICAgICAgICAgICAgICA8Qm9va0VkaXRGb3JtXG4gICAxMTBcdCAgICAgICAgICAgICAgICBpbml0aWFsRGF0YT17Ym9va0RhdGEgfHwgdW5kZWZpbmVkfVxuICAgMTExXHQgICAgICAgICAgICAgICAgb25TdWJtaXQ9eyhkYXRhKSA9PiB7XG4gICAxMTJcdCAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEb25uw6llcyBkdSBmb3JtdWxhaXJlIHNvdW1pc2VzOicsIGRhdGEpO1xuICAgMTEzXHQgICAgICAgICAgICAgICAgICBhbGVydCgnTW9kaWZpY2F0aW9ucyBlbnJlZ2lzdHLDqWVzIGF2ZWMgc3VjY8OocyEnKTtcbiAgIDExNFx0ICAgICAgICAgICAgICAgIH19XG4gICAxMTVcdCAgICAgICAgICAgICAgLz5cbiAgIDExNlx0ICAgICAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMTE3XHQgICAgICAgICAgKX1cbiAgIDExOFx0ICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAxMTlcdCAgICAgIDwvZGl2PlxuICAgMTIwXHRcbiAgIDEyMVx0ICAgICAgPHN0eWxlIGpzeCBnbG9iYWw+e2BcbiAgIDEyMlx0ICAgICAgICBAa2V5ZnJhbWVzIGxvYWRpbmcge1xuICAgMTIzXHQgICAgICAgICAgMCUgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEwMCUpOyB9XG4gICAxMjRcdCAgICAgICAgICA1MCUgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMzAlKTsgfVxuICAgMTI1XHQgICAgICAgICAgMTAwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWCgxMDAlKTsgfVxuICAgMTI2XHQgICAgICAgIH1cbiAgIDEyN1x0ICAgICAgYH08L3N0eWxlPlxuICAgMTI4XHQgICAgPC9tb3Rpb24uc2VjdGlvbj5cbiAgIDEyOVx0ICApO1xuICAgMTMwXHR9XG4gICAxMzFcdFxuICAgMTMyXHRleHBvcnQgZGVmYXVsdCBFZGl0Rm9ybUJvb2s7XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAxMzJcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjYzZTlmZjM3LWMyNWEtNDU2Mi04ODFlLWU5YTJjOTBjODRlMDt0b29sdV8wMVBkcVBhVkxWTGJ6Rkx3N3l6Y3JNS3AiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgIDFcdCd1c2UgY2xpZW50JztcbiAgICAgMlx0XG4gICAgIDNcdGltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG4gICAgIDRcdGltcG9ydCB7IHVzZUZvcm0sIHVzZUZpZWxkQXJyYXkgfSBmcm9tICdyZWFjdC1ob29rLWZvcm0nO1xuICAgICA1XHRpbXBvcnQgeyB6b2RSZXNvbHZlciB9IGZyb20gJ0Bob29rZm9ybS9yZXNvbHZlcnMvem9kJztcbiAgICAgNlx0aW1wb3J0IHsgQm9va0RhdGEgfSBmcm9tICdAL3R5cGVzL0Jvb2tEYXRhJztcbiAgICAgN1x0aW1wb3J0IHsgQm9va0Zvcm1TY2hlbWEsIEJvb2tGb3JtVmFsdWVzVHlwZSB9IGZyb20gJy4vc2NoZW1hcy9Cb29rRm9ybVNjaGVtYSc7XG4gICAgIDhcdGltcG9ydCBJbnB1dEZvcm0gZnJvbSAnLi9JbnB1dEZvcm0nO1xuICAgICA5XHRpbXBvcnQgeyBQbHVzQ2lyY2xlLCBQYWxtdHJlZSwgUGxhbmUsIEhvbWUsIE1hcFBpbiwgQXJyb3dMZWZ0IH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcbiAgICAxMFx0aW1wb3J0IFJlY29tbWVuZGF0aW9uIGZyb20gJy4vUmVjb21tZW5kYXRpb24nO1xuICAgIDExXHRpbXBvcnQgeyBtb3Rpb24gfSBmcm9tICdmcmFtZXItbW90aW9uJztcbiAgICAxMlx0aW1wb3J0IHsgQWNjb3JkaW9uLCBBY2NvcmRpb25Db250ZW50LCBBY2NvcmRpb25JdGVtLCBBY2NvcmRpb25UcmlnZ2VyIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2FjY29yZGlvbic7XG4gICAgMTNcdGltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ25leHQvbmF2aWdhdGlvbic7XG4gICAgMTRcdGltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG4gICAgMTVcdFxuICAgIDE2XHRjb25zdCBjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMgPSAoZGF0YTogQm9va0RhdGEgfCB1bmRlZmluZWQpOiBCb29rRm9ybVZhbHVlc1R5cGUgPT4ge1xuICAgIDE3XHQgIHJldHVybiB7XG4gICAgMThcdCAgICBpZDogZGF0YT8uaWQsXG5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1sxXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgIDU1XHQgIGluaXRpYWxEYXRhPzogQm9va0RhdGE7XG4gICAgNTZcdCAgb25TdWJtaXQ/OiAoZGF0YTogQm9va0RhdGEpID0+IHZvaWQ7XG4gICAgNTdcdH1cbiAgICA1OFx0XG4gICAgNTlcdGV4cG9ydCBmdW5jdGlvbiBCb29rRWRpdEZvcm0oeyBpbml0aWFsRGF0YSwgb25TdWJtaXQgfTogQm9va0VkaXRGb3JtUHJvcHMpIHtcbiAgICA2MFx0ICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcbiAgICA2MVx0ICBjb25zdCBbaXNTYXZpbmcsIHNldElzU2F2aW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICA2Mlx0ICBjb25zdCBbaXNNb2RpZmllZCwgc2V0SXNNb2RpZmllZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgNjNcdCAgY29uc3QgW29yaWdpbmFsVmFsdWVzLCBzZXRPcmlnaW5hbFZhbHVlc10gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcbiAgICA2NFx0XG4gICAgNjVcdCAgY29uc3Qge1xuICAgIDY2XHQgICAgcmVnaXN0ZXIsXG4gICAgNjdcdCAgICBoYW5kbGVTdWJtaXQsXG4gICAgNjhcdCAgICBjb250cm9sLFxuICAgIDY5XHQgICAgd2F0Y2gsXG4gICAgNzBcdCAgICBmb3JtU3RhdGU6IHsgZXJyb3JzLCBpc0RpcnR5IH0sXG4gICAgNzFcdCAgfSA9IHVzZUZvcm08Qm9va0Zvcm1WYWx1ZXNUeXBlPih7XG4gICAgNzJcdCAgICByZXNvbHZlcjogem9kUmVzb2x2ZXIoQm9va0Zvcm1TY2hlbWEpIGFzIGFueSxcbiAgICA3M1x0ICAgIGRlZmF1bHRWYWx1ZXM6IGNvbnZlcnRCb29rRGF0YVRvRm9ybVZhbHVlcyhpbml0aWFsRGF0YSksXG4gICAgNzRcdCAgfSk7XG4gICAgNzVcdFxuICAgIDc2XHQgIGNvbnN0IHsgZmllbGRzLCBhcHBlbmQsIHJlbW92ZSB9ID0gdXNlRmllbGRBcnJheSh7XG4gICAgNzdcdCAgICBjb250cm9sLFxuICAgIDc4XHQgICAgbmFtZTogXCJyZWNvbW1lbmRhdGlvbnNcIixcbiAgICA3OVx0ICB9KTtcbiAgICA4MFx0XG4gICAgODFcdCAgLy8gU3VydmVpbGxlciBsZXMgY2hhbmdlbWVudHMgZGFucyBsZSBmb3JtdWxhaXJlXG4gICAgODJcdCAgY29uc3QgZm9ybVZhbHVlcyA9IHdhdGNoKCk7XG4gICAgODNcdFxuICAgIDg0XHQgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgODVcdCAgICAvLyBTYXV2ZWdhcmRlciBsZXMgdmFsZXVycyBpbml0aWFsZXMgcG91ciBjb21wYXJhaXNvblxuICAgIDg2XHQgICAgaWYgKCFvcmlnaW5hbFZhbHVlcykge1xuICAgIDg3XHQgICAgICBzZXRPcmlnaW5hbFZhbHVlcyhKU09OLnN0cmluZ2lmeShjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMoaW5pdGlhbERhdGEpKSk7XG4gICAgODhcdCAgICB9XG4gICAgODlcdFxuICAgIDkwXHQgICAgLy8gVsOpcmlmaWVyIHNpIGRlcyBtb2RpZmljYXRpb25zIG9udCDDqXTDqSBhcHBvcnTDqWVzXG4gICAgOTFcdCAgICBjb25zdCBjdXJyZW50VmFsdWVzID0gSlNPTi5zdHJpbmdpZnkoZm9ybVZhbHVlcyk7XG4gICAgOTJcdCAgICBzZXRJc01vZGlmaWVkKGN1cnJlbnRWYWx1ZXMgIT09IG9yaWdpbmFsVmFsdWVzKTtcbiAgICA5M1x0ICB9LCBbZm9ybVZhbHVlcywgb3JpZ2luYWxWYWx1ZXMsIGluaXRpYWxEYXRhXSk7XG4gICAgOTRcdFxuICAgIDk1XHQgIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSBhc3luYyAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XG4gICAgOTZcdCAgICAvLyBTaSBhdWN1bmUgbW9kaWZpY2F0aW9uLCByZWRpcmlnZXIgdmVycyBsYSBwYWdlIGQnYWNjdWVpbFxuICAgIDk3XHQgICAgaWYgKCFpc01vZGlmaWVkKSB7XG4gICAgOThcdCAgICAgIHJvdXRlci5wdXNoKCcvJyk7XG4gICAgOTlcdCAgICAgIHJldHVybjtcbiAgIDEwMFx0ICAgIH1cbiAgIDEwMVx0XG4gICAxMDJcdCAgICBzZXRJc1NhdmluZyh0cnVlKTtcbiAgIDEwM1x0ICAgIGNvbnN0IGJvb2tEYXRhID0gY29udmVydEZvcm1WYWx1ZXNUb0Jvb2tEYXRhKGRhdGEpO1xuICAgMTA0XHRcbiAgIDEwNVx0ICAgIHRyeSB7XG4gICAxMDZcdCAgICAgIGlmIChib29rRGF0YS5pZCkge1xuICAgMTA3XHQgICAgICAgIC8vIEVudm95ZXIgdW5lIHJlcXXDqnRlIFBVVCBwb3VyIG1ldHRyZSDDoCBqb3VyIGxlcyBkb25uw6llc1xuICAgMTA4XHQgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucHV0KGBodHRwOi8vbG9jYWxob3N0OjMwMDEvYXBpL3N0YXkvJHtib29rRGF0YS5pZH1gLCBib29rRGF0YSk7XG4gICAxMDlcdFxuICAgMTEwXHQgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgMTExXHQgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm7DqWVzIG1pc2VzIMOgIGpvdXIgYXZlYyBzdWNjw6hzOicsIHJlc3BvbnNlLmRhdGEpO1xuICAgMTEyXHRcbiAgIDExM1x0ICAgICAgICAgIGlmIChvblN1Ym1pdCkge1xuICAgMTE0XHQgICAgICAgICAgICBvblN1Ym1pdChyZXNwb25zZS5kYXRhKTtcbiAgIDExNVx0ICAgICAgICAgIH1cbiAgIDExNlx0ICAgICAgICB9XG4gICAxMTdcdCAgICAgIH0gZWxzZSB7XG4gICAxMThcdCAgICAgICAgLy8gUGFzIGQnSUQsIGRvbmMgb24gdXRpbGlzZSBsZSBjYWxsYmFjayBvblN1Ym1pdCBzdGFuZGFyZFxuICAgMTE5XHQgICAgICAgIGlmIChvblN1Ym1pdCkge1xuICAgMTIwXHQgICAgICAgICAgb25TdWJtaXQoYm9va0RhdGEpO1xuICAgMTIxXHQgICAgICAgIH1cbiAgIDEyMlx0ICAgICAgfVxuICAgMTIzXHQgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgIDEyNFx0ICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgbWlzZSDDoCBqb3VyIGRlcyBkb25uw6llczonLCBlcnJvcik7XG4gICAxMjVcdCAgICAgIGFsZXJ0KCdVbmUgZXJyZXVyIGVzdCBzdXJ2ZW51ZSBsb3JzIGRlIGxhIG1pc2Ugw6Agam91ciBkZXMgZG9ubsOpZXMuJyk7XG4gICAxMjZcdCAgICB9IGZpbmFsbHkge1xuICAgMTI3XHQgICAgICBzZXRJc1NhdmluZyhmYWxzZSk7XG4gICAxMjhcdCAgICB9XG4gICAxMjlcdCAgfTtcbiAgIDEzMFx0XG4gICAxMzFcdCAgY29uc3QgaGFuZGxlUmV0dXJuSG9tZSA9ICgpID0+IHtcbiAgIDEzMlx0ICAgIHJvdXRlci5wdXNoKCcvJyk7XG4gICAxMzNcdCAgfTtcbiAgIDEzNFx0XG4gICAxMzVcdCAgY29uc3QgY29udGFpbmVyVmFyaWFudHMgPSB7XG4gICAxMzZcdCAgICBoaWRkZW46IHsgb3BhY2l0eTogMCB9LFxuICAgMTM3XHQgICAgdmlzaWJsZToge1xuXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlX2VudHJpZXNbMl06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgIDM1N1x0ICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAzNThcdCAgICAgIDwvQWNjb3JkaW9uSXRlbT5cbiAgIDM1OVx0ICAgICAgPC9BY2NvcmRpb24+XG4gICAzNjBcdFxuICAgMzYxXHQgICAgICA8bW90aW9uLmRpdlxuICAgMzYyXHQgICAgICAgIHZhcmlhbnRzPXtpdGVtVmFyaWFudHN9XG4gICAzNjNcdCAgICAgICAgY2xhc3NOYW1lPVwiZmxleCBqdXN0aWZ5LWJldHdlZW4gbXQtOFwiXG4gICAzNjRcdCAgICAgID5cbiAgIDM2NVx0ICAgICAgICB7IWlzTW9kaWZpZWQgJiYgKFxuICAgMzY2XHQgICAgICAgICAgPG1vdGlvbi5idXR0b25cbiAgIDM2N1x0ICAgICAgICAgICAgd2hpbGVIb3Zlcj17eyBzY2FsZTogMS4wNSB9fVxuICAgMzY4XHQgICAgICAgICAgICB3aGlsZVRhcD17eyBzY2FsZTogMC45NSB9fVxuICAgMzY5XHQgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgIDM3MFx0ICAgICAgICAgICAgb25DbGljaz17aGFuZGxlUmV0dXJuSG9tZX1cbiAgIDM3MVx0ICAgICAgICAgICAgY2xhc3NOYW1lPVwicHgtNiBweS0zIGJnLWdyYWRpZW50LXRvLXIgZnJvbS1ncmF5LTQwMCB0by1ncmF5LTUwMCB0ZXh0LXdoaXRlIHJvdW5kZWQtbWQgaG92ZXI6ZnJvbS1ncmF5LTUwMCBob3Zlcjp0by1ncmF5LTYwMCB0cmFuc2l0aW9uLWFsbCBzaGFkb3ctbWQgZm9udC1tZWRpdW0gZmxleCBpdGVtcy1jZW50ZXJcIlxuICAgMzcyXHQgICAgICAgICAgPlxuICAgMzczXHQgICAgICAgICAgICA8QXJyb3dMZWZ0IHNpemU9ezE4fSBjbGFzc05hbWU9XCJtci0yXCIgLz5cbiAgIDM3NFx0ICAgICAgICAgICAgUmV0b3VyIMOgIGwnYWNjdWVpbFxuICAgMzc1XHQgICAgICAgICAgPC9tb3Rpb24uYnV0dG9uPlxuICAgMzc2XHQgICAgICAgICl9XG4gICAzNzdcdCAgICAgICAgPG1vdGlvbi5idXR0b25cbiAgIDM3OFx0ICAgICAgICAgIHdoaWxlSG92ZXI9e3sgc2NhbGU6IDEuMDUgfX1cbiAgIDM3OVx0ICAgICAgICAgIHdoaWxlVGFwPXt7IHNjYWxlOiAwLjk1IH19XG4gICAzODBcdCAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgIDM4MVx0ICAgICAgICAgIGRpc2FibGVkPXtpc1NhdmluZ31cbiAgIDM4Mlx0ICAgICAgICAgIGNsYXNzTmFtZT1cInB4LTYgcHktMyBiZy1ncmFkaWVudC10by1yIGZyb20tWyNmMDRjMjNdIHRvLXBpbmstNTAwIHRleHQtd2hpdGUgcm91bmRlZC1tZCBob3Zlcjpmcm9tLVsjZjA0YzIzXSBob3Zlcjp0by1waW5rLTQwMCB0cmFuc2l0aW9uLWFsbCBzaGFkb3ctbWQgZGlzYWJsZWQ6b3BhY2l0eS01MCBmb250LW1lZGl1bVwiXG4gICAzODNcdCAgICAgICAgPlxuICAgMzg0XHQgICAgICAgICAge2lzU2F2aW5nID8gJ0VucmVnaXN0cmVtZW50IGVuIGNvdXJzLi4uJyA6IGlzTW9kaWZpZWQgPyAnRW5yZWdpc3RyZXIgbGVzIG1vZGlmaWNhdGlvbnMnIDogJ1JldG91ciDDoCBsXFwnYWNjdWVpbCd9XG4gICAzODVcdCAgICAgICAgPC9tb3Rpb24uYnV0dG9uPlxuICAgMzg2XHQgICAgICA8L21vdGlvbi5kaXY+XG4gICAzODdcdCAgICA8L21vdGlvbi5mb3JtPlxuICAgMzg4XHQgICk7XG4gICAzODlcdH1cbiAgIDM5MFx0XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImZhYzZhYzZmLTk0ZmMtNDJmZS1iMjJmLTgxZDdjYzAxZGUxOTt0b29sdV8wMUo3Q1FnV045Z1kyR3lXNWZpYzg5cFIiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeC5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgMTA1XHQgICAgICAgICAgICAgICAgICA8UGFzc3dvcmREaXNwbGF5IHBhc3N3b3JkPXtib29rRGF0YS5hY2Nlc3NQYXNzd29yZH0gYm9va0lkPXtib29rRGF0YS5pZH0gLz5cbiAgIDEwNlx0ICAgICAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDEwN1x0ICAgICAgICAgICAgICApfVxuICAgMTA4XHRcbiAgIDEwOVx0ICAgICAgICAgICAgICA8Qm9va0VkaXRGb3JtXG4gICAxMTBcdCAgICAgICAgICAgICAgICBpbml0aWFsRGF0YT17Ym9va0RhdGEgfHwgdW5kZWZpbmVkfVxuICAgMTExXHQgICAgICAgICAgICAgICAgb25TdWJtaXQ9eyhkYXRhKSA9PiB7XG4gICAxMTJcdCAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEb25uw6llcyBkdSBmb3JtdWxhaXJlIHNvdW1pc2VzOicsIGRhdGEpO1xuICAgMTEzXHQgICAgICAgICAgICAgICAgICAvLyBNZXR0cmUgw6Agam91ciBsZSBzdGF0ZSBib29rRGF0YSBhdmVjIGxlcyBkb25uw6llcyByw6ljdXDDqXLDqWVzXG4gICAxMTRcdCAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xuICAgMTE1XHRcbiAgIDExNlx0ICAgICAgICAgICAgICAgICAgLy8gU2F1dmVnYXJkZXIgbGVzIGRvbm7DqWVzIG1pc2VzIMOgIGpvdXIgZGFucyBsZSBsb2NhbFN0b3JhZ2VcbiAgIDExN1x0ICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgMTE4XHRcbiAgIDExOVx0ICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3Ryw6llcyBhdmVjIHN1Y2PDqHMhJyk7XG4gICAxMjBcdCAgICAgICAgICAgICAgICB9fVxuICAgMTIxXHQgICAgICAgICAgICAgIC8+XG4gICAxMjJcdCAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDEyM1x0ICAgICAgICAgICl9XG4gICAxMjRcdCAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMTI1XHQgICAgICA8L2Rpdj5cblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiODRkYTY4ZTUtYTIwMy00YTBkLTliZjUtOTY0YWI3MWVhNDU3O3Rvb2x1XzAxU2pMcDlOZzlMRDZ5V3JxV05zbkV0UiI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3guXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlX2VudHJpZXNbMF06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICA1NVx0ICBpbml0aWFsRGF0YT86IEJvb2tEYXRhO1xuICAgIDU2XHQgIG9uU3VibWl0PzogKGRhdGE6IEJvb2tEYXRhKSA9PiB2b2lkO1xuICAgIDU3XHR9XG4gICAgNThcdFxuICAgIDU5XHRleHBvcnQgZnVuY3Rpb24gQm9va0VkaXRGb3JtKHsgaW5pdGlhbERhdGEsIG9uU3VibWl0IH06IEJvb2tFZGl0Rm9ybVByb3BzKSB7XG4gICAgNjBcdCAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG4gICAgNjFcdCAgY29uc3QgW2lzU2F2aW5nLCBzZXRJc1NhdmluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgNjJcdCAgY29uc3QgW2lzTW9kaWZpZWQsIHNldElzTW9kaWZpZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIDYzXHQgIGNvbnN0IFtvcmlnaW5hbFZhbHVlcywgc2V0T3JpZ2luYWxWYWx1ZXNdID0gdXNlU3RhdGU8c3RyaW5nPignJyk7XG4gICAgNjRcdFxuICAgIDY1XHQgIGNvbnN0IHtcbiAgICA2Nlx0ICAgIHJlZ2lzdGVyLFxuICAgIDY3XHQgICAgaGFuZGxlU3VibWl0LFxuICAgIDY4XHQgICAgY29udHJvbCxcbiAgICA2OVx0ICAgIHdhdGNoLFxuICAgIDcwXHQgICAgZm9ybVN0YXRlOiB7IGVycm9ycywgaXNEaXJ0eSB9LFxuICAgIDcxXHQgIH0gPSB1c2VGb3JtPEJvb2tGb3JtVmFsdWVzVHlwZT4oe1xuICAgIDcyXHQgICAgcmVzb2x2ZXI6IHpvZFJlc29sdmVyKEJvb2tGb3JtU2NoZW1hKSBhcyBhbnksXG4gICAgNzNcdCAgICBkZWZhdWx0VmFsdWVzOiBjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMoaW5pdGlhbERhdGEpLFxuICAgIDc0XHQgIH0pO1xuICAgIDc1XHRcbiAgICA3Nlx0ICBjb25zdCB7IGZpZWxkcywgYXBwZW5kLCByZW1vdmUgfSA9IHVzZUZpZWxkQXJyYXkoe1xuICAgIDc3XHQgICAgY29udHJvbCxcbiAgICA3OFx0ICAgIG5hbWU6IFwicmVjb21tZW5kYXRpb25zXCIsXG4gICAgNzlcdCAgfSk7XG4gICAgODBcdFxuICAgIDgxXHQgIC8vIFN1cnZlaWxsZXIgbGVzIGNoYW5nZW1lbnRzIGRhbnMgbGUgZm9ybXVsYWlyZVxuICAgIDgyXHQgIGNvbnN0IGZvcm1WYWx1ZXMgPSB3YXRjaCgpO1xuICAgIDgzXHRcbiAgICA4NFx0ICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIDg1XHQgICAgLy8gU2F1dmVnYXJkZXIgbGVzIHZhbGV1cnMgaW5pdGlhbGVzIHBvdXIgY29tcGFyYWlzb25cbiAgICA4Nlx0ICAgIGlmICghb3JpZ2luYWxWYWx1ZXMpIHtcbiAgICA4N1x0ICAgICAgc2V0T3JpZ2luYWxWYWx1ZXMoSlNPTi5zdHJpbmdpZnkoY29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzKGluaXRpYWxEYXRhKSkpO1xuICAgIDg4XHQgICAgfVxuICAgIDg5XHRcbiAgICA5MFx0ICAgIC8vIFbDqXJpZmllciBzaSBkZXMgbW9kaWZpY2F0aW9ucyBvbnQgw6l0w6kgYXBwb3J0w6llc1xuICAgIDkxXHQgICAgY29uc3QgY3VycmVudFZhbHVlcyA9IEpTT04uc3RyaW5naWZ5KGZvcm1WYWx1ZXMpO1xuICAgIDkyXHQgICAgc2V0SXNNb2RpZmllZChjdXJyZW50VmFsdWVzICE9PSBvcmlnaW5hbFZhbHVlcyk7XG4gICAgOTNcdCAgfSwgW2Zvcm1WYWx1ZXMsIG9yaWdpbmFsVmFsdWVzLCBpbml0aWFsRGF0YV0pO1xuICAgIDk0XHRcbiAgICA5NVx0ICBjb25zdCBoYW5kbGVGb3JtU3VibWl0ID0gKGRhdGE6IEJvb2tGb3JtVmFsdWVzVHlwZSkgPT4ge1xuICAgIDk2XHQgICAgLy8gU2kgYXVjdW5lIG1vZGlmaWNhdGlvbiwgcmVkaXJpZ2VyIHZlcnMgbGEgcGFnZSBkJ2FjY3VlaWxcbiAgICA5N1x0ICAgIGlmICghaXNNb2RpZmllZCkge1xuICAgIDk4XHQgICAgICByb3V0ZXIucHVzaCgnLycpO1xuICAgIDk5XHQgICAgICByZXR1cm47XG4gICAxMDBcdCAgICB9XG4gICAxMDFcdFxuICAgMTAyXHQgICAgc2V0SXNTYXZpbmcodHJ1ZSk7XG4gICAxMDNcdCAgICBjb25zdCBib29rRGF0YSA9IGNvbnZlcnRGb3JtVmFsdWVzVG9Cb29rRGF0YShkYXRhKTtcbiAgIDEwNFx0XG4gICAxMDVcdCAgICBpZiAob25TdWJtaXQpIHtcbiAgIDEwNlx0ICAgICAgLy8gUGFzc2VyIGxlcyBkb25uw6llcyBhdSBjb21wb3NhbnQgcGFyZW50IHF1aSBnw6hyZXJhIGxhIHJlcXXDqnRlIFBVVFxuICAgMTA3XHQgICAgICBvblN1Ym1pdChib29rRGF0YSk7XG4gICAxMDhcdCAgICB9XG4gICAxMDlcdFxuICAgMTEwXHQgICAgLy8gUsOpaW5pdGlhbGlzZXIgbCfDqXRhdCBkZSBzYXV2ZWdhcmRlIGFwcsOocyB1biBjb3VydCBkw6lsYWlcbiAgIDExMVx0ICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgMTEyXHQgICAgICBzZXRJc1NhdmluZyhmYWxzZSk7XG4gICAxMTNcdCAgICB9LCAxMDAwKTtcbiAgIDExNFx0ICB9O1xuICAgMTE1XHRcbiAgIDExNlx0ICBjb25zdCBoYW5kbGVSZXR1cm5Ib21lID0gKCkgPT4ge1xuICAgMTE3XHQgICAgcm91dGVyLnB1c2goJy8nKTtcbiAgIDExOFx0ICB9O1xuICAgMTE5XHRcbiAgIDEyMFx0ICBjb25zdCBjb250YWluZXJWYXJpYW50cyA9IHtcbiAgIDEyMVx0ICAgIGhpZGRlbjogeyBvcGFjaXR5OiAwIH0sXG4gICAxMjJcdCAgICB2aXNpYmxlOiB7XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjdiNjFjNzk3LWQ0NWEtNGZmMS05ZTkyLTdlNTJkMGZjMDViNTt0b29sdV8wMTQzU3JpTE1UZ3Q2aDdYOHEzbk5jTmgiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiUGFydGlhbGx5IGVkaXRlZCB0aGUgZmlsZSBzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeC4gU2VlIGJlbG93IGZvciBkZXRhaWxzLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuTm8gcmVwbGFjZW1lbnQgd2FzIHBlcmZvcm1lZCwgb2xkU3RyIGRpZCBub3QgYXBwZWFyIHZlcmJhdGltIGluIHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4LlxuVGhlIGNvbnRlbnQgaW4gdGhlIHNwZWNpZmllZCByZWdpb24gaXM6XG4gICAxMDVcdCAgICAgICAgICAgICAgICAgIDxQYXNzd29yZERpc3BsYXkgcGFzc3dvcmQ9e2Jvb2tEYXRhLmFjY2Vzc1Bhc3N3b3JkfSBib29rSWQ9e2Jvb2tEYXRhLmlkfSAvPlxuICAgMTA2XHQgICAgICAgICAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMTA3XHQgICAgICAgICAgICAgICl9XG4gICAxMDhcdFxuICAgMTA5XHQgICAgICAgICAgICAgIDxCb29rRWRpdEZvcm1cbiAgIDExMFx0ICAgICAgICAgICAgICAgIGluaXRpYWxEYXRhPXtib29rRGF0YSB8fCB1bmRlZmluZWR9XG4gICAxMTFcdCAgICAgICAgICAgICAgICBvblN1Ym1pdD17KGRhdGEpID0+IHtcbiAgIDExMlx0ICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEoZGF0YSk7XG4gICAxMTNcdFxuICAgMTE0XHQgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAxMTVcdCAgICAgICAgICAgICAgICB9fVxuICAgMTE2XHQgICAgICAgICAgICAgIC8+XG4gICAxMTdcdCAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDExOFx0ICAgICAgICAgICl9XG4gICAxMTlcdCAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMTIwXHQgICAgICA8L2Rpdj5cbiAgIDEyMVx0XG4gICAxMjJcdCAgICAgIDxzdHlsZSBqc3ggZ2xvYmFsPntgXG4gICAxMjNcdCAgICAgICAgQGtleWZyYW1lcyBsb2FkaW5nIHtcbiAgIDEyNFx0ICAgICAgICAgIDAlIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKTsgfVxuICAgMTI1XHQgICAgICAgICAgNTAlIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDMwJSk7IH1cblxuRGlmZiBiZXR3ZWVuIG9sZFN0ciBhbmQgdGhlIHNwZWNpZmllZCByZWdpb24gaXM6XG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4tLS0gb2xkU3RyXG4rKysgcmVnaW9uQ29udGVudFxuQEAgLTEsMTMgKzEsMTMgQEBcbiAgICAgICAgICAgICAgIDxCb29rRWRpdEZvcm1cbiAgICAgICAgICAgICAgICAgaW5pdGlhbERhdGE9e2Jvb2tEYXRhIHx8IHVuZGVmaW5lZH1cbiAgICAgICAgICAgICAgICAgb25TdWJtaXQ9eyhkYXRhKSA9PiB7XG4tICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm7DqWVzIGR1IGZvcm11bGFpcmUgc291bWlzZXM6JywgZGF0YSk7XG4tICAgICAgICAgICAgICAgICAgLy8gTWV0dHJlIMOgIGpvdXIgbGUgc3RhdGUgYm9va0RhdGEgYXZlYyBsZXMgZG9ubsOpZXMgcsOpY3Vww6lyw6llc1xuICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xuIFxuLSAgICAgICAgICAgICAgICAgIC8vIFNhdXZlZ2FyZGVyIGxlcyBkb25uw6llcyBtaXNlcyDDoCBqb3VyIGRhbnMgbGUgbG9jYWxTdG9yYWdlXG4gICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuLVxuLSAgICAgICAgICAgICAgICAgIGFsZXJ0KCdNb2RpZmljYXRpb25zIGVucmVnaXN0csOpZXMgYXZlYyBzdWNjw6hzIScpO1xuICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgLz5cbisgICAgICAgICAgICA8L21vdGlvbi5kaXY+XG4rICAgICAgICAgICl9XG4rICAgICAgICA8L21vdGlvbi5kaXY+XG4rICAgICAgPC9kaXY+XG4rXG5cblxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzFdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgIDFcdCd1c2UgY2xpZW50JztcbiAgICAgMlx0XG4gICAgIDNcdGltcG9ydCB7IEJvb2tFZGl0Rm9ybSB9IGZyb20gJ0AvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0nO1xuICAgICA0XHRpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuICAgICA1XHRpbXBvcnQgeyBCb29rRGF0YSB9IGZyb20gJ0AvdHlwZXMvQm9va0RhdGEnO1xuICAgICA2XHRpbXBvcnQgeyBtb3Rpb24gfSBmcm9tICdmcmFtZXItbW90aW9uJztcbiAgICAgN1x0aW1wb3J0IHsgUGFsbXRyZWUsIEJvb2ssIFN1biB9IGZyb20gJ2x1Y2lkZS1yZWFjdCc7XG4gICAgIDhcdGltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ25leHQvbmF2aWdhdGlvbic7XG4gICAgIDlcdGltcG9ydCB7UGFzc3dvcmREaXNwbGF5fSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50cy9QYXNzd29yZERpc3BsYXlcIjtcbiAgICAxMFx0aW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbiAgICAxMVx0XG4gICAgMTJcdGZ1bmN0aW9uIEVkaXRGb3JtQm9vaygpIHtcbiAgICAxM1x0ICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKTtcbiAgICAxNFx0ICBjb25zdCBbYm9va0RhdGEsIHNldEJvb2tEYXRhXSA9IHVzZVN0YXRlPEJvb2tEYXRhIHwgbnVsbD4obnVsbCk7XG5cbkZpeCBmYWlsZWQgc3RyX3JlcGxhY2VfZW50cmllcyBhY2NvcmRpbmdseSBhbmQgdHJ5IGFnYWluLlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiNzBkODM3ZDUtZjMxZi00NjM2LWI1MmQtZjEwMWRkNWVkYzBkO3Rvb2x1XzAxM01jUDFYd1hQVVVURmtFUE11UHQ0SiI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4OlxuICAgICAxXHQndXNlIGNsaWVudCc7XG4gICAgIDJcdFxuICAgICAzXHRpbXBvcnQgeyBCb29rRWRpdEZvcm0gfSBmcm9tICdAL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtJztcbiAgICAgNFx0aW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbiAgICAgNVx0aW1wb3J0IHsgQm9va0RhdGEgfSBmcm9tICdAL3R5cGVzL0Jvb2tEYXRhJztcbiAgICAgNlx0aW1wb3J0IHsgbW90aW9uIH0gZnJvbSAnZnJhbWVyLW1vdGlvbic7XG4gICAgIDdcdGltcG9ydCB7IFBhbG10cmVlLCBCb29rLCBTdW4gfSBmcm9tICdsdWNpZGUtcmVhY3QnO1xuICAgICA4XHRpbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tICduZXh0L25hdmlnYXRpb24nO1xuICAgICA5XHRpbXBvcnQge1Bhc3N3b3JkRGlzcGxheX0gZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHMvUGFzc3dvcmREaXNwbGF5XCI7XG4gICAgMTBcdGltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG4gICAgMTFcdFxuICAgIDEyXHRmdW5jdGlvbiBFZGl0Rm9ybUJvb2soKSB7XG4gICAgMTNcdCAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG4gICAgMTRcdCAgY29uc3QgW2Jvb2tEYXRhLCBzZXRCb29rRGF0YV0gPSB1c2VTdGF0ZTxCb29rRGF0YSB8IG51bGw+KG51bGwpO1xuICAgIDE1XHQgIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcblRvdGFsIGxpbmVzIGluIGZpbGU6IDEzNFxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiYThkNTIxZDEtNzQ1NC00NTYzLTg0NmUtZDQwMzNlNmZlMTYwO3Rvb2x1XzAxQ2U4anYxcll5TWpWeldGOW84VW8yTCI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4OlxuICAgMTAwXHQgICAgICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAxMDFcdCAgICAgICAgICApIDogKFxuICAgMTAyXHQgICAgICAgICAgICA8bW90aW9uLmRpdiB2YXJpYW50cz17aXRlbVZhcmlhbnRzfSBjbGFzc05hbWU9XCJzcGFjZS15LThcIj5cbiAgIDEwM1x0ICAgICAgICAgICAgICB7LyogQWZmaWNoYWdlIGR1IG1vdCBkZSBwYXNzZSAqL31cbiAgIDEwNFx0ICAgICAgICAgICAgICB7Ym9va0RhdGE/LmFjY2Vzc1Bhc3N3b3JkICYmIGJvb2tEYXRhPy5pZCAmJiAoXG4gICAxMDVcdCAgICAgICAgICAgICAgICA8bW90aW9uLmRpdiB2YXJpYW50cz17aXRlbVZhcmlhbnRzfT5cbiAgIDEwNlx0ICAgICAgICAgICAgICAgICAgPFBhc3N3b3JkRGlzcGxheSBwYXNzd29yZD17Ym9va0RhdGEuYWNjZXNzUGFzc3dvcmR9IGJvb2tJZD17Ym9va0RhdGEuaWR9IC8+XG4gICAxMDdcdCAgICAgICAgICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAxMDhcdCAgICAgICAgICAgICAgKX1cbiAgIDEwOVx0XG4gICAxMTBcdCAgICAgICAgICAgICAgPEJvb2tFZGl0Rm9ybVxuICAgMTExXHQgICAgICAgICAgICAgICAgaW5pdGlhbERhdGE9e2Jvb2tEYXRhIHx8IHVuZGVmaW5lZH1cbiAgIDExMlx0ICAgICAgICAgICAgICAgIG9uU3VibWl0PXsoZGF0YSkgPT4ge1xuICAgMTEzXHQgICAgICAgICAgICAgICAgICBzZXRCb29rRGF0YShkYXRhKTtcbiAgIDExNFx0XG4gICAxMTVcdCAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdib29rRGF0YScsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgIDExNlx0ICAgICAgICAgICAgICAgIH19XG4gICAxMTdcdCAgICAgICAgICAgICAgLz5cbiAgIDExOFx0ICAgICAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMTE5XHQgICAgICAgICAgKX1cbiAgIDEyMFx0ICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAxMjFcdCAgICAgIDwvZGl2PlxuICAgMTIyXHRcbiAgIDEyM1x0ICAgICAgPHN0eWxlIGpzeCBnbG9iYWw+e2BcbiAgIDEyNFx0ICAgICAgICBAa2V5ZnJhbWVzIGxvYWRpbmcge1xuICAgMTI1XHQgICAgICAgICAgMCUgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEwMCUpOyB9XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAxMzRcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjEyNmVmZmU5LTk5NDItNDI0OS1iYTM5LTBjNjVlMjUwMzRkMzt0b29sdV8wMU5zeXRBcTlYeEdTUnNUNW9DeGRvZVoiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeC5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgMTA4XHQgICAgICAgICAgICAgICl9XG4gICAxMDlcdFxuICAgMTEwXHQgICAgICAgICAgICAgIDxCb29rRWRpdEZvcm1cbiAgIDExMVx0ICAgICAgICAgICAgICAgIGluaXRpYWxEYXRhPXtib29rRGF0YSB8fCB1bmRlZmluZWR9XG4gICAxMTJcdCAgICAgICAgICAgICAgICBvblN1Ym1pdD17YXN5bmMgKGRhdGEpID0+IHtcbiAgIDExM1x0ICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Rvbm7DqWVzIGR1IGZvcm11bGFpcmUgc291bWlzZXM6JywgZGF0YSk7XG4gICAxMTRcdFxuICAgMTE1XHQgICAgICAgICAgICAgICAgICB0cnkge1xuICAgMTE2XHQgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmlkKSB7XG4gICAxMTdcdCAgICAgICAgICAgICAgICAgICAgICAvLyBFbnZveWVyIHVuZSByZXF1w6p0ZSBQVVQgcG91ciBtZXR0cmUgw6Agam91ciBsZXMgZG9ubsOpZXNcbiAgIDExOFx0ICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucHV0KGBodHRwOi8vbG9jYWxob3N0OjMwMDEvYXBpL3N0YXkvJHtkYXRhLmlkfWAsIGRhdGEpO1xuICAgMTE5XHRcbiAgIDEyMFx0ICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgMTIxXHQgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRG9ubsOpZXMgbWlzZXMgw6Agam91ciBhdmVjIHN1Y2PDqHM6JywgcmVzcG9uc2UuZGF0YSk7XG4gICAxMjJcdFxuICAgMTIzXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBNZXR0cmUgw6Agam91ciBsZSBzdGF0ZSBib29rRGF0YSBhdmVjIGxlcyBkb25uw6llcyByw6ljdXDDqXLDqWVzXG4gICAxMjRcdCAgICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKHJlc3BvbnNlLmRhdGEpO1xuICAgMTI1XHRcbiAgIDEyNlx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2F1dmVnYXJkZXIgbGVzIGRvbm7DqWVzIG1pc2VzIMOgIGpvdXIgZGFucyBsZSBsb2NhbFN0b3JhZ2VcbiAgIDEyN1x0ICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuZGF0YSkpO1xuICAgMTI4XHRcbiAgIDEyOVx0ICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3Ryw6llcyBhdmVjIHN1Y2PDqHMhJyk7XG4gICAxMzBcdCAgICAgICAgICAgICAgICAgICAgICB9XG4gICAxMzFcdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgIDEzMlx0ICAgICAgICAgICAgICAgICAgICAgIC8vIFBhcyBkJ0lELCBkb25jIG9uIG1ldCBzaW1wbGVtZW50IMOgIGpvdXIgbGUgc3RhdGVcbiAgIDEzM1x0ICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xuICAgMTM0XHQgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgMTM1XHQgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3Ryw6llcyBhdmVjIHN1Y2PDqHMhJyk7XG4gICAxMzZcdCAgICAgICAgICAgICAgICAgICAgfVxuICAgMTM3XHQgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgMTM4XHQgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBsb3JzIGRlIGxhIG1pc2Ugw6Agam91ciBkZXMgZG9ubsOpZXM6JywgZXJyb3IpO1xuICAgMTM5XHQgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdVbmUgZXJyZXVyIGVzdCBzdXJ2ZW51ZSBsb3JzIGRlIGxhIG1pc2Ugw6Agam91ciBkZXMgZG9ubsOpZXMuJyk7XG4gICAxNDBcdCAgICAgICAgICAgICAgICAgIH1cbiAgIDE0MVx0ICAgICAgICAgICAgICAgIH1cbiAgIDE0Mlx0ICAgICAgICAgICAgICAvPlxuICAgMTQzXHQgICAgICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAxNDRcdCAgICAgICAgICApfVxuICAgMTQ1XHQgICAgICAgIDwvbW90aW9uLmRpdj5cblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiOGM1MmFmMTUtOGQwMS00M2ViLWE1YzEtYmE4Y2NhNzIzNWIxO3Rvb2x1XzAxUTF6bW1FNjJtVXAzUURiSGNCOWpEZSI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAxMDhcdCAgICAgICAgICAgICAgKX1cbiAgIDEwOVx0XG4gICAxMTBcdCAgICAgICAgICAgICAgPEJvb2tFZGl0Rm9ybVxuICAgMTExXHQgICAgICAgICAgICAgICAgaW5pdGlhbERhdGE9e2Jvb2tEYXRhIHx8IHVuZGVmaW5lZH1cbiAgIDExMlx0ICAgICAgICAgICAgICAgIG9uU3VibWl0PXthc3luYyAoZGF0YSkgPT4ge1xuICAgMTEzXHQgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRG9ubsOpZXMgZHUgZm9ybXVsYWlyZSBzb3VtaXNlczonLCBkYXRhKTtcbiAgIDExNFx0XG4gICAxMTVcdCAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAxMTZcdCAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaWQpIHtcbiAgIDExN1x0ICAgICAgICAgICAgICAgICAgICAgIC8vIFByw6lwYXJlciBsZXMgZG9ubsOpZXMgcG91ciBQcmlzbWFcbiAgIDExOFx0ICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByaXNtYURhdGEgPSB7XG4gICAxMTlcdCAgICAgICAgICAgICAgICAgICAgICAgIGFycml2YWxUaW1lOiBkYXRhLmFycml2YWxUaW1lLFxuICAgMTIwXHQgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NJbnN0cnVjdGlvbnM6IGRhdGEuYWNjZXNzSW5zdHJ1Y3Rpb25zLFxuICAgMTIxXHQgICAgICAgICAgICAgICAgICAgICAgICBhcnJpdmFsQWRkaXRpb25hbEluZm86IGRhdGEuYXJyaXZhbEFkZGl0aW9uYWxJbmZvLFxuICAgMTIyXHQgICAgICAgICAgICAgICAgICAgICAgICBkZXBhcnR1cmVUaW1lOiBkYXRhLmRlcGFydHVyZVRpbWUsXG4gICAxMjNcdCAgICAgICAgICAgICAgICAgICAgICAgIGV4aXRJbnN0cnVjdGlvbnM6IGRhdGEuZXhpdEluc3RydWN0aW9ucyxcbiAgIDEyNFx0ICAgICAgICAgICAgICAgICAgICAgICAgZGVwYXJ0dXJlQWRkaXRpb25hbEluZm86IGRhdGEuZGVwYXJ0dXJlQWRkaXRpb25hbEluZm8sXG4gICAxMjVcdCAgICAgICAgICAgICAgICAgICAgICAgIHdpZmlOYW1lOiBkYXRhLndpZmlOYW1lLFxuICAgMTI2XHQgICAgICAgICAgICAgICAgICAgICAgICB3aWZpUGFzc3dvcmQ6IGRhdGEud2lmaVBhc3N3b3JkLFxuICAgMTI3XHQgICAgICAgICAgICAgICAgICAgICAgICBob3VzZVJ1bGVzOiBkYXRhLmhvdXNlUnVsZXMsXG4gICAxMjhcdCAgICAgICAgICAgICAgICAgICAgICAgIG93bmVyQ29udGFjdDogZGF0YS5vd25lckNvbnRhY3QsXG4gICAxMjlcdCAgICAgICAgICAgICAgICAgICAgICAgIG93bmVyTmFtZTogZGF0YS5vd25lck5hbWUsXG4gICAxMzBcdCAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYWxJbmZvOiBkYXRhLmdlbmVyYWxJbmZvLFxuICAgMTMxXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3JtYXQgc3DDqWNpZmlxdWUgcG91ciBsZXMgcmVsYXRpb25zIGRhbnMgUHJpc21hXG4gICAxMzJcdCAgICAgICAgICAgICAgICAgICAgICAgIHJlY29tbWVuZGF0aW9uczoge1xuICAgMTMzXHQgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZU1hbnk6IHt9LCAvLyBTdXBwcmltZXIgdG91dGVzIGxlcyByZWNvbW1hbmRhdGlvbnMgZXhpc3RhbnRlc1xuICAgMTM0XHQgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZTogZGF0YS5yZWNvbW1lbmRhdGlvbnMubWFwKHJlYyA9PiAoe1xuICAgMTM1XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcmVjLm5hbWUsXG4gICAxMzZcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiByZWMuYWRkcmVzcyB8fCAnJyxcbiAgIDEzN1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiByZWMuZGVzY3JpcHRpb24gfHwgJycsXG4gICAxMzhcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiByZWMudHlwZVxuICAgMTM5XHQgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgMTQwXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAxNDFcdCAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgMTQyXHRcbiAgIDE0M1x0ICAgICAgICAgICAgICAgICAgICAgIC8vIEVudm95ZXIgdW5lIHJlcXXDqnRlIFBVVCBwb3VyIG1ldHRyZSDDoCBqb3VyIGxlcyBkb25uw6llc1xuICAgMTQ0XHQgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wdXQoYGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMS9hcGkvc3RheS8ke2RhdGEuaWR9YCwgcHJpc21hRGF0YSk7XG4gICAxNDVcdFxuICAgMTQ2XHQgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAxNDdcdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEb25uw6llcyBtaXNlcyDDoCBqb3VyIGF2ZWMgc3VjY8OoczonLCByZXNwb25zZS5kYXRhKTtcbiAgIDE0OFx0XG4gICAxNDlcdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ldHRyZSDDoCBqb3VyIGxlIHN0YXRlIGJvb2tEYXRhIGF2ZWMgbGVzIGRvbm7DqWVzIHLDqWN1cMOpcsOpZXNcbiAgIDE1MFx0ICAgICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEocmVzcG9uc2UuZGF0YSk7XG4gICAxNTFcdFxuICAgMTUyXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBTYXV2ZWdhcmRlciBsZXMgZG9ubsOpZXMgbWlzZXMgw6Agam91ciBkYW5zIGxlIGxvY2FsU3RvcmFnZVxuICAgMTUzXHQgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShyZXNwb25zZS5kYXRhKSk7XG4gICAxNTRcdFxuICAgMTU1XHQgICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgnTW9kaWZpY2F0aW9ucyBlbnJlZ2lzdHLDqWVzIGF2ZWMgc3VjY8OocyEnKTtcbiAgIDE1Nlx0ICAgICAgICAgICAgICAgICAgICAgIH1cbiAgIDE1N1x0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgMTU4XHQgICAgICAgICAgICAgICAgICAgICAgLy8gUGFzIGQnSUQsIGRvbmMgb24gbWV0IHNpbXBsZW1lbnQgw6Agam91ciBsZSBzdGF0ZVxuICAgMTU5XHQgICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEoZGF0YSk7XG4gICAxNjBcdCAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAxNjFcdCAgICAgICAgICAgICAgICAgICAgICBhbGVydCgnTW9kaWZpY2F0aW9ucyBlbnJlZ2lzdHLDqWVzIGF2ZWMgc3VjY8OocyEnKTtcbiAgIDE2Mlx0ICAgICAgICAgICAgICAgICAgICB9XG4gICAxNjNcdCAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxNjRcdCAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgbWlzZSDDoCBqb3VyIGRlcyBkb25uw6llczonLCBlcnJvcik7XG4gICAxNjVcdCAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1VuZSBlcnJldXIgZXN0IHN1cnZlbnVlIGxvcnMgZGUgbGEgbWlzZSDDoCBqb3VyIGRlcyBkb25uw6llcy4nKTtcbiAgIDE2Nlx0ICAgICAgICAgICAgICAgICAgfVxuICAgMTY3XHQgICAgICAgICAgICAgICAgfX1cbiAgIDE2OFx0ICAgICAgICAgICAgICAvPlxuICAgMTY5XHQgICAgICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAxNzBcdCAgICAgICAgICAgICAgKX1cbiAgIDE3MVx0ICAgICAgICA8L21vdGlvbi5kaXY+XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImViM2UzMDMzLTM5MTYtNDlhZi1hMzMwLTFlNjhmZmZiNzdmMjt0b29sdV8wMUFUSFBtd0c0QVZrYmYzeUxxQTd3ZHEiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAzNDJcdCAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMzQzXHQgICAgICA8L0FjY29yZGlvbkl0ZW0+XG4gICAzNDRcdCAgICAgIDwvQWNjb3JkaW9uPlxuICAgMzQ1XHRcbiAgIDM0Nlx0ICAgICAgPG1vdGlvbi5kaXZcbiAgIDM0N1x0ICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxuICAgMzQ4XHQgICAgICAgIGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1lbmQgbXQtOFwiXG4gICAzNDlcdCAgICAgID5cbiAgIDM1MFx0ICAgICAgICA8bW90aW9uLmJ1dHRvblxuICAgMzUxXHQgICAgICAgICAgd2hpbGVIb3Zlcj17eyBzY2FsZTogMS4wNSB9fVxuICAgMzUyXHQgICAgICAgICAgd2hpbGVUYXA9e3sgc2NhbGU6IDAuOTUgfX1cbiAgIDM1M1x0ICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgMzU0XHQgICAgICAgICAgZGlzYWJsZWQ9e2lzU2F2aW5nfVxuICAgMzU1XHQgICAgICAgICAgY2xhc3NOYW1lPXtgcHgtNiBweS0zIHRleHQtd2hpdGUgcm91bmRlZC1tZCB0cmFuc2l0aW9uLWFsbCBzaGFkb3ctbWQgZGlzYWJsZWQ6b3BhY2l0eS01MCBmb250LW1lZGl1bSBmbGV4IGl0ZW1zLWNlbnRlciAke2lzTW9kaWZpZWQgPyAnYmctZ3JhZGllbnQtdG8tciBmcm9tLVsjZjA0YzIzXSB0by1waW5rLTUwMCBob3Zlcjpmcm9tLVsjZjA0YzIzXSBob3Zlcjp0by1waW5rLTQwMCcgOiAnYmctZ3JhZGllbnQtdG8tciBmcm9tLWdyYXktNDAwIHRvLWdyYXktNTAwIGhvdmVyOmZyb20tZ3JheS01MDAgaG92ZXI6dG8tZ3JheS02MDAnfWB9XG4gICAzNTZcdCAgICAgICAgPlxuICAgMzU3XHQgICAgICAgICAgeyFpc01vZGlmaWVkICYmIDxBcnJvd0xlZnQgc2l6ZT17MTh9IGNsYXNzTmFtZT1cIm1yLTJcIiAvPn1cbiAgIDM1OFx0ICAgICAgICAgIHtpc1NhdmluZyA/ICdFbnJlZ2lzdHJlbWVudCBlbiBjb3Vycy4uLicgOiBpc01vZGlmaWVkID8gJ0VucmVnaXN0cmVyIGxlcyBtb2RpZmljYXRpb25zJyA6ICdSZXRvdXIgw6AgbFxcJ2FjY3VlaWwnfVxuICAgMzU5XHQgICAgICAgIDwvbW90aW9uLmJ1dHRvbj5cbiAgIDM2MFx0ICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMzYxXHQgICAgPC9tb3Rpb24uZm9ybT5cbiAgIDM2Mlx0ICApO1xuICAgMzYzXHR9XG4gICAzNjRcdFxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCIyZDQxNzk3ZS1mM2MzLTRlNDItOTMxMi01NzNjYzllMzhiYzA7dG9vbHVfMDFVYUFQTlRTdkZSaVpqb0NBeEsyeHJFIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeC5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgIDkxXHQgICAgY29uc3QgY3VycmVudFZhbHVlcyA9IEpTT04uc3RyaW5naWZ5KGZvcm1WYWx1ZXMpO1xuICAgIDkyXHQgICAgc2V0SXNNb2RpZmllZChjdXJyZW50VmFsdWVzICE9PSBvcmlnaW5hbFZhbHVlcyk7XG4gICAgOTNcdCAgfSwgW2Zvcm1WYWx1ZXMsIG9yaWdpbmFsVmFsdWVzLCBpbml0aWFsRGF0YV0pO1xuICAgIDk0XHRcbiAgICA5NVx0ICBjb25zdCBoYW5kbGVGb3JtU3VibWl0ID0gKGRhdGE6IEJvb2tGb3JtVmFsdWVzVHlwZSkgPT4ge1xuICAgIDk2XHQgICAgLy8gU2kgYXVjdW5lIG1vZGlmaWNhdGlvbiwgcmVkaXJpZ2VyIHZlcnMgbGEgcGFnZSBkJ2FjY3VlaWxcbiAgICA5N1x0ICAgIGlmICghaXNNb2RpZmllZCkge1xuICAgIDk4XHQgICAgICByb3V0ZXIucHVzaCgnLycpO1xuICAgIDk5XHQgICAgICByZXR1cm47XG4gICAxMDBcdCAgICB9XG4gICAxMDFcdFxuICAgMTAyXHQgICAgLy8gU2kgZGVzIG1vZGlmaWNhdGlvbnMgb250IMOpdMOpIGVmZmVjdHXDqWVzLCBzb3VtZXR0cmUgbGVzIGRvbm7DqWVzXG4gICAxMDNcdCAgICBzZXRJc1NhdmluZyh0cnVlKTtcbiAgIDEwNFx0ICAgIGNvbnN0IGJvb2tEYXRhID0gY29udmVydEZvcm1WYWx1ZXNUb0Jvb2tEYXRhKGRhdGEpO1xuICAgMTA1XHRcbiAgIDEwNlx0ICAgIGlmIChvblN1Ym1pdCkge1xuICAgMTA3XHQgICAgICAvLyBQYXNzZXIgbGVzIGRvbm7DqWVzIGF1IGNvbXBvc2FudCBwYXJlbnQgcXVpIGfDqHJlcmEgbGEgcmVxdcOqdGUgUFVUXG4gICAxMDhcdCAgICAgIG9uU3VibWl0KGJvb2tEYXRhKTtcbiAgIDEwOVx0ICAgIH1cbiAgIDExMFx0XG4gICAxMTFcdCAgICAvLyBSw6lpbml0aWFsaXNlciBsJ8OpdGF0IGRlIHNhdXZlZ2FyZGUgYXByw6hzIHVuIGNvdXJ0IGTDqWxhaVxuICAgMTEyXHQgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAxMTNcdCAgICAgIHNldElzU2F2aW5nKGZhbHNlKTtcbiAgIDExNFx0ICAgIH0sIDEwMDApO1xuICAgMTE1XHQgIH07XG4gICAxMTZcdFxuICAgMTE3XHQgIGNvbnN0IGhhbmRsZVJldHVybkhvbWUgPSAoKSA9PiB7XG4gICAxMThcdCAgICByb3V0ZXIucHVzaCgnLycpO1xuICAgMTE5XHQgIH07XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjhhMDllOGI2LTVkNjktNGIyZC04ZGE3LWY3ZGM4ZjRkMTg4MTt0b29sdV8wMVdFR1prVDJMQkFoZUMza0N0UzY4VkYiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgOTFcdCAgICBjb25zdCBjdXJyZW50VmFsdWVzID0gSlNPTi5zdHJpbmdpZnkoZm9ybVZhbHVlcyk7XG4gICAgOTJcdCAgICBzZXRJc01vZGlmaWVkKGN1cnJlbnRWYWx1ZXMgIT09IG9yaWdpbmFsVmFsdWVzKTtcbiAgICA5M1x0ICB9LCBbZm9ybVZhbHVlcywgb3JpZ2luYWxWYWx1ZXMsIGluaXRpYWxEYXRhXSk7XG4gICAgOTRcdFxuICAgIDk1XHQgIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XG4gICAgOTZcdCAgICAvLyBTaSBhdWN1bmUgbW9kaWZpY2F0aW9uLCByZWRpcmlnZXIgdmVycyBsYSBwYWdlIGQnYWNjdWVpbFxuICAgIDk3XHQgICAgaWYgKCFpc01vZGlmaWVkKSB7XG4gICAgOThcdCAgICAgIHJvdXRlci5wdXNoKCcvJyk7XG4gICAgOTlcdCAgICAgIHJldHVybjtcbiAgIDEwMFx0ICAgIH1cbiAgIDEwMVx0XG4gICAxMDJcdCAgICAvLyBTaSBkZXMgbW9kaWZpY2F0aW9ucyBvbnQgw6l0w6kgZWZmZWN0dcOpZXMsIHNvdW1ldHRyZSBsZXMgZG9ubsOpZXNcbiAgIDEwM1x0ICAgIHNldElzU2F2aW5nKHRydWUpO1xuICAgMTA0XHQgICAgY29uc3QgYm9va0RhdGEgPSBjb252ZXJ0Rm9ybVZhbHVlc1RvQm9va0RhdGEoZGF0YSk7XG4gICAxMDVcdFxuICAgMTA2XHQgICAgaWYgKG9uU3VibWl0KSB7XG4gICAxMDdcdCAgICAgIC8vIFBhc3NlciBsZXMgZG9ubsOpZXMgYXUgY29tcG9zYW50IHBhcmVudCBxdWkgZ8OocmVyYSBsYSByZXF1w6p0ZSBQVVRcbiAgIDEwOFx0ICAgICAgb25TdWJtaXQoYm9va0RhdGEpO1xuICAgMTA5XHRcbiAgIDExMFx0ICAgICAgLy8gQXByw6hzIGxhIG1pc2Ugw6Agam91ciwgbWV0dHJlIMOgIGpvdXIgbGVzIHZhbGV1cnMgb3JpZ2luYWxlc1xuICAgMTExXHQgICAgICAvLyBwb3VyIHF1ZSBpc01vZGlmaWVkIHJldmllbm5lIMOgIGZhbHNlXG4gICAxMTJcdCAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgMTEzXHQgICAgICAgIHNldE9yaWdpbmFsVmFsdWVzKEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgIDExNFx0ICAgICAgfSwgNTAwKTtcbiAgIDExNVx0ICAgIH1cbiAgIDExNlx0XG4gICAxMTdcdCAgICAvLyBSw6lpbml0aWFsaXNlciBsJ8OpdGF0IGRlIHNhdXZlZ2FyZGUgYXByw6hzIHVuIGNvdXJ0IGTDqWxhaVxuICAgMTE4XHQgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAxMTlcdCAgICAgIHNldElzU2F2aW5nKGZhbHNlKTtcbiAgIDEyMFx0ICAgIH0sIDEwMDApO1xuICAgMTIxXHQgIH07XG4gICAxMjJcdFxuICAgMTIzXHQgIGNvbnN0IGhhbmRsZVJldHVybkhvbWUgPSAoKSA9PiB7XG4gICAxMjRcdCAgICByb3V0ZXIucHVzaCgnLycpO1xuICAgMTI1XHQgIH07XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImUwOTliMjU4LWM1NzAtNDljNC1hYTU3LTZmYTkxMjQ2ZWNhMDt0b29sdV8wMU1hZ2o4c2R0dXo1R2FKVGpaN01YTTkiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgOTBcdCAgICBjb25zdCBjdXJyZW50VmFsdWVzID0gSlNPTi5zdHJpbmdpZnkoZm9ybVZhbHVlcyk7XG4gICAgOTFcdCAgICBzZXRJc01vZGlmaWVkKGN1cnJlbnRWYWx1ZXMgIT09IG9yaWdpbmFsVmFsdWVzKTtcbiAgICA5Mlx0ICB9LCBbZm9ybVZhbHVlcywgb3JpZ2luYWxWYWx1ZXMsIGluaXRpYWxEYXRhXSk7XG4gICAgOTNcdFxuICAgIDk0XHQgIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XG4gICAgOTVcdCAgICAvLyBTaSBhdWN1bmUgbW9kaWZpY2F0aW9uLCByZWRpcmlnZXIgdmVycyBsYSBwYWdlIGQnYWNjdWVpbFxuICAgIDk2XHQgICAgaWYgKCFpc01vZGlmaWVkKSB7XG4gICAgOTdcdCAgICAgIHJvdXRlci5wdXNoKCcvJyk7XG4gICAgOThcdCAgICAgIHJldHVybjtcbiAgICA5OVx0ICAgIH1cbiAgIDEwMFx0XG4gICAxMDFcdCAgICAvLyBTaSBkZXMgbW9kaWZpY2F0aW9ucyBvbnQgw6l0w6kgZWZmZWN0dcOpZXMsIHNvdW1ldHRyZSBsZXMgZG9ubsOpZXNcbiAgIDEwMlx0ICAgIHNldElzU2F2aW5nKHRydWUpO1xuICAgMTAzXHQgICAgY29uc3QgYm9va0RhdGEgPSBjb252ZXJ0Rm9ybVZhbHVlc1RvQm9va0RhdGEoZGF0YSk7XG4gICAxMDRcdFxuICAgMTA1XHQgICAgaWYgKG9uU3VibWl0KSB7XG4gICAxMDZcdCAgICAgIC8vIENyw6llciB1bmUgZm9uY3Rpb24gZGUgY2FsbGJhY2sgcG91ciByw6lpbml0aWFsaXNlciBsJ8OpdGF0IGFwcsOocyBsYSBtaXNlIMOgIGpvdXJcbiAgIDEwN1x0ICAgICAgY29uc3QgcmVzZXRNb2RpZmllZFN0YXRlID0gKCkgPT4ge1xuICAgMTA4XHQgICAgICAgIC8vIE1ldHRyZSDDoCBqb3VyIGRpcmVjdGVtZW50IGwnw6l0YXQgaXNNb2RpZmllZFxuICAgMTA5XHQgICAgICAgIHNldElzTW9kaWZpZWQoZmFsc2UpO1xuICAgMTEwXHQgICAgICAgIC8vIE1ldHRyZSDDoCBqb3VyIGxlcyB2YWxldXJzIG9yaWdpbmFsZXMgYXZlYyBsZXMgbm91dmVsbGVzIGRvbm7DqWVzXG4gICAxMTFcdCAgICAgICAgc2V0T3JpZ2luYWxWYWx1ZXMoSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgMTEyXHQgICAgICB9O1xuICAgMTEzXHRcbiAgIDExNFx0ICAgICAgLy8gUGFzc2VyIGxlcyBkb25uw6llcyBldCBsZSBjYWxsYmFjayBhdSBjb21wb3NhbnQgcGFyZW50XG4gICAxMTVcdCAgICAgIG9uU3VibWl0KGJvb2tEYXRhLCByZXNldE1vZGlmaWVkU3RhdGUpO1xuICAgMTE2XHQgICAgfVxuICAgMTE3XHRcbiAgIDExOFx0ICAgIC8vIFLDqWluaXRpYWxpc2VyIGwnw6l0YXQgZGUgc2F1dmVnYXJkZSBhcHLDqHMgdW4gY291cnQgZMOpbGFpXG4gICAxMTlcdCAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgIDEyMFx0ICAgICAgc2V0SXNTYXZpbmcoZmFsc2UpO1xuICAgMTIxXHQgICAgfSwgMTAwMCk7XG4gICAxMjJcdCAgfTtcbiAgIDEyM1x0XG4gICAxMjRcdCAgY29uc3QgaGFuZGxlUmV0dXJuSG9tZSA9ICgpID0+IHtcbiAgIDEyNVx0ICAgIHJvdXRlci5wdXNoKCcvJyk7XG4gICAxMjZcdCAgfTtcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiODBlMzg3NDUtM2Y3Yi00YmMxLTk1YzktYjZiMTg0M2Q2YWMzO3Rvb2x1XzAxQXh4UENTTVY2cFcxcUttcnJnRkZiMiI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3guXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlX2VudHJpZXNbMF06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICA0OVx0ICAgIHJlY29tbWVuZGF0aW9uczogdmFsdWVzLnJlY29tbWVuZGF0aW9ucyB8fCBbXSxcbiAgICA1MFx0ICB9O1xuICAgIDUxXHR9O1xuICAgIDUyXHRcbiAgICA1M1x0aW50ZXJmYWNlIEJvb2tFZGl0Rm9ybVByb3BzIHtcbiAgICA1NFx0ICBpbml0aWFsRGF0YT86IEJvb2tEYXRhO1xuICAgIDU1XHQgIG9uU3VibWl0PzogKGRhdGE6IEJvb2tEYXRhLCByZXNldE1vZGlmaWVkU3RhdGU/OiAoKSA9PiB2b2lkKSA9PiB2b2lkO1xuICAgIDU2XHR9XG4gICAgNTdcdFxuICAgIDU4XHRleHBvcnQgZnVuY3Rpb24gQm9va0VkaXRGb3JtKHsgaW5pdGlhbERhdGEsIG9uU3VibWl0IH06IEJvb2tFZGl0Rm9ybVByb3BzKSB7XG4gICAgNTlcdCAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG4gICAgNjBcdCAgY29uc3QgW2lzU2F2aW5nLCBzZXRJc1NhdmluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjA0Njg2MmI1LWVmNTMtNDA1Yy05NDZjLWU4OTUwMzYyZTE1NTt0b29sdV8wMURZUlVFZW1Oem0yRU1HNTRRTjg2YmQiOnsicGhhc2UiOjYsInJlc3VsdCI6eyJ0ZXh0IjoiRmFpbGVkIHRvIGVkaXQgdGhlIGZpbGUgc3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3guIFNlZSBiZWxvdyBmb3IgZGV0YWlscy5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcbk5vIHJlcGxhY2VtZW50IHdhcyBwZXJmb3JtZWQsIG9sZFN0ciBkaWQgbm90IGFwcGVhciB2ZXJiYXRpbSBpbiBzcmMvYXBwL293bmVyLWVkaXQtYm9vay9wYWdlLnRzeC5cblRoZSBjb250ZW50IGluIHRoZSBzcGVjaWZpZWQgcmVnaW9uIGlzOlxuICAgMTA4XHQgICAgICAgICAgICAgICl9XG4gICAxMDlcdFxuICAgMTEwXHQgICAgICAgICAgICAgIDxCb29rRWRpdEZvcm1cbiAgIDExMVx0ICAgICAgICAgICAgICAgIGluaXRpYWxEYXRhPXtib29rRGF0YSB8fCB1bmRlZmluZWR9XG4gICAxMTJcdCAgICAgICAgICAgICAgICBvblN1Ym1pdD17YXN5bmMgKGRhdGEpID0+IHtcbiAgIDExM1x0XG4gICAxMTRcdCAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAxMTVcdCAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaWQpIHtcbiAgIDExNlx0ICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByaXNtYURhdGEgPSB7XG4gICAxMTdcdCAgICAgICAgICAgICAgICAgICAgICAgIGFycml2YWxUaW1lOiBkYXRhLmFycml2YWxUaW1lLFxuICAgMTE4XHQgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NJbnN0cnVjdGlvbnM6IGRhdGEuYWNjZXNzSW5zdHJ1Y3Rpb25zLFxuICAgMTE5XHQgICAgICAgICAgICAgICAgICAgICAgICBhcnJpdmFsQWRkaXRpb25hbEluZm86IGRhdGEuYXJyaXZhbEFkZGl0aW9uYWxJbmZvLFxuICAgMTIwXHQgICAgICAgICAgICAgICAgICAgICAgICBkZXBhcnR1cmVUaW1lOiBkYXRhLmRlcGFydHVyZVRpbWUsXG4gICAxMjFcdCAgICAgICAgICAgICAgICAgICAgICAgIGV4aXRJbnN0cnVjdGlvbnM6IGRhdGEuZXhpdEluc3RydWN0aW9ucyxcbiAgIDEyMlx0ICAgICAgICAgICAgICAgICAgICAgICAgZGVwYXJ0dXJlQWRkaXRpb25hbEluZm86IGRhdGEuZGVwYXJ0dXJlQWRkaXRpb25hbEluZm8sXG4gICAxMjNcdCAgICAgICAgICAgICAgICAgICAgICAgIHdpZmlOYW1lOiBkYXRhLndpZmlOYW1lLFxuICAgMTI0XHQgICAgICAgICAgICAgICAgICAgICAgICB3aWZpUGFzc3dvcmQ6IGRhdGEud2lmaVBhc3N3b3JkLFxuICAgMTI1XHQgICAgICAgICAgICAgICAgICAgICAgICBob3VzZVJ1bGVzOiBkYXRhLmhvdXNlUnVsZXMsXG4gICAxMjZcdCAgICAgICAgICAgICAgICAgICAgICAgIG93bmVyQ29udGFjdDogZGF0YS5vd25lckNvbnRhY3QsXG4gICAxMjdcdCAgICAgICAgICAgICAgICAgICAgICAgIG93bmVyTmFtZTogZGF0YS5vd25lck5hbWUsXG4gICAxMjhcdCAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYWxJbmZvOiBkYXRhLmdlbmVyYWxJbmZvLFxuICAgMTI5XHQgICAgICAgICAgICAgICAgICAgICAgICByZWNvbW1lbmRhdGlvbnM6IHtcbiAgIDEzMFx0ICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVNYW55OiB7fSxcbiAgIDEzMVx0ICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGU6IGRhdGEucmVjb21tZW5kYXRpb25zLm1hcChyZWMgPT4gKHtcbiAgIDEzMlx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHJlYy5uYW1lLFxuICAgMTMzXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogcmVjLmFkZHJlc3MgfHwgJycsXG4gICAxMzRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogcmVjLmRlc2NyaXB0aW9uIHx8ICcnLFxuICAgMTM1XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogcmVjLnR5cGVcbiAgIDEzNlx0ICAgICAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgIDEzN1x0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgMTM4XHQgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgIDEzOVx0XG4gICAxNDBcdCAgICAgICAgICAgICAgICAgICAgICAvLyBFbnZveWVyIHVuZSByZXF1w6p0ZSBQVVQgcG91ciBtZXR0cmUgw6Agam91ciBsZXMgZG9ubsOpZXNcbiAgIDE0MVx0ICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucHV0KGBodHRwOi8vbG9jYWxob3N0OjMwMDEvYXBpL3N0YXkvJHtkYXRhLmlkfWAsIHByaXNtYURhdGEpO1xuICAgMTQyXHRcbiAgIDE0M1x0ICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgMTQ0XHQgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRG9ubsOpZXMgbWlzZXMgw6Agam91ciBhdmVjIHN1Y2PDqHM6JywgcmVzcG9uc2UuZGF0YSk7XG4gICAxNDVcdFxuICAgMTQ2XHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBNZXR0cmUgw6Agam91ciBsZSBzdGF0ZSBib29rRGF0YSBhdmVjIGxlcyBkb25uw6llcyByw6ljdXDDqXLDqWVzXG4gICAxNDdcdCAgICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKHJlc3BvbnNlLmRhdGEpO1xuICAgMTQ4XHRcbiAgIDE0OVx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2F1dmVnYXJkZXIgbGVzIGRvbm7DqWVzIG1pc2VzIMOgIGpvdXIgZGFucyBsZSBsb2NhbFN0b3JhZ2VcbiAgIDE1MFx0ICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuZGF0YSkpO1xuICAgMTUxXHRcbiAgIDE1Mlx0ICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3Ryw6llcyBhdmVjIHN1Y2PDqHMhJyk7XG4gICAxNTNcdCAgICAgICAgICAgICAgICAgICAgICB9XG4gICAxNTRcdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgIDE1NVx0ICAgICAgICAgICAgICAgICAgICAgIC8vIFBhcyBkJ0lELCBkb25jIG9uIG1ldCBzaW1wbGVtZW50IMOgIGpvdXIgbGUgc3RhdGVcbiAgIDE1Nlx0ICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xuICAgMTU3XHQgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgMTU4XHQgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3Ryw6llcyBhdmVjIHN1Y2PDqHMhJyk7XG4gICAxNTlcdCAgICAgICAgICAgICAgICAgICAgfVxuICAgMTYwXHQgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgMTYxXHQgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBsb3JzIGRlIGxhIG1pc2Ugw6Agam91ciBkZXMgZG9ubsOpZXM6JywgZXJyb3IpO1xuICAgMTYyXHQgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdVbmUgZXJyZXVyIGVzdCBzdXJ2ZW51ZSBsb3JzIGRlIGxhIG1pc2Ugw6Agam91ciBkZXMgZG9ubsOpZXMuJyk7XG4gICAxNjNcdCAgICAgICAgICAgICAgICAgIH1cbiAgIDE2NFx0ICAgICAgICAgICAgICAgIH19XG4gICAxNjVcdCAgICAgICAgICAgICAgLz5cbiAgIDE2Nlx0ICAgICAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMTY3XHQgICAgICAgICAgICAgICl9XG4gICAxNjhcdCAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMTY5XHQgICAgICA8L2Rpdj5cbiAgIDE3MFx0XG4gICAxNzFcdCAgICAgIDxzdHlsZSBqc3ggZ2xvYmFsPntgXG5cbkRpZmYgYmV0d2VlbiBvbGRTdHIgYW5kIHRoZSBzcGVjaWZpZWQgcmVnaW9uIGlzOlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLS0tIG9sZFN0clxuKysrIHJlZ2lvbkNvbnRlbnRcbkBAIC0xLDkgKzEsNyBAQFxuICAgICAgICAgICAgICAgICBvblN1Ym1pdD17YXN5bmMgKGRhdGEpID0+IHtcbi0gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRG9ubsOpZXMgZHUgZm9ybXVsYWlyZSBzb3VtaXNlczonLCBkYXRhKTtcbiBcbiAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaWQpIHtcbi0gICAgICAgICAgICAgICAgICAgICAgLy8gUHLDqXBhcmVyIGxlcyBkb25uw6llcyBwb3VyIFByaXNtYVxuICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmlzbWFEYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGFycml2YWxUaW1lOiBkYXRhLmFycml2YWxUaW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc0luc3RydWN0aW9uczogZGF0YS5hY2Nlc3NJbnN0cnVjdGlvbnMsXG5AQCAtMTcsOSArMTUsOCBAQFxuICAgICAgICAgICAgICAgICAgICAgICAgIG93bmVyQ29udGFjdDogZGF0YS5vd25lckNvbnRhY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgb3duZXJOYW1lOiBkYXRhLm93bmVyTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmFsSW5mbzogZGF0YS5nZW5lcmFsSW5mbyxcbi0gICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3JtYXQgc3DDqWNpZmlxdWUgcG91ciBsZXMgcmVsYXRpb25zIGRhbnMgUHJpc21hXG4gICAgICAgICAgICAgICAgICAgICAgICAgcmVjb21tZW5kYXRpb25zOiB7XG4tICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVNYW55OiB7fSwgLy8gU3VwcHJpbWVyIHRvdXRlcyBsZXMgcmVjb21tYW5kYXRpb25zIGV4aXN0YW50ZXNcbisgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZU1hbnk6IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlOiBkYXRhLnJlY29tbWVuZGF0aW9ucy5tYXAocmVjID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHJlYy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiByZWMuYWRkcmVzcyB8fCAnJyxcbkBAIC01NCwzICs1MSw2IEBAXG4gICAgICAgICAgICAgICAgICAgICBhbGVydCgnVW5lIGVycmV1ciBlc3Qgc3VydmVudWUgbG9ycyBkZSBsYSBtaXNlIMOgIGpvdXIgZGVzIGRvbm7DqWVzLicpO1xuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgfX1cbisgICAgICAgICAgICAgIC8+XG4rICAgICAgICAgICAgPC9tb3Rpb24uZGl2PlxuKyAgICAgICAgICAgICAgKX1cblxuXG5GaXggZmFpbGVkIHN0cl9yZXBsYWNlX2VudHJpZXMgYWNjb3JkaW5nbHkgYW5kIHRyeSBhZ2Fpbi5cbiIsImlzRXJyb3IiOnRydWUsInJlcXVlc3RJZCI6IiJ9fSwiMjJlYmRlZGMtMjM2OC00YWQ4LWI2MTEtMTI1MWY0MWI2NzUwO3Rvb2x1XzAxN2kyQVV3cDhXTER1enNjOEtyWjlIYiI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4OlxuICAgMTEwXHQgICAgICAgICAgICAgIDxCb29rRWRpdEZvcm1cbiAgIDExMVx0ICAgICAgICAgICAgICAgIGluaXRpYWxEYXRhPXtib29rRGF0YSB8fCB1bmRlZmluZWR9XG4gICAxMTJcdCAgICAgICAgICAgICAgICBvblN1Ym1pdD17YXN5bmMgKGRhdGEpID0+IHtcbiAgIDExM1x0XG4gICAxMTRcdCAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAxMTVcdCAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaWQpIHtcbiAgIDExNlx0ICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByaXNtYURhdGEgPSB7XG4gICAxMTdcdCAgICAgICAgICAgICAgICAgICAgICAgIGFycml2YWxUaW1lOiBkYXRhLmFycml2YWxUaW1lLFxuICAgMTE4XHQgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NJbnN0cnVjdGlvbnM6IGRhdGEuYWNjZXNzSW5zdHJ1Y3Rpb25zLFxuICAgMTE5XHQgICAgICAgICAgICAgICAgICAgICAgICBhcnJpdmFsQWRkaXRpb25hbEluZm86IGRhdGEuYXJyaXZhbEFkZGl0aW9uYWxJbmZvLFxuICAgMTIwXHQgICAgICAgICAgICAgICAgICAgICAgICBkZXBhcnR1cmVUaW1lOiBkYXRhLmRlcGFydHVyZVRpbWUsXG4gICAxMjFcdCAgICAgICAgICAgICAgICAgICAgICAgIGV4aXRJbnN0cnVjdGlvbnM6IGRhdGEuZXhpdEluc3RydWN0aW9ucyxcbiAgIDEyMlx0ICAgICAgICAgICAgICAgICAgICAgICAgZGVwYXJ0dXJlQWRkaXRpb25hbEluZm86IGRhdGEuZGVwYXJ0dXJlQWRkaXRpb25hbEluZm8sXG4gICAxMjNcdCAgICAgICAgICAgICAgICAgICAgICAgIHdpZmlOYW1lOiBkYXRhLndpZmlOYW1lLFxuICAgMTI0XHQgICAgICAgICAgICAgICAgICAgICAgICB3aWZpUGFzc3dvcmQ6IGRhdGEud2lmaVBhc3N3b3JkLFxuICAgMTI1XHQgICAgICAgICAgICAgICAgICAgICAgICBob3VzZVJ1bGVzOiBkYXRhLmhvdXNlUnVsZXMsXG4gICAxMjZcdCAgICAgICAgICAgICAgICAgICAgICAgIG93bmVyQ29udGFjdDogZGF0YS5vd25lckNvbnRhY3QsXG4gICAxMjdcdCAgICAgICAgICAgICAgICAgICAgICAgIG93bmVyTmFtZTogZGF0YS5vd25lck5hbWUsXG4gICAxMjhcdCAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYWxJbmZvOiBkYXRhLmdlbmVyYWxJbmZvLFxuICAgMTI5XHQgICAgICAgICAgICAgICAgICAgICAgICByZWNvbW1lbmRhdGlvbnM6IHtcbiAgIDEzMFx0ICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVNYW55OiB7fSxcbiAgIDEzMVx0ICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGU6IGRhdGEucmVjb21tZW5kYXRpb25zLm1hcChyZWMgPT4gKHtcbiAgIDEzMlx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHJlYy5uYW1lLFxuICAgMTMzXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogcmVjLmFkZHJlc3MgfHwgJycsXG4gICAxMzRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogcmVjLmRlc2NyaXB0aW9uIHx8ICcnLFxuICAgMTM1XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogcmVjLnR5cGVcbiAgIDEzNlx0ICAgICAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgIDEzN1x0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgMTM4XHQgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgIDEzOVx0XG4gICAxNDBcdCAgICAgICAgICAgICAgICAgICAgICAvLyBFbnZveWVyIHVuZSByZXF1w6p0ZSBQVVQgcG91ciBtZXR0cmUgw6Agam91ciBsZXMgZG9ubsOpZXNcbiAgIDE0MVx0ICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucHV0KGBodHRwOi8vbG9jYWxob3N0OjMwMDEvYXBpL3N0YXkvJHtkYXRhLmlkfWAsIHByaXNtYURhdGEpO1xuICAgMTQyXHRcbiAgIDE0M1x0ICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgMTQ0XHQgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRG9ubsOpZXMgbWlzZXMgw6Agam91ciBhdmVjIHN1Y2PDqHM6JywgcmVzcG9uc2UuZGF0YSk7XG4gICAxNDVcdFxuICAgMTQ2XHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBNZXR0cmUgw6Agam91ciBsZSBzdGF0ZSBib29rRGF0YSBhdmVjIGxlcyBkb25uw6llcyByw6ljdXDDqXLDqWVzXG4gICAxNDdcdCAgICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKHJlc3BvbnNlLmRhdGEpO1xuICAgMTQ4XHRcbiAgIDE0OVx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2F1dmVnYXJkZXIgbGVzIGRvbm7DqWVzIG1pc2VzIMOgIGpvdXIgZGFucyBsZSBsb2NhbFN0b3JhZ2VcbiAgIDE1MFx0ICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuZGF0YSkpO1xuICAgMTUxXHRcbiAgIDE1Mlx0ICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3Ryw6llcyBhdmVjIHN1Y2PDqHMhJyk7XG4gICAxNTNcdCAgICAgICAgICAgICAgICAgICAgICB9XG4gICAxNTRcdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgIDE1NVx0ICAgICAgICAgICAgICAgICAgICAgIC8vIFBhcyBkJ0lELCBkb25jIG9uIG1ldCBzaW1wbGVtZW50IMOgIGpvdXIgbGUgc3RhdGVcbiAgIDE1Nlx0ICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xuICAgMTU3XHQgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgMTU4XHQgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3Ryw6llcyBhdmVjIHN1Y2PDqHMhJyk7XG4gICAxNTlcdCAgICAgICAgICAgICAgICAgICAgfVxuICAgMTYwXHQgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgMTYxXHQgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBsb3JzIGRlIGxhIG1pc2Ugw6Agam91ciBkZXMgZG9ubsOpZXM6JywgZXJyb3IpO1xuICAgMTYyXHQgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdVbmUgZXJyZXVyIGVzdCBzdXJ2ZW51ZSBsb3JzIGRlIGxhIG1pc2Ugw6Agam91ciBkZXMgZG9ubsOpZXMuJyk7XG4gICAxNjNcdCAgICAgICAgICAgICAgICAgIH1cbiAgIDE2NFx0ICAgICAgICAgICAgICAgIH19XG4gICAxNjVcdCAgICAgICAgICAgICAgLz5cblRvdGFsIGxpbmVzIGluIGZpbGU6IDE4MlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiOGRmYmRlOWMtMTQ2MC00OWExLWIzNzUtMDBlY2E2MjUwYjIxO3Rvb2x1XzAxVHRjSDZTdE1LcmNiQ29UOGVNMnp6WCI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAxMDhcdCAgICAgICAgICAgICAgKX1cbiAgIDEwOVx0XG4gICAxMTBcdCAgICAgICAgICAgICAgPEJvb2tFZGl0Rm9ybVxuICAgMTExXHQgICAgICAgICAgICAgICAgaW5pdGlhbERhdGE9e2Jvb2tEYXRhIHx8IHVuZGVmaW5lZH1cbiAgIDExMlx0ICAgICAgICAgICAgICAgIG9uU3VibWl0PXthc3luYyAoZGF0YSwgcmVzZXRNb2RpZmllZFN0YXRlKSA9PiB7XG4gICAxMTNcdCAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEb25uw6llcyBkdSBmb3JtdWxhaXJlIHNvdW1pc2VzOicsIGRhdGEpO1xuICAgMTE0XHRcbiAgIDExNVx0ICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgIDExNlx0ICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5pZCkge1xuICAgMTE3XHQgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJpc21hRGF0YSA9IHtcbiAgIDExOFx0ICAgICAgICAgICAgICAgICAgICAgICAgYXJyaXZhbFRpbWU6IGRhdGEuYXJyaXZhbFRpbWUsXG4gICAxMTlcdCAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc0luc3RydWN0aW9uczogZGF0YS5hY2Nlc3NJbnN0cnVjdGlvbnMsXG4gICAxMjBcdCAgICAgICAgICAgICAgICAgICAgICAgIGFycml2YWxBZGRpdGlvbmFsSW5mbzogZGF0YS5hcnJpdmFsQWRkaXRpb25hbEluZm8sXG4gICAxMjFcdCAgICAgICAgICAgICAgICAgICAgICAgIGRlcGFydHVyZVRpbWU6IGRhdGEuZGVwYXJ0dXJlVGltZSxcbiAgIDEyMlx0ICAgICAgICAgICAgICAgICAgICAgICAgZXhpdEluc3RydWN0aW9uczogZGF0YS5leGl0SW5zdHJ1Y3Rpb25zLFxuICAgMTIzXHQgICAgICAgICAgICAgICAgICAgICAgICBkZXBhcnR1cmVBZGRpdGlvbmFsSW5mbzogZGF0YS5kZXBhcnR1cmVBZGRpdGlvbmFsSW5mbyxcbiAgIDEyNFx0ICAgICAgICAgICAgICAgICAgICAgICAgd2lmaU5hbWU6IGRhdGEud2lmaU5hbWUsXG4gICAxMjVcdCAgICAgICAgICAgICAgICAgICAgICAgIHdpZmlQYXNzd29yZDogZGF0YS53aWZpUGFzc3dvcmQsXG4gICAxMjZcdCAgICAgICAgICAgICAgICAgICAgICAgIGhvdXNlUnVsZXM6IGRhdGEuaG91c2VSdWxlcyxcbiAgIDEyN1x0ICAgICAgICAgICAgICAgICAgICAgICAgb3duZXJDb250YWN0OiBkYXRhLm93bmVyQ29udGFjdCxcbiAgIDEyOFx0ICAgICAgICAgICAgICAgICAgICAgICAgb3duZXJOYW1lOiBkYXRhLm93bmVyTmFtZSxcbiAgIDEyOVx0ICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbEluZm86IGRhdGEuZ2VuZXJhbEluZm8sXG4gICAxMzBcdCAgICAgICAgICAgICAgICAgICAgICAgIHJlY29tbWVuZGF0aW9uczoge1xuICAgMTMxXHQgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZU1hbnk6IHt9LFxuICAgMTMyXHQgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZTogZGF0YS5yZWNvbW1lbmRhdGlvbnMubWFwKHJlYyA9PiAoe1xuICAgMTMzXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcmVjLm5hbWUsXG4gICAxMzRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiByZWMuYWRkcmVzcyB8fCAnJyxcbiAgIDEzNVx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiByZWMuZGVzY3JpcHRpb24gfHwgJycsXG4gICAxMzZcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiByZWMudHlwZVxuICAgMTM3XHQgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgMTM4XHQgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAxMzlcdCAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgMTQwXHRcbiAgIDE0MVx0ICAgICAgICAgICAgICAgICAgICAgIC8vIEVudm95ZXIgdW5lIHJlcXXDqnRlIFBVVCBwb3VyIG1ldHRyZSDDoCBqb3VyIGxlcyBkb25uw6llc1xuICAgMTQyXHQgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wdXQoYGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMS9hcGkvc3RheS8ke2RhdGEuaWR9YCwgcHJpc21hRGF0YSk7XG4gICAxNDNcdFxuICAgMTQ0XHQgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAxNDVcdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEb25uw6llcyBtaXNlcyDDoCBqb3VyIGF2ZWMgc3VjY8OoczonLCByZXNwb25zZS5kYXRhKTtcbiAgIDE0Nlx0XG4gICAxNDdcdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ldHRyZSDDoCBqb3VyIGxlIHN0YXRlIGJvb2tEYXRhIGF2ZWMgbGVzIGRvbm7DqWVzIHLDqWN1cMOpcsOpZXNcbiAgIDE0OFx0ICAgICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEocmVzcG9uc2UuZGF0YSk7XG4gICAxNDlcdFxuICAgMTUwXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBTYXV2ZWdhcmRlciBsZXMgZG9ubsOpZXMgbWlzZXMgw6Agam91ciBkYW5zIGxlIGxvY2FsU3RvcmFnZVxuICAgMTUxXHQgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShyZXNwb25zZS5kYXRhKSk7XG4gICAxNTJcdFxuICAgMTUzXHQgICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgnTW9kaWZpY2F0aW9ucyBlbnJlZ2lzdHLDqWVzIGF2ZWMgc3VjY8OocyEnKTtcbiAgIDE1NFx0XG4gICAxNTVcdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIFLDqWluaXRpYWxpc2VyIGwnw6l0YXQgaXNNb2RpZmllZCBkYW5zIGxlIGNvbXBvc2FudCBlbmZhbnRcbiAgIDE1Nlx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc2V0TW9kaWZpZWRTdGF0ZSkge1xuICAgMTU3XHQgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TW9kaWZpZWRTdGF0ZSgpO1xuICAgMTU4XHQgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAxNTlcdCAgICAgICAgICAgICAgICAgICAgICB9XG4gICAxNjBcdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgIDE2MVx0ICAgICAgICAgICAgICAgICAgICAgIC8vIFBhcyBkJ0lELCBkb25jIG9uIG1ldCBzaW1wbGVtZW50IMOgIGpvdXIgbGUgc3RhdGVcbiAgIDE2Mlx0ICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xuICAgMTYzXHQgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgMTY0XHQgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3Ryw6llcyBhdmVjIHN1Y2PDqHMhJyk7XG4gICAxNjVcdFxuICAgMTY2XHQgICAgICAgICAgICAgICAgICAgICAgLy8gUsOpaW5pdGlhbGlzZXIgbCfDqXRhdCBpc01vZGlmaWVkIGRhbnMgbGUgY29tcG9zYW50IGVuZmFudFxuICAgMTY3XHQgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc2V0TW9kaWZpZWRTdGF0ZSkge1xuICAgMTY4XHQgICAgICAgICAgICAgICAgICAgICAgICByZXNldE1vZGlmaWVkU3RhdGUoKTtcbiAgIDE2OVx0ICAgICAgICAgICAgICAgICAgICAgIH1cbiAgIDE3MFx0ICAgICAgICAgICAgICAgICAgICB9XG4gICAxNzFcdCAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxNzJcdCAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgbWlzZSDDoCBqb3VyIGRlcyBkb25uw6llczonLCBlcnJvcik7XG4gICAxNzNcdCAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1VuZSBlcnJldXIgZXN0IHN1cnZlbnVlIGxvcnMgZGUgbGEgbWlzZSDDoCBqb3VyIGRlcyBkb25uw6llcy4nKTtcbiAgIDE3NFx0ICAgICAgICAgICAgICAgICAgfVxuICAgMTc1XHQgICAgICAgICAgICAgICAgfX1cbiAgIDE3Nlx0ICAgICAgICAgICAgICAvPlxuICAgMTc3XHQgICAgICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAxNzhcdCAgICAgICAgICAgICAgKX1cbiAgIDE3OVx0ICAgICAgICA8L21vdGlvbi5kaXY+XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjc4MjFjNDM2LTdiYzMtNGY4MC05MzY3LTU2YzliMDMzMzEwMTt0b29sdV8wMTlRVUtRa2RCc0RqREdtaDVob0cyNEYiOnsicGhhc2UiOjYsInJlc3VsdCI6eyJ0ZXh0IjoiRmFpbGVkIHRvIGVkaXQgdGhlIGZpbGUgc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeC4gU2VlIGJlbG93IGZvciBkZXRhaWxzLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuTm8gcmVwbGFjZW1lbnQgd2FzIHBlcmZvcm1lZCwgb2xkU3RyIGRpZCBub3QgYXBwZWFyIHZlcmJhdGltIGluIHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3guXG5UaGUgY29udGVudCBpbiB0aGUgc3BlY2lmaWVkIHJlZ2lvbiBpczpcbiAgICA4MFx0ICAvLyBTdXJ2ZWlsbGVyIGxlcyBjaGFuZ2VtZW50cyBkYW5zIGxlIGZvcm11bGFpcmVcbiAgICA4MVx0ICBjb25zdCBmb3JtVmFsdWVzID0gd2F0Y2goKTtcbiAgICA4Mlx0XG4gICAgODNcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICA4NFx0ICAgIGlmICghb3JpZ2luYWxWYWx1ZXMpIHtcbiAgICA4NVx0ICAgICAgc2V0T3JpZ2luYWxWYWx1ZXMoSlNPTi5zdHJpbmdpZnkoY29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzKGluaXRpYWxEYXRhKSkpO1xuICAgIDg2XHQgICAgfVxuICAgIDg3XHRcbiAgICA4OFx0ICAgIGNvbnNvbGUubG9nKCdmb3JtVmFsdWVzJywgZm9ybVZhbHVlcyk7XG4gICAgODlcdCAgICBjb25zdCBjdXJyZW50VmFsdWVzID0gSlNPTi5zdHJpbmdpZnkoZm9ybVZhbHVlcyk7XG4gICAgOTBcdCAgICBzZXRJc01vZGlmaWVkKGN1cnJlbnRWYWx1ZXMgIT09IG9yaWdpbmFsVmFsdWVzKTtcbiAgICA5MVx0ICB9LCBbZm9ybVZhbHVlcywgb3JpZ2luYWxWYWx1ZXMsIGluaXRpYWxEYXRhXSk7XG4gICAgOTJcdFxuICAgIDkzXHQgIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XG4gICAgOTRcdCAgICBpZiAoIWlzTW9kaWZpZWQpIHtcbiAgICA5NVx0ICAgICAgcm91dGVyLnB1c2goJy8nKTtcbiAgICA5Nlx0ICAgICAgcmV0dXJuO1xuICAgIDk3XHQgICAgfVxuXG5EaWZmIGJldHdlZW4gb2xkU3RyIGFuZCB0aGUgc3BlY2lmaWVkIHJlZ2lvbiBpczpcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi0tLSBvbGRTdHJcbisrKyByZWdpb25Db250ZW50XG5AQCAtMSwxMCArMSwxMCBAQFxuLSAgdXNlRWZmZWN0KCgpID0+IHtcbi0gICAgLy8gU2F1dmVnYXJkZXIgbGVzIHZhbGV1cnMgaW5pdGlhbGVzIHBvdXIgY29tcGFyYWlzb25cbiAgICAgaWYgKCFvcmlnaW5hbFZhbHVlcykge1xuICAgICAgIHNldE9yaWdpbmFsVmFsdWVzKEpTT04uc3RyaW5naWZ5KGNvbnZlcnRCb29rRGF0YVRvRm9ybVZhbHVlcyhpbml0aWFsRGF0YSkpKTtcbiAgICAgfVxuIFxuLSAgICAvLyBWw6lyaWZpZXIgc2kgZGVzIG1vZGlmaWNhdGlvbnMgb250IMOpdMOpIGFwcG9ydMOpZXNcbisgICAgY29uc29sZS5sb2coJ2Zvcm1WYWx1ZXMnLCBmb3JtVmFsdWVzKTtcbiAgICAgY29uc3QgY3VycmVudFZhbHVlcyA9IEpTT04uc3RyaW5naWZ5KGZvcm1WYWx1ZXMpO1xuICAgICBzZXRJc01vZGlmaWVkKGN1cnJlbnRWYWx1ZXMgIT09IG9yaWdpbmFsVmFsdWVzKTtcbiAgIH0sIFtmb3JtVmFsdWVzLCBvcmlnaW5hbFZhbHVlcywgaW5pdGlhbERhdGFdKTtcbitcbisgIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XG5cblxuRml4IGZhaWxlZCBzdHJfcmVwbGFjZV9lbnRyaWVzIGFjY29yZGluZ2x5IGFuZCB0cnkgYWdhaW4uXG4iLCJpc0Vycm9yIjp0cnVlLCJyZXF1ZXN0SWQiOiIifX0sIjIwZTEyMDE2LTYyZDUtNDA3ZS1iZDU1LTI0NzIyOGM4YWNmNzt0b29sdV8wMUYzdmY3N0xSamFvdWRNTmsybjc2WWkiOnsicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4OlxuICAgIDgwXHQgIC8vIFN1cnZlaWxsZXIgbGVzIGNoYW5nZW1lbnRzIGRhbnMgbGUgZm9ybXVsYWlyZVxuICAgIDgxXHQgIGNvbnN0IGZvcm1WYWx1ZXMgPSB3YXRjaCgpO1xuICAgIDgyXHRcbiAgICA4M1x0ICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIDg0XHQgICAgaWYgKCFvcmlnaW5hbFZhbHVlcykge1xuICAgIDg1XHQgICAgICBzZXRPcmlnaW5hbFZhbHVlcyhKU09OLnN0cmluZ2lmeShjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMoaW5pdGlhbERhdGEpKSk7XG4gICAgODZcdCAgICB9XG4gICAgODdcdFxuICAgIDg4XHQgICAgY29uc29sZS5sb2coJ2Zvcm1WYWx1ZXMnLCBmb3JtVmFsdWVzKTtcbiAgICA4OVx0ICAgIGNvbnN0IGN1cnJlbnRWYWx1ZXMgPSBKU09OLnN0cmluZ2lmeShmb3JtVmFsdWVzKTtcbiAgICA5MFx0ICAgIHNldElzTW9kaWZpZWQoY3VycmVudFZhbHVlcyAhPT0gb3JpZ2luYWxWYWx1ZXMpO1xuICAgIDkxXHQgIH0sIFtmb3JtVmFsdWVzLCBvcmlnaW5hbFZhbHVlcywgaW5pdGlhbERhdGFdKTtcbiAgICA5Mlx0XG4gICAgOTNcdCAgY29uc3QgaGFuZGxlRm9ybVN1Ym1pdCA9IChkYXRhOiBCb29rRm9ybVZhbHVlc1R5cGUpID0+IHtcbiAgICA5NFx0ICAgIGlmICghaXNNb2RpZmllZCkge1xuICAgIDk1XHQgICAgICByb3V0ZXIucHVzaCgnLycpO1xuVG90YWwgbGluZXMgaW4gZmlsZTogMzYyXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI1NTUzNDIwMS00M2FlLTQ5YmUtOGViNS1mMzM3MWNhN2QzNDY7dG9vbHVfMDE3ZEZYVGpaUjJONFZ3cVZOQ2tZNll1Ijp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeC5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgIDc5XHRcbiAgICA4MFx0ICAvLyBTdXJ2ZWlsbGVyIGxlcyBjaGFuZ2VtZW50cyBkYW5zIGxlIGZvcm11bGFpcmVcbiAgICA4MVx0ICBjb25zdCBmb3JtVmFsdWVzID0gd2F0Y2goKTtcbiAgICA4Mlx0XG4gICAgODNcdCAgLy8gRWZmZXQgcG91ciBpbml0aWFsaXNlciBsZXMgdmFsZXVycyBvcmlnaW5hbGVzXG4gICAgODRcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICA4NVx0ICAgIC8vIENoYXF1ZSBmb2lzIHF1ZSBpbml0aWFsRGF0YSBjaGFuZ2UsIG1ldHRyZSDDoCBqb3VyIGxlcyB2YWxldXJzIG9yaWdpbmFsZXNcbiAgICA4Nlx0ICAgIGNvbnN0IG5ld09yaWdpbmFsVmFsdWVzID0gSlNPTi5zdHJpbmdpZnkoY29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzKGluaXRpYWxEYXRhKSk7XG4gICAgODdcdCAgICBzZXRPcmlnaW5hbFZhbHVlcyhuZXdPcmlnaW5hbFZhbHVlcyk7XG4gICAgODhcdCAgfSwgW2luaXRpYWxEYXRhXSk7XG4gICAgODlcdFxuICAgIDkwXHQgIC8vIEVmZmV0IHBvdXIgZMOpdGVjdGVyIGxlcyBtb2RpZmljYXRpb25zXG4gICAgOTFcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICA5Mlx0ICAgIGlmIChvcmlnaW5hbFZhbHVlcykge1xuICAgIDkzXHQgICAgICAvLyBWw6lyaWZpZXIgc2kgZGVzIG1vZGlmaWNhdGlvbnMgb250IMOpdMOpIGFwcG9ydMOpZXNcbiAgICA5NFx0ICAgICAgY29uc3QgY3VycmVudFZhbHVlcyA9IEpTT04uc3RyaW5naWZ5KGZvcm1WYWx1ZXMpO1xuICAgIDk1XHQgICAgICBzZXRJc01vZGlmaWVkKGN1cnJlbnRWYWx1ZXMgIT09IG9yaWdpbmFsVmFsdWVzKTtcbiAgICA5Nlx0ICAgIH1cbiAgICA5N1x0ICB9LCBbZm9ybVZhbHVlcywgb3JpZ2luYWxWYWx1ZXNdKTtcbiAgICA5OFx0XG4gICAgOTlcdCAgY29uc3QgaGFuZGxlRm9ybVN1Ym1pdCA9IChkYXRhOiBCb29rRm9ybVZhbHVlc1R5cGUpID0+IHtcbiAgIDEwMFx0ICAgIGlmICghaXNNb2RpZmllZCkge1xuICAgMTAxXHQgICAgICByb3V0ZXIucHVzaCgnLycpO1xuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJjNWU5ZDFlYi1lMDdkLTQyYjEtYWFlYy1lZGU2Yzg2MjMzNjk7dG9vbHVfMDFXNDhwR2liWk5ra1d5M1dMYllicmF4Ijp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlBhcnRpYWxseSBlZGl0ZWQgdGhlIGZpbGUgc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeC4gU2VlIGJlbG93IGZvciBkZXRhaWxzLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuTm8gcmVwbGFjZW1lbnQgd2FzIHBlcmZvcm1lZCwgb2xkU3RyIGRpZCBub3QgYXBwZWFyIHZlcmJhdGltIGluIHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3guXG5UaGUgY29udGVudCBpbiB0aGUgc3BlY2lmaWVkIHJlZ2lvbiBpczpcbiAgICA5NVx0ICAgICAgc2V0SXNNb2RpZmllZChjdXJyZW50VmFsdWVzICE9PSBvcmlnaW5hbFZhbHVlcyk7XG4gICAgOTZcdCAgICB9XG4gICAgOTdcdCAgfSwgW2Zvcm1WYWx1ZXMsIG9yaWdpbmFsVmFsdWVzXSk7XG4gICAgOThcdFxuICAgIDk5XHQgIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XG4gICAxMDBcdCAgICBpZiAoIWlzTW9kaWZpZWQpIHtcbiAgIDEwMVx0ICAgICAgcm91dGVyLnB1c2goJy8nKTtcbiAgIDEwMlx0ICAgICAgcmV0dXJuO1xuICAgMTAzXHQgICAgfVxuICAgMTA0XHRcbiAgIDEwNVx0ICAgIHNldElzU2F2aW5nKHRydWUpO1xuICAgMTA2XHQgICAgY29uc3QgYm9va0RhdGEgPSBjb252ZXJ0Rm9ybVZhbHVlc1RvQm9va0RhdGEoZGF0YSk7XG4gICAxMDdcdFxuICAgMTA4XHQgICAgaWYgKG9uU3VibWl0KSB7XG4gICAxMDlcdCAgICAgIGNvbnN0IHJlc2V0TW9kaWZpZWRTdGF0ZSA9ICgpID0+IHtcbiAgIDExMFx0ICAgICAgICBzZXRJc01vZGlmaWVkKGZhbHNlKTtcbiAgIDExMVx0ICAgICAgICBzZXRPcmlnaW5hbFZhbHVlcyhKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAxMTJcdCAgICAgIH07XG4gICAxMTNcdFxuICAgMTE0XHQgICAgICBvblN1Ym1pdChib29rRGF0YSwgcmVzZXRNb2RpZmllZFN0YXRlKTtcbiAgIDExNVx0ICAgIH1cbiAgIDExNlx0XG4gICAxMTdcdCAgICAgIHNldElzU2F2aW5nKGZhbHNlKTtcbiAgIDExOFx0ICB9O1xuICAgMTE5XHRcbiAgIDEyMFx0ICBjb25zdCBoYW5kbGVSZXR1cm5Ib21lID0gKCkgPT4ge1xuICAgMTIxXHQgICAgcm91dGVyLnB1c2goJy8nKTtcbiAgIDEyMlx0ICB9O1xuICAgMTIzXHRcblxuRGlmZiBiZXR3ZWVuIG9sZFN0ciBhbmQgdGhlIHNwZWNpZmllZCByZWdpb24gaXM6XG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4tLS0gb2xkU3RyXG4rKysgcmVnaW9uQ29udGVudFxuQEAgLTEsMjEgKzEsMjEgQEBcbiAgIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XG4tICAgIC8vIFNpIGF1Y3VuZSBtb2RpZmljYXRpb24sIHJlZGlyaWdlciB2ZXJzIGxhIHBhZ2UgZCdhY2N1ZWlsXG4gICAgIGlmICghaXNNb2RpZmllZCkge1xuICAgICAgIHJvdXRlci5wdXNoKCcvJyk7XG4gICAgICAgcmV0dXJuO1xuICAgICB9XG4gXG4tICAgIC8vIFNpIGRlcyBtb2RpZmljYXRpb25zIG9udCDDqXTDqSBlZmZlY3R1w6llcywgc291bWV0dHJlIGxlcyBkb25uw6llc1xuICAgICBzZXRJc1NhdmluZyh0cnVlKTtcbiAgICAgY29uc3QgYm9va0RhdGEgPSBjb252ZXJ0Rm9ybVZhbHVlc1RvQm9va0RhdGEoZGF0YSk7XG4gXG4gICAgIGlmIChvblN1Ym1pdCkge1xuLSAgICAgIC8vIFBhc3NlciBsZXMgZG9ubsOpZXMgYXUgY29tcG9zYW50IHBhcmVudCBxdWkgZ8OocmVyYSBsYSByZXF1w6p0ZSBQVVRcbi0gICAgICBvblN1Ym1pdChib29rRGF0YSk7XG4rICAgICAgY29uc3QgcmVzZXRNb2RpZmllZFN0YXRlID0gKCkgPT4ge1xuKyAgICAgICAgc2V0SXNNb2RpZmllZChmYWxzZSk7XG4rICAgICAgICBzZXRPcmlnaW5hbFZhbHVlcyhKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4rICAgICAgfTtcbitcbisgICAgICBvblN1Ym1pdChib29rRGF0YSwgcmVzZXRNb2RpZmllZFN0YXRlKTtcbiAgICAgfVxuIFxuLSAgICAvLyBSw6lpbml0aWFsaXNlciBsJ8OpdGF0IGRlIHNhdXZlZ2FyZGUgYXByw6hzIHVuIGNvdXJ0IGTDqWxhaVxuLSAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICBzZXRJc1NhdmluZyhmYWxzZSk7XG4tICAgIH0sIDEwMDApO1xuICAgfTtcbitcblxuXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlX2VudHJpZXNbMV06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICA0OVx0ICAgIHJlY29tbWVuZGF0aW9uczogdmFsdWVzLnJlY29tbWVuZGF0aW9ucyB8fCBbXSxcbiAgICA1MFx0ICB9O1xuICAgIDUxXHR9O1xuICAgIDUyXHRcbiAgICA1M1x0aW50ZXJmYWNlIEJvb2tFZGl0Rm9ybVByb3BzIHtcbiAgICA1NFx0ICBpbml0aWFsRGF0YT86IEJvb2tEYXRhO1xuICAgIDU1XHQgIG9uU3VibWl0PzogKGRhdGE6IEJvb2tEYXRhKSA9PiB2b2lkO1xuICAgIDU2XHR9XG4gICAgNTdcdFxuICAgIDU4XHRleHBvcnQgZnVuY3Rpb24gQm9va0VkaXRGb3JtKHsgaW5pdGlhbERhdGEsIG9uU3VibWl0IH06IEJvb2tFZGl0Rm9ybVByb3BzKSB7XG4gICAgNTlcdCAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG4gICAgNjBcdCAgY29uc3QgW2lzU2F2aW5nLCBzZXRJc1NhdmluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbkZpeCBmYWlsZWQgc3RyX3JlcGxhY2VfZW50cmllcyBhY2NvcmRpbmdseSBhbmQgdHJ5IGFnYWluLlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiODlmNGVjMTMtNzI2My00YzMzLWIyYzktMGRlMzkwNDc4ZDIwO3Rvb2x1XzAxUURRV0RIcnI2TFgySzc1azhjcGs5bSI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3guXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlX2VudHJpZXNbMF06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICA5NVx0ICAgICAgc2V0SXNNb2RpZmllZChjdXJyZW50VmFsdWVzICE9PSBvcmlnaW5hbFZhbHVlcyk7XG4gICAgOTZcdCAgICB9XG4gICAgOTdcdCAgfSwgW2Zvcm1WYWx1ZXMsIG9yaWdpbmFsVmFsdWVzXSk7XG4gICAgOThcdFxuICAgIDk5XHQgIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XG4gICAxMDBcdCAgICAvLyBTaSBhdWN1bmUgbW9kaWZpY2F0aW9uLCByZWRpcmlnZXIgdmVycyBsYSBwYWdlIGQnYWNjdWVpbFxuICAgMTAxXHQgICAgaWYgKCFpc01vZGlmaWVkKSB7XG4gICAxMDJcdCAgICAgIHJvdXRlci5wdXNoKCcvJyk7XG4gICAxMDNcdCAgICAgIHJldHVybjtcbiAgIDEwNFx0ICAgIH1cbiAgIDEwNVx0XG4gICAxMDZcdCAgICAvLyBTaSBkZXMgbW9kaWZpY2F0aW9ucyBvbnQgw6l0w6kgZWZmZWN0dcOpZXMsIHNvdW1ldHRyZSBsZXMgZG9ubsOpZXNcbiAgIDEwN1x0ICAgIHNldElzU2F2aW5nKHRydWUpO1xuICAgMTA4XHQgICAgY29uc3QgYm9va0RhdGEgPSBjb252ZXJ0Rm9ybVZhbHVlc1RvQm9va0RhdGEoZGF0YSk7XG4gICAxMDlcdFxuICAgMTEwXHQgICAgaWYgKG9uU3VibWl0KSB7XG4gICAxMTFcdCAgICAgIC8vIFBhc3NlciBsZXMgZG9ubsOpZXMgYXUgY29tcG9zYW50IHBhcmVudCBxdWkgZ8OocmVyYSBsYSByZXF1w6p0ZSBQVVRcbiAgIDExMlx0ICAgICAgb25TdWJtaXQoYm9va0RhdGEpO1xuICAgMTEzXHQgICAgfVxuICAgMTE0XHRcbiAgIDExNVx0ICAgIC8vIFLDqWluaXRpYWxpc2VyIGwnw6l0YXQgZGUgc2F1dmVnYXJkZSBhcHLDqHMgdW4gY291cnQgZMOpbGFpXG4gICAxMTZcdCAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgIDExN1x0ICAgICAgc2V0SXNTYXZpbmcoZmFsc2UpO1xuICAgMTE4XHQgICAgfSwgMTAwMCk7XG4gICAxMTlcdCAgfTtcbiAgIDEyMFx0XG4gICAxMjFcdCAgY29uc3QgaGFuZGxlUmV0dXJuSG9tZSA9ICgpID0+IHtcbiAgIDEyMlx0ICAgIHJvdXRlci5wdXNoKCcvJyk7XG4gICAxMjNcdCAgfTtcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiYTU0ZTFlMDItOGY4ZC00ODU2LWI0NjMtZTE1YmRmZmM5ZDNkO3Rvb2x1XzAxNWl2QmRuWTFRS1FBbmJGaTh1eWF4eiI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAxMDZcdCAgICAgICAgICAgICAgKX1cbiAgIDEwN1x0XG4gICAxMDhcdCAgICAgICAgICAgICAgPEJvb2tFZGl0Rm9ybVxuICAgMTA5XHQgICAgICAgICAgICAgICAgaW5pdGlhbERhdGE9e2Jvb2tEYXRhIHx8IHVuZGVmaW5lZH1cbiAgIDExMFx0ICAgICAgICAgICAgICAgIG9uU3VibWl0PXthc3luYyAoZGF0YSkgPT4ge1xuICAgMTExXHQgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRG9ubsOpZXMgZHUgZm9ybXVsYWlyZSBzb3VtaXNlczonLCBkYXRhKTtcbiAgIDExMlx0XG4gICAxMTNcdCAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAxMTRcdCAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaWQpIHtcblxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzFdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAxNDlcdCAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdib29rRGF0YScsIEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLmRhdGEpKTtcbiAgIDE1MFx0XG4gICAxNTFcdCAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdNb2RpZmljYXRpb25zIGVucmVnaXN0csOpZXMgYXZlYyBzdWNjw6hzIScpO1xuICAgMTUyXHRcbiAgIDE1M1x0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gTCfDqXRhdCBpc01vZGlmaWVkIHNlcmEgcsOpaW5pdGlhbGlzw6kgYXV0b21hdGlxdWVtZW50IGdyw6JjZSBhdXggcHJvcHNcbiAgIDE1NFx0ICAgICAgICAgICAgICAgICAgICAgIH1cbiAgIDE1NVx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgMTU2XHQgICAgICAgICAgICAgICAgICAgICAgLy8gUGFzIGQnSUQsIGRvbmMgb24gbWV0IHNpbXBsZW1lbnQgw6Agam91ciBsZSBzdGF0ZVxuICAgMTU3XHQgICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEoZGF0YSk7XG5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1syXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgMTU3XHQgICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEoZGF0YSk7XG4gICAxNThcdCAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAxNTlcdCAgICAgICAgICAgICAgICAgICAgICBhbGVydCgnTW9kaWZpY2F0aW9ucyBlbnJlZ2lzdHLDqWVzIGF2ZWMgc3VjY8OocyEnKTtcbiAgIDE2MFx0XG4gICAxNjFcdCAgICAgICAgICAgICAgICAgICAgICAvLyBMJ8OpdGF0IGlzTW9kaWZpZWQgc2VyYSByw6lpbml0aWFsaXPDqSBhdXRvbWF0aXF1ZW1lbnQgZ3LDomNlIGF1eCBwcm9wc1xuICAgMTYyXHQgICAgICAgICAgICAgICAgICAgIH1cbiAgIDE2M1x0ICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgIDE2NFx0ICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJldXIgbG9ycyBkZSBsYSBtaXNlIMOgIGpvdXIgZGVzIGRvbm7DqWVzOicsIGVycm9yKTtcbiAgIDE2NVx0ICAgICAgICAgICAgICAgICAgICBhbGVydCgnVW5lIGVycmV1ciBlc3Qgc3VydmVudWUgbG9ycyBkZSBsYSBtaXNlIMOgIGpvdXIgZGVzIGRvbm7DqWVzLicpO1xuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI0MGJiMzA1OS1jYmJjLTQ5ZTktODM5OS0yZTYxNjIwYjk1ZTM7dG9vbHVfMDFFVU04OHR4WERNcUhhY1JLRXVNNXRZIjp7InBoYXNlIjo2LCJyZXN1bHQiOnsidGV4dCI6IkZhaWxlZCB0byBlZGl0IHRoZSBmaWxlIHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3guIFNlZSBiZWxvdyBmb3IgZGV0YWlscy5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcbk5vIHJlcGxhY2VtZW50IHdhcyBwZXJmb3JtZWQsIG9sZFN0ciBkaWQgbm90IGFwcGVhciB2ZXJiYXRpbSBpbiBzcmMvY29tcG9uZW50cy9Cb29rRWRpdEZvcm0udHN4LlxuVGhlIGNvbnRlbnQgaW4gdGhlIHNwZWNpZmllZCByZWdpb24gaXM6XG4gICAgODZcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICA4N1x0ICAgIGNvbnNvbGUud2FybignaW5pdGlhbERhdGEnLCBpbml0aWFsRGF0YSlcbiAgICA4OFx0ICAgIC8vIENoYXF1ZSBmb2lzIHF1ZSBpbml0aWFsRGF0YSBjaGFuZ2UsIG1ldHRyZSDDoCBqb3VyIGxlcyB2YWxldXJzIG9yaWdpbmFsZXNcbiAgICA4OVx0ICAgIGNvbnN0IG5ld09yaWdpbmFsVmFsdWVzID0gSlNPTi5zdHJpbmdpZnkoY29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzKGluaXRpYWxEYXRhKSk7XG4gICAgOTBcdCAgICBzZXRPcmlnaW5hbFZhbHVlcyhuZXdPcmlnaW5hbFZhbHVlcyk7XG4gICAgOTFcdCAgfSwgW2luaXRpYWxEYXRhXSk7XG4gICAgOTJcdFxuICAgIDkzXHQgIC8vIEVmZmV0IHBvdXIgZMOpdGVjdGVyIGxlcyBtb2RpZmljYXRpb25zXG4gICAgOTRcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICA5NVx0ICAgIGlmIChvcmlnaW5hbFZhbHVlcyAmJiBmb3JtVmFsdWVzKSB7XG4gICAgOTZcdCAgICAgIC8vIFN1cHBvc29ucyBxdSdvbiBhIHByw6lhbGFibGVtZW50IG5vcm1hbGlzw6kgbGVzIHZhbGV1cnNcbiAgICA5N1x0ICAgICAgY29uc3Qgbm9ybWFsaXplZE9yaWdpbmFsID0gbm9ybWFsaXplRmxpZ2h0RGF0YShgJHtjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMoaW5pdGlhbERhdGEpfWApO1xuICAgIDk4XHQgICAgICBjb25zdCBub3JtYWxpemVkQ3VycmVudCA9IG5vcm1hbGl6ZUZsaWdodERhdGEoYCR7Zm9ybVZhbHVlc31gKTtcbiAgICA5OVx0ICAgICAgY29uc3QgbW9kaWZpZWQgPSAhaXNFcXVhbChub3JtYWxpemVkQ3VycmVudCwgbm9ybWFsaXplZE9yaWdpbmFsKTtcbiAgIDEwMFx0ICAgICAgY29uc29sZS5sb2coJ2lzTW9kaWZpZWQnLCBtb2RpZmllZCk7XG4gICAxMDFcdCAgICAgIHNldElzTW9kaWZpZWQobW9kaWZpZWQpO1xuXG5EaWZmIGJldHdlZW4gb2xkU3RyIGFuZCB0aGUgc3BlY2lmaWVkIHJlZ2lvbiBpczpcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi0tLSBvbGRTdHJcbisrKyByZWdpb25Db250ZW50XG5AQCAtMSw4ICsxLDggQEBcbisgICAgc2V0T3JpZ2luYWxWYWx1ZXMobmV3T3JpZ2luYWxWYWx1ZXMpO1xuKyAgfSwgW2luaXRpYWxEYXRhXSk7XG4rXG4gICAvLyBFZmZldCBwb3VyIGTDqXRlY3RlciBsZXMgbW9kaWZpY2F0aW9uc1xuICAgdXNlRWZmZWN0KCgpID0+IHtcbi0gICAgaWYgKG9yaWdpbmFsVmFsdWVzKSB7XG4tICAgICAgLy8gVsOpcmlmaWVyIHNpIGRlcyBtb2RpZmljYXRpb25zIG9udCDDqXTDqSBhcHBvcnTDqWVzXG4tICAgICAgY29uc3QgY3VycmVudFZhbHVlcyA9IEpTT04uc3RyaW5naWZ5KGZvcm1WYWx1ZXMpO1xuLSAgICAgIHNldElzTW9kaWZpZWQoY3VycmVudFZhbHVlcyAhPT0gb3JpZ2luYWxWYWx1ZXMpO1xuLSAgICB9XG4tICB9LCBbZm9ybVZhbHVlcywgb3JpZ2luYWxWYWx1ZXNdKTtcbisgICAgaWYgKG9yaWdpbmFsVmFsdWVzICYmIGZvcm1WYWx1ZXMpIHtcbisgICAgICAvLyBTdXBwb3NvbnMgcXUnb24gYSBwcsOpYWxhYmxlbWVudCBub3JtYWxpc8OpIGxlcyB2YWxldXJzXG4rICAgICAgY29uc3Qgbm9ybWFsaXplZE9yaWdpbmFsID0gbm9ybWFsaXplRmxpZ2h0RGF0YShgJHtjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMoaW5pdGlhbERhdGEpfWApO1xuXG5cbkZpeCBmYWlsZWQgc3RyX3JlcGxhY2VfZW50cmllcyBhY2NvcmRpbmdseSBhbmQgdHJ5IGFnYWluLlxuIiwiaXNFcnJvciI6dHJ1ZSwicmVxdWVzdElkIjoiIn19LCJhNDk2MzkxMC00MWEwLTQ5YzUtOTNjYS1mYmQyOThkY2IxNTg7dG9vbHVfMDE3aEFFWEhoQUN1RWJSb0hWRkhiM0RXIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeDpcbiAgICA4MFx0ICB9KTtcbiAgICA4MVx0XG4gICAgODJcdCAgLy8gU3VydmVpbGxlciBsZXMgY2hhbmdlbWVudHMgZGFucyBsZSBmb3JtdWxhaXJlXG4gICAgODNcdCAgY29uc3QgZm9ybVZhbHVlcyA9IHdhdGNoKCk7XG4gICAgODRcdFxuICAgIDg1XHQgIC8vIEVmZmV0IHBvdXIgaW5pdGlhbGlzZXIgbGVzIHZhbGV1cnMgb3JpZ2luYWxlc1xuICAgIDg2XHQgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgODdcdCAgICBjb25zb2xlLndhcm4oJ2luaXRpYWxEYXRhJywgaW5pdGlhbERhdGEpXG4gICAgODhcdCAgICAvLyBDaGFxdWUgZm9pcyBxdWUgaW5pdGlhbERhdGEgY2hhbmdlLCBtZXR0cmUgw6Agam91ciBsZXMgdmFsZXVycyBvcmlnaW5hbGVzXG4gICAgODlcdCAgICBjb25zdCBuZXdPcmlnaW5hbFZhbHVlcyA9IEpTT04uc3RyaW5naWZ5KGNvbnZlcnRCb29rRGF0YVRvRm9ybVZhbHVlcyhpbml0aWFsRGF0YSkpO1xuICAgIDkwXHQgICAgc2V0T3JpZ2luYWxWYWx1ZXMobmV3T3JpZ2luYWxWYWx1ZXMpO1xuICAgIDkxXHQgIH0sIFtpbml0aWFsRGF0YV0pO1xuICAgIDkyXHRcbiAgICA5M1x0ICAvLyBFZmZldCBwb3VyIGTDqXRlY3RlciBsZXMgbW9kaWZpY2F0aW9uc1xuICAgIDk0XHQgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgOTVcdCAgICBpZiAob3JpZ2luYWxWYWx1ZXMgJiYgZm9ybVZhbHVlcykge1xuICAgIDk2XHQgICAgICAvLyBTdXBwb3NvbnMgcXUnb24gYSBwcsOpYWxhYmxlbWVudCBub3JtYWxpc8OpIGxlcyB2YWxldXJzXG4gICAgOTdcdCAgICAgIGNvbnN0IG5vcm1hbGl6ZWRPcmlnaW5hbCA9IG5vcm1hbGl6ZUZsaWdodERhdGEoYCR7Y29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzKGluaXRpYWxEYXRhKX1gKTtcbiAgICA5OFx0ICAgICAgY29uc3Qgbm9ybWFsaXplZEN1cnJlbnQgPSBub3JtYWxpemVGbGlnaHREYXRhKGAke2Zvcm1WYWx1ZXN9YCk7XG4gICAgOTlcdCAgICAgIGNvbnN0IG1vZGlmaWVkID0gIWlzRXF1YWwobm9ybWFsaXplZEN1cnJlbnQsIG5vcm1hbGl6ZWRPcmlnaW5hbCk7XG4gICAxMDBcdCAgICAgIGNvbnNvbGUubG9nKCdpc01vZGlmaWVkJywgbW9kaWZpZWQpO1xuICAgMTAxXHQgICAgICBzZXRJc01vZGlmaWVkKG1vZGlmaWVkKTtcbiAgIDEwMlx0ICAgIH1cbiAgIDEwM1x0ICB9LCBbZm9ybVZhbHVlcywgb3JpZ2luYWxWYWx1ZXNdKTtcbiAgIDEwNFx0XG4gICAxMDVcdCAgY29uc3QgaGFuZGxlRm9ybVN1Ym1pdCA9IChkYXRhOiBCb29rRm9ybVZhbHVlc1R5cGUpID0+IHtcbiAgIDEwNlx0ICAgIC8vIFNpIGF1Y3VuZSBtb2RpZmljYXRpb24sIHJlZGlyaWdlciB2ZXJzIGxhIHBhZ2UgZCdhY2N1ZWlsXG4gICAxMDdcdCAgICBpZiAoIWlzTW9kaWZpZWQpIHtcbiAgIDEwOFx0ICAgICAgcm91dGVyLnB1c2goJy8nKTtcbiAgIDEwOVx0ICAgICAgcmV0dXJuO1xuICAgMTEwXHQgICAgfVxuVG90YWwgbGluZXMgaW4gZmlsZTogMzc1XG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI5YTk2OTI1Mi1lNzAyLTRkMmItYWYzMi1iY2Q4OGNlMDY1YzE7dG9vbHVfMDE1M3ZId1lMNlhlZ1BoOUd5U1lWS3UxIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlBhcnRpYWxseSBlZGl0ZWQgdGhlIGZpbGUgc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeC4gU2VlIGJlbG93IGZvciBkZXRhaWxzLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuTm8gcmVwbGFjZW1lbnQgd2FzIHBlcmZvcm1lZCwgb2xkU3RyIGRpZCBub3QgYXBwZWFyIHZlcmJhdGltIGluIHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3guXG5UaGUgY29udGVudCBpbiB0aGUgc3BlY2lmaWVkIHJlZ2lvbiBpczpcbiAgICAgMVx0J3VzZSBjbGllbnQnO1xuICAgICAyXHRcbiAgICAgM1x0aW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbiAgICAgNFx0aW1wb3J0IHsgdXNlRm9ybSwgdXNlRmllbGRBcnJheSB9IGZyb20gJ3JlYWN0LWhvb2stZm9ybSc7XG4gICAgIDVcdGltcG9ydCB7IHpvZFJlc29sdmVyIH0gZnJvbSAnQGhvb2tmb3JtL3Jlc29sdmVycy96b2QnO1xuICAgICA2XHRpbXBvcnQgeyBCb29rRGF0YSB9IGZyb20gJ0AvdHlwZXMvQm9va0RhdGEnO1xuICAgICA3XHRpbXBvcnQgeyBCb29rRm9ybVNjaGVtYSwgQm9va0Zvcm1WYWx1ZXNUeXBlIH0gZnJvbSAnLi9zY2hlbWFzL0Jvb2tGb3JtU2NoZW1hJztcbiAgICAgOFx0aW1wb3J0IElucHV0Rm9ybSBmcm9tICcuL0lucHV0Rm9ybSc7XG4gICAgIDlcdGltcG9ydCB7IFBsdXNDaXJjbGUsIFBhbG10cmVlLCBQbGFuZSwgSG9tZSwgTWFwUGluLCBBcnJvd0xlZnQgfSBmcm9tICdsdWNpZGUtcmVhY3QnO1xuICAgIDEwXHRpbXBvcnQgUmVjb21tZW5kYXRpb24gZnJvbSAnLi9SZWNvbW1lbmRhdGlvbic7XG4gICAgMTFcdGltcG9ydCB7IG1vdGlvbiB9IGZyb20gJ2ZyYW1lci1tb3Rpb24nO1xuICAgIDEyXHRpbXBvcnQgeyBBY2NvcmRpb24sIEFjY29yZGlvbkNvbnRlbnQsIEFjY29yZGlvbkl0ZW0sIEFjY29yZGlvblRyaWdnZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvYWNjb3JkaW9uJztcbiAgICAxM1x0aW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9uYXZpZ2F0aW9uJztcbiAgICAxNFx0aW1wb3J0IHtub3JtYWxpemVGbGlnaHREYXRhfSBmcm9tIFwibmV4dC9kaXN0L2NsaWVudC9mbGlnaHQtZGF0YS1oZWxwZXJzXCI7XG4gICAgMTVcdGltcG9ydCBpc0VxdWFsIGZyb20gJ2xvZGFzaC5pc2VxdWFsJztcbiAgICAxNlx0XG4gICAgMTdcdGNvbnN0IGNvbnZlcnRCb29rRGF0YVRvRm9ybVZhbHVlcyA9IChkYXRhOiBCb29rRGF0YSB8IHVuZGVmaW5lZCk6IEJvb2tGb3JtVmFsdWVzVHlwZSA9PiB7XG4gICAgMThcdCAgcmV0dXJuIHtcblxuRGlmZiBiZXR3ZWVuIG9sZFN0ciBhbmQgdGhlIHNwZWNpZmllZCByZWdpb24gaXM6XG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4tLS0gb2xkU3RyXG4rKysgcmVnaW9uQ29udGVudFxuQEAgLTExLDQgKzExLDQgQEBcbiBpbXBvcnQgeyBtb3Rpb24gfSBmcm9tICdmcmFtZXItbW90aW9uJztcbiBpbXBvcnQgeyBBY2NvcmRpb24sIEFjY29yZGlvbkNvbnRlbnQsIEFjY29yZGlvbkl0ZW0sIEFjY29yZGlvblRyaWdnZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvYWNjb3JkaW9uJztcbiBpbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tICduZXh0L25hdmlnYXRpb24nO1xuLWltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG4raW1wb3J0IHtub3JtYWxpemVGbGlnaHREYXRhfSBmcm9tIFwibmV4dC9kaXN0L2NsaWVudC9mbGlnaHQtZGF0YS1oZWxwZXJzXCI7XG5cblxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzFdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgOTJcdFxuICAgIDkzXHQgIC8vIEVmZmV0IHBvdXIgZMOpdGVjdGVyIGxlcyBtb2RpZmljYXRpb25zXG4gICAgOTRcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICA5NVx0ICAgIGlmIChvcmlnaW5hbFZhbHVlcyAmJiBmb3JtVmFsdWVzKSB7XG4gICAgOTZcdCAgICAgIHRyeSB7XG4gICAgOTdcdCAgICAgICAgLy8gQ29tcGFyZXIgbGVzIG9iamV0cyBlbiBpZ25vcmFudCBsZXMgcHJvcHJpw6l0w6lzIG5vbiBwZXJ0aW5lbnRlc1xuICAgIDk4XHQgICAgICAgIGNvbnN0IG9yaWdpbmFsT2JqID0gSlNPTi5wYXJzZShvcmlnaW5hbFZhbHVlcyk7XG4gICAgOTlcdFxuICAgMTAwXHQgICAgICAgIC8vIFV0aWxpc2VyIHVuZSBjb21wYXJhaXNvbiBwcm9mb25kZSBwb3VyIGTDqXRlY3RlciBsZXMgbW9kaWZpY2F0aW9uc1xuICAgMTAxXHQgICAgICAgIGNvbnN0IG1vZGlmaWVkID0gIV8uaXNFcXVhbChmb3JtVmFsdWVzLCBvcmlnaW5hbE9iaik7XG4gICAxMDJcdCAgICAgICAgY29uc29sZS5sb2coJ2lzTW9kaWZpZWQnLCBtb2RpZmllZCk7XG4gICAxMDNcdCAgICAgICAgc2V0SXNNb2RpZmllZChtb2RpZmllZCk7XG4gICAxMDRcdCAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxMDVcdCAgICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgY29tcGFyYWlzb24gZGVzIG9iamV0czonLCBlcnJvcik7XG4gICAxMDZcdCAgICAgIH1cbiAgIDEwN1x0ICAgIH1cbiAgIDEwOFx0ICB9LCBbZm9ybVZhbHVlcywgb3JpZ2luYWxWYWx1ZXNdKTtcbiAgIDEwOVx0XG4gICAxMTBcdCAgY29uc3QgaGFuZGxlRm9ybVN1Ym1pdCA9IChkYXRhOiBCb29rRm9ybVZhbHVlc1R5cGUpID0+IHtcblxuRml4IGZhaWxlZCBzdHJfcmVwbGFjZV9lbnRyaWVzIGFjY29yZGluZ2x5IGFuZCB0cnkgYWdhaW4uXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCIzOTQ2ODUzMi1jOWQ2LTRjZmItYjg5OC03MWMyMWY2NGU5ZmM7dG9vbHVfMDFSSllvTHE2cFBLc1k0aVZvOHNDcHNNIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeC5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2VfZW50cmllc1swXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgIDEwXHRpbXBvcnQgUmVjb21tZW5kYXRpb24gZnJvbSAnLi9SZWNvbW1lbmRhdGlvbic7XG4gICAgMTFcdGltcG9ydCB7IG1vdGlvbiB9IGZyb20gJ2ZyYW1lci1tb3Rpb24nO1xuICAgIDEyXHRpbXBvcnQgeyBBY2NvcmRpb24sIEFjY29yZGlvbkNvbnRlbnQsIEFjY29yZGlvbkl0ZW0sIEFjY29yZGlvblRyaWdnZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvYWNjb3JkaW9uJztcbiAgICAxM1x0aW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9uYXZpZ2F0aW9uJztcbiAgICAxNFx0aW1wb3J0IGlzRXF1YWwgZnJvbSAnbG9kYXNoLmlzZXF1YWwnO1xuICAgIDE1XHRcbiAgICAxNlx0Y29uc3QgY29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzID0gKGRhdGE6IEJvb2tEYXRhIHwgdW5kZWZpbmVkKTogQm9va0Zvcm1WYWx1ZXNUeXBlID0+IHtcbiAgICAxN1x0ICByZXR1cm4ge1xuICAgIDE4XHQgICAgaWQ6IGRhdGE/LmlkLFxuXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlX2VudHJpZXNbMV06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICA5NVx0ICAgICAgdHJ5IHtcbiAgICA5Nlx0ICAgICAgICAvLyBDb21wYXJlciBsZXMgb2JqZXRzIGVuIGlnbm9yYW50IGxlcyBwcm9wcmnDqXTDqXMgbm9uIHBlcnRpbmVudGVzXG4gICAgOTdcdCAgICAgICAgY29uc3Qgb3JpZ2luYWxPYmogPSBKU09OLnBhcnNlKG9yaWdpbmFsVmFsdWVzKTtcbiAgICA5OFx0XG4gICAgOTlcdCAgICAgICAgLy8gVXRpbGlzZXIgdW5lIGNvbXBhcmFpc29uIHByb2ZvbmRlIHBvdXIgZMOpdGVjdGVyIGxlcyBtb2RpZmljYXRpb25zXG4gICAxMDBcdCAgICAgICAgY29uc3QgbW9kaWZpZWQgPSAhaXNFcXVhbChmb3JtVmFsdWVzLCBvcmlnaW5hbE9iaik7XG4gICAxMDFcdCAgICAgICAgY29uc29sZS5sb2coJ2lzTW9kaWZpZWQnLCBtb2RpZmllZCk7XG4gICAxMDJcdCAgICAgICAgc2V0SXNNb2RpZmllZChtb2RpZmllZCk7XG4gICAxMDNcdCAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxMDRcdCAgICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgY29tcGFyYWlzb24gZGVzIG9iamV0czonLCBlcnJvcik7XG4gICAxMDVcdFxuICAgMTA2XHQgICAgICB9ICAgIH1cblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiYTE3MDNmMmQtM2FkOC00NzBkLThhZTQtOWY0NDhlMmY5NTgwO3Rvb2x1XzAxQWtIdHpNWVkyQUo1amR6Ym15azlnZyI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbiAgICAgICAgPHJldHVybi1jb2RlPlxuICAgICAgICAwXG4gICAgICAgIDwvcmV0dXJuLWNvZGU+XG4gICAgICAgIDxzdGRvdXQ+XG4gICAgICAgIChub2RlOjEwNjc5KSBFeHBlcmltZW50YWxXYXJuaW5nOiBDb21tb25KUyBtb2R1bGUgL29wdC9ob21lYnJldy9saWIvbm9kZV9tb2R1bGVzL25wbS9ub2RlX21vZHVsZXMvZGVidWcvc3JjL25vZGUuanMgaXMgbG9hZGluZyBFUyBNb2R1bGUgL29wdC9ob21lYnJldy9saWIvbm9kZV9tb2R1bGVzL25wbS9ub2RlX21vZHVsZXMvc3VwcG9ydHMtY29sb3IvaW5kZXguanMgdXNpbmcgcmVxdWlyZSgpLlxuU3VwcG9ydCBmb3IgbG9hZGluZyBFUyBNb2R1bGUgaW4gcmVxdWlyZSgpIGlzIGFuIGV4cGVyaW1lbnRhbCBmZWF0dXJlIGFuZCBtaWdodCBjaGFuZ2UgYXQgYW55IHRpbWVcbihVc2UgYG5vZGUgLS10cmFjZS13YXJuaW5ncyAuLi5gIHRvIHNob3cgd2hlcmUgdGhlIHdhcm5pbmcgd2FzIGNyZWF0ZWQpXG5cdTAwMWJbMUdcdTAwMWJbMEvioJlcdTAwMWJbMUdcdTAwMWJbMEvioLlcdTAwMWJbMUdcdTAwMWJbMEvioLhcdTAwMWJbMUdcdTAwMWJbMEvioLxcdTAwMWJbMUdcdTAwMWJbMEvioLRcdTAwMWJbMUdcdTAwMWJbMEvioKZcdTAwMWJbMUdcdTAwMWJbMEvioKdcdTAwMWJbMUdcdTAwMWJbMEvioIdcdTAwMWJbMUdcdTAwMWJbMEvioI9cdTAwMWJbMUdcdTAwMWJbMEvioItcdTAwMWJbMUdcdTAwMWJbMEvioJlcdTAwMWJbMUdcdTAwMWJbMEvioLlcdTAwMWJbMUdcdTAwMWJbMEvioLhcdTAwMWJbMUdcdTAwMWJbMEvioLxcdTAwMWJbMUdcdTAwMWJbMEvioLRcdTAwMWJbMUdcdTAwMWJbMEvioKZcdTAwMWJbMUdcdTAwMWJbMEvioKdcdTAwMWJbMUdcdTAwMWJbMEvioIdcdTAwMWJbMUdcdTAwMWJbMEtcbmNoYW5nZWQgNCBwYWNrYWdlcywgYW5kIGF1ZGl0ZWQgMTAwIHBhY2thZ2VzIGluIDJzXG5cdTAwMWJbMUdcdTAwMWJbMEvioIdcdTAwMWJbMUdcdTAwMWJbMEtcblx1MDAxYlsxR1x1MDAxYlswS+Kgh1x1MDAxYlsxR1x1MDAxYlswSzIxIHBhY2thZ2VzIGFyZSBsb29raW5nIGZvciBmdW5kaW5nXG5cdTAwMWJbMUdcdTAwMWJbMEvioIdcdTAwMWJbMUdcdTAwMWJbMEsgIHJ1biBgbnBtIGZ1bmRgIGZvciBkZXRhaWxzXG5cdTAwMWJbMUdcdTAwMWJbMEvioIdcdTAwMWJbMUdcdTAwMWJbMEtcbmZvdW5kIFx1MDAxYlszMm1cdTAwMWJbMW0wXHUwMDFiWzIybVx1MDAxYlszOW0gdnVsbmVyYWJpbGl0aWVzXG5cdTAwMWJbMUdcdTAwMWJbMEvioIdcdTAwMWJbMUdcdTAwMWJbMEtcbiAgICAgICAgPC9zdGRvdXQ+XG4gICAgICAgIDxzdGRlcnI+XG4gICAgICAgIFxuICAgICAgICA8L3N0ZGVycj4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCIyMTRlOTM3Ny1mYWU3LTRlZmMtYjY1ZC1kMmFlZjczMzk3YTc7dG9vbHVfMDFScFBnaEJndWhuUmRFU3BuRzRjNmdnIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgc3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3guXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlX2VudHJpZXNbMF06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgIDEwNlx0ICAgICAgICAgICAgICApfVxuICAgMTA3XHRcbiAgIDEwOFx0ICAgICAgICAgICAgICA8Qm9va0VkaXRGb3JtXG4gICAxMDlcdCAgICAgICAgICAgICAgICBpbml0aWFsRGF0YT17Ym9va0RhdGEgfHwgdW5kZWZpbmVkfVxuICAgMTEwXHQgICAgICAgICAgICAgICAgb25TdWJtaXQ9e2FzeW5jIChkYXRhKSA9PiB7XG4gICAxMTFcdCAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEb25uw6llcyBkdSBmb3JtdWxhaXJlIHNvdW1pc2VzOicsIGRhdGEpO1xuICAgMTEyXHRcbiAgIDExM1x0ICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgIDExNFx0ICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5pZCkge1xuICAgMTE1XHQgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJpc21hRGF0YSA9IHtcbiAgIDExNlx0ICAgICAgICAgICAgICAgICAgICAgICAgYXJyaXZhbFRpbWU6IGRhdGEuYXJyaXZhbFRpbWUsXG4gICAxMTdcdCAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc0luc3RydWN0aW9uczogZGF0YS5hY2Nlc3NJbnN0cnVjdGlvbnMsXG4gICAxMThcdCAgICAgICAgICAgICAgICAgICAgICAgIGFycml2YWxBZGRpdGlvbmFsSW5mbzogZGF0YS5hcnJpdmFsQWRkaXRpb25hbEluZm8sXG4gICAxMTlcdCAgICAgICAgICAgICAgICAgICAgICAgIGRlcGFydHVyZVRpbWU6IGRhdGEuZGVwYXJ0dXJlVGltZSxcbiAgIDEyMFx0ICAgICAgICAgICAgICAgICAgICAgICAgZXhpdEluc3RydWN0aW9uczogZGF0YS5leGl0SW5zdHJ1Y3Rpb25zLFxuICAgMTIxXHQgICAgICAgICAgICAgICAgICAgICAgICBkZXBhcnR1cmVBZGRpdGlvbmFsSW5mbzogZGF0YS5kZXBhcnR1cmVBZGRpdGlvbmFsSW5mbyxcbiAgIDEyMlx0ICAgICAgICAgICAgICAgICAgICAgICAgd2lmaU5hbWU6IGRhdGEud2lmaU5hbWUsXG4gICAxMjNcdCAgICAgICAgICAgICAgICAgICAgICAgIHdpZmlQYXNzd29yZDogZGF0YS53aWZpUGFzc3dvcmQsXG4gICAxMjRcdCAgICAgICAgICAgICAgICAgICAgICAgIGhvdXNlUnVsZXM6IGRhdGEuaG91c2VSdWxlcyxcbiAgIDEyNVx0ICAgICAgICAgICAgICAgICAgICAgICAgb3duZXJDb250YWN0OiBkYXRhLm93bmVyQ29udGFjdCxcbiAgIDEyNlx0ICAgICAgICAgICAgICAgICAgICAgICAgb3duZXJOYW1lOiBkYXRhLm93bmVyTmFtZSxcbiAgIDEyN1x0ICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbEluZm86IGRhdGEuZ2VuZXJhbEluZm8sXG4gICAxMjhcdCAgICAgICAgICAgICAgICAgICAgICAgIHJlY29tbWVuZGF0aW9uczoge1xuICAgMTI5XHQgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZU1hbnk6IHt9LFxuICAgMTMwXHQgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZTogZGF0YS5yZWNvbW1lbmRhdGlvbnMubWFwKHJlYyA9PiAoe1xuICAgMTMxXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcmVjLm5hbWUsXG4gICAxMzJcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiByZWMuYWRkcmVzcyB8fCAnJyxcbiAgIDEzM1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiByZWMuZGVzY3JpcHRpb24gfHwgJycsXG4gICAxMzRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiByZWMudHlwZVxuICAgMTM1XHQgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgMTM2XHQgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAxMzdcdCAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgMTM4XHRcbiAgIDEzOVx0ICAgICAgICAgICAgICAgICAgICAgIC8vIEVudm95ZXIgdW5lIHJlcXXDqnRlIFBVVCBwb3VyIG1ldHRyZSDDoCBqb3VyIGxlcyBkb25uw6llc1xuICAgMTQwXHQgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wdXQoYGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMS9hcGkvc3RheS8ke2RhdGEuaWR9YCwgcHJpc21hRGF0YSk7XG4gICAxNDFcdFxuICAgMTQyXHQgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAxNDNcdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEb25uw6llcyBtaXNlcyDDoCBqb3VyIGF2ZWMgc3VjY8OoczonLCByZXNwb25zZS5kYXRhKTtcbiAgIDE0NFx0XG4gICAxNDVcdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ldHRyZSDDoCBqb3VyIGxlIHN0YXRlIGJvb2tEYXRhIGF2ZWMgbGVzIGRvbm7DqWVzIHLDqWN1cMOpcsOpZXNcbiAgIDE0Nlx0ICAgICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEocmVzcG9uc2UuZGF0YSk7XG4gICAxNDdcdFxuICAgMTQ4XHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBTYXV2ZWdhcmRlciBsZXMgZG9ubsOpZXMgbWlzZXMgw6Agam91ciBkYW5zIGxlIGxvY2FsU3RvcmFnZVxuICAgMTQ5XHQgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShyZXNwb25zZS5kYXRhKSk7XG4gICAxNTBcdFxuICAgMTUxXHQgICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgnTW9kaWZpY2F0aW9ucyBlbnJlZ2lzdHLDqWVzIGF2ZWMgc3VjY8OocyEnKTtcbiAgIDE1Mlx0XG4gICAxNTNcdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvcmNlciB1biByZWNoYXJnZW1lbnQgZHUgY29tcG9zYW50IHBvdXIgcsOpaW5pdGlhbGlzZXIgbCfDqXRhdFxuICAgMTU0XHQgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAxNTVcdCAgICAgICAgICAgICAgICAgICAgICB9XG4gICAxNTZcdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgIDE1N1x0ICAgICAgICAgICAgICAgICAgICAgIC8vIFBhcyBkJ0lELCBkb25jIG9uIG1ldCBzaW1wbGVtZW50IMOgIGpvdXIgbGUgc3RhdGVcbiAgIDE1OFx0ICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xuICAgMTU5XHQgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI2MWMwMjFmNC1jOGYzLTQ4MDUtOWQzNC0xMWQ2MGEwZmYyNTI7dG9vbHVfMDExVkhjSFlHa3JBeE51Yk4zajNhZFI3Ijp7InBoYXNlIjo2LCJyZXN1bHQiOnsidGV4dCI6IkZhaWxlZCB0byBlZGl0IHRoZSBmaWxlIHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4LiBTZWUgYmVsb3cgZm9yIGRldGFpbHMuXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlX2VudHJpZXNbMF06XG5ObyByZXBsYWNlbWVudCB3YXMgcGVyZm9ybWVkLCBvbGRTdHIgZGlkIG5vdCBhcHBlYXIgdmVyYmF0aW0gaW4gc3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3guXG5UaGUgY29udGVudCBpbiB0aGUgc3BlY2lmaWVkIHJlZ2lvbiBpczpcbiAgIDE1Mlx0XG4gICAxNTNcdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvcmNlciB1biByZWNoYXJnZW1lbnQgZHUgY29tcG9zYW50IHBvdXIgcsOpaW5pdGlhbGlzZXIgbCfDqXRhdFxuICAgMTU0XHQgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAxNTVcdCAgICAgICAgICAgICAgICAgICAgICB9XG4gICAxNTZcdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgIDE1N1x0ICAgICAgICAgICAgICAgICAgICAgIC8vIFBhcyBkJ0lELCBkb25jIG9uIG1ldCBzaW1wbGVtZW50IMOgIGpvdXIgbGUgc3RhdGVcbiAgIDE1OFx0ICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xuICAgMTU5XHQgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgMTYwXHRcbiAgIDE2MVx0ICAgICAgICAgICAgICAgICAgICAgIC8vIEwnw6l0YXQgaXNNb2RpZmllZCBzZXJhIHLDqWluaXRpYWxpc8OpIGF1dG9tYXRpcXVlbWVudCBncsOiY2UgYXV4IHByb3BzXG4gICAxNjJcdCAgICAgICAgICAgICAgICAgICAgfVxuICAgMTYzXHQgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgMTY0XHQgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBsb3JzIGRlIGxhIG1pc2Ugw6Agam91ciBkZXMgZG9ubsOpZXM6JywgZXJyb3IpO1xuICAgMTY1XHQgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdVbmUgZXJyZXVyIGVzdCBzdXJ2ZW51ZSBsb3JzIGRlIGxhIG1pc2Ugw6Agam91ciBkZXMgZG9ubsOpZXMuJyk7XG5cbkRpZmYgYmV0d2VlbiBvbGRTdHIgYW5kIHRoZSBzcGVjaWZpZWQgcmVnaW9uIGlzOlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLS0tIG9sZFN0clxuKysrIHJlZ2lvbkNvbnRlbnRcbkBAIC0xLDYgKzEsNiBAQFxuKyAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgLy8gUGFzIGQnSUQsIGRvbmMgb24gbWV0IHNpbXBsZW1lbnQgw6Agam91ciBsZSBzdGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICBzZXRCb29rRGF0YShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuLSAgICAgICAgICAgICAgICAgICAgICBhbGVydCgnTW9kaWZpY2F0aW9ucyBlbnJlZ2lzdHLDqWVzIGF2ZWMgc3VjY8OocyEnKTtcbiBcbiAgICAgICAgICAgICAgICAgICAgICAgLy8gTCfDqXRhdCBpc01vZGlmaWVkIHNlcmEgcsOpaW5pdGlhbGlzw6kgYXV0b21hdGlxdWVtZW50IGdyw6JjZSBhdXggcHJvcHNcblxuXG5GaXggZmFpbGVkIHN0cl9yZXBsYWNlX2VudHJpZXMgYWNjb3JkaW5nbHkgYW5kIHRyeSBhZ2Fpbi5cbiIsImlzRXJyb3IiOnRydWUsInJlcXVlc3RJZCI6IiJ9fSwiZTQ2ZTQzNDctZTg0Ni00MGNkLTljNzItMzNlNGFjNjExY2ZiO3Rvb2x1XzAxU1lackMyM2RIOFJLd2hKQ2ZRc2ZhWiI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4OlxuICAgMTU1XHQgICAgICAgICAgICAgICAgICAgICAgfVxuICAgMTU2XHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAxNTdcdCAgICAgICAgICAgICAgICAgICAgICAvLyBQYXMgZCdJRCwgZG9uYyBvbiBtZXQgc2ltcGxlbWVudCDDoCBqb3VyIGxlIHN0YXRlXG4gICAxNThcdCAgICAgICAgICAgICAgICAgICAgICBzZXRCb29rRGF0YShkYXRhKTtcbiAgIDE1OVx0ICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdib29rRGF0YScsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgIDE2MFx0XG4gICAxNjFcdCAgICAgICAgICAgICAgICAgICAgICAvLyBMJ8OpdGF0IGlzTW9kaWZpZWQgc2VyYSByw6lpbml0aWFsaXPDqSBhdXRvbWF0aXF1ZW1lbnQgZ3LDomNlIGF1eCBwcm9wc1xuICAgMTYyXHQgICAgICAgICAgICAgICAgICAgIH1cbiAgIDE2M1x0ICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgIDE2NFx0ICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJldXIgbG9ycyBkZSBsYSBtaXNlIMOgIGpvdXIgZGVzIGRvbm7DqWVzOicsIGVycm9yKTtcbiAgIDE2NVx0ICAgICAgICAgICAgICAgICAgICBhbGVydCgnVW5lIGVycmV1ciBlc3Qgc3VydmVudWUgbG9ycyBkZSBsYSBtaXNlIMOgIGpvdXIgZGVzIGRvbm7DqWVzLicpO1xuVG90YWwgbGluZXMgaW4gZmlsZTogMTg1XG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJiZTZjMWI1MC05YzBiLTRkMDgtOTIyNS01ODQ0NjdmMTY0NjU7dG9vbHVfMDFFZGt6dkRRYWRHNjh1Q2NkUlN1dVNoIjp7InBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgc3JjL2FwcC9vd25lci1lZGl0LWJvb2svcGFnZS50c3guXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlX2VudHJpZXNbMF06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgIDE1M1x0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yY2VyIHVuIHJlY2hhcmdlbWVudCBkdSBjb21wb3NhbnQgcG91ciByw6lpbml0aWFsaXNlciBsJ8OpdGF0XG4gICAxNTRcdCAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgIDE1NVx0ICAgICAgICAgICAgICAgICAgICAgIH1cbiAgIDE1Nlx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgMTU3XHQgICAgICAgICAgICAgICAgICAgICAgLy8gUGFzIGQnSUQsIGRvbmMgb24gbWV0IHNpbXBsZW1lbnQgw6Agam91ciBsZSBzdGF0ZVxuICAgMTU4XHQgICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEoZGF0YSk7XG4gICAxNTlcdCAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAxNjBcdCAgICAgICAgICAgICAgICAgICAgICBhbGVydCgnTW9kaWZpY2F0aW9ucyBlbnJlZ2lzdHLDqWVzIGF2ZWMgc3VjY8OocyEnKTtcbiAgIDE2MVx0XG4gICAxNjJcdCAgICAgICAgICAgICAgICAgICAgICAvLyBGb3JjZXIgdW4gcmVjaGFyZ2VtZW50IGR1IGNvbXBvc2FudCBwb3VyIHLDqWluaXRpYWxpc2VyIGwnw6l0YXRcbiAgIDE2M1x0ICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgIDE2NFx0ICAgICAgICAgICAgICAgICAgICB9XG4gICAxNjVcdCAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxNjZcdCAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgbWlzZSDDoCBqb3VyIGRlcyBkb25uw6llczonLCBlcnJvcik7XG4gICAxNjdcdCAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1VuZSBlcnJldXIgZXN0IHN1cnZlbnVlIGxvcnMgZGUgbGEgbWlzZSDDoCBqb3VyIGRlcyBkb25uw6llcy4nKTtcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiODA3NWRhYWYtNWE1Yy00YzVkLTg3MGUtZDcxMGY0ODY2NjE1O3Rvb2x1XzAxSE1lMm1CTloyU1M3VmZmMXV6OFM0OSI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3g6XG4gICAgODBcdFxuICAgIDgxXHQgIC8vIFN1cnZlaWxsZXIgbGVzIGNoYW5nZW1lbnRzIGRhbnMgbGUgZm9ybXVsYWlyZVxuICAgIDgyXHQgIGNvbnN0IGZvcm1WYWx1ZXMgPSB3YXRjaCgpO1xuICAgIDgzXHRcbiAgICA4NFx0ICAvLyBFZmZldCBwb3VyIGluaXRpYWxpc2VyIGxlcyB2YWxldXJzIG9yaWdpbmFsZXNcbiAgICA4NVx0ICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIDg2XHQgICAgY29uc29sZS53YXJuKCdpbml0aWFsRGF0YScsIGluaXRpYWxEYXRhKVxuICAgIDg3XHQgICAgLy8gQ2hhcXVlIGZvaXMgcXVlIGluaXRpYWxEYXRhIGNoYW5nZSwgbWV0dHJlIMOgIGpvdXIgbGVzIHZhbGV1cnMgb3JpZ2luYWxlc1xuICAgIDg4XHQgICAgY29uc3QgbmV3T3JpZ2luYWxWYWx1ZXMgPSBKU09OLnN0cmluZ2lmeShjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMoaW5pdGlhbERhdGEpKTtcbiAgICA4OVx0ICAgIHNldE9yaWdpbmFsVmFsdWVzKG5ld09yaWdpbmFsVmFsdWVzKTtcbiAgICA5MFx0ICB9LCBbaW5pdGlhbERhdGFdKTtcbiAgICA5MVx0XG4gICAgOTJcdCAgLy8gRWZmZXQgcG91ciBkw6l0ZWN0ZXIgbGVzIG1vZGlmaWNhdGlvbnNcbiAgICA5M1x0ICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIDk0XHQgICAgaWYgKG9yaWdpbmFsVmFsdWVzICYmIGZvcm1WYWx1ZXMpIHtcbiAgICA5NVx0ICAgICAgdHJ5IHtcbiAgICA5Nlx0ICAgICAgICAvLyBDb21wYXJlciBsZXMgb2JqZXRzIGVuIGlnbm9yYW50IGxlcyBwcm9wcmnDqXTDqXMgbm9uIHBlcnRpbmVudGVzXG4gICAgOTdcdCAgICAgICAgY29uc3Qgb3JpZ2luYWxPYmogPSBKU09OLnBhcnNlKG9yaWdpbmFsVmFsdWVzKTtcbiAgICA5OFx0XG4gICAgOTlcdCAgICAgICAgLy8gVXRpbGlzZXIgdW5lIGNvbXBhcmFpc29uIHByb2ZvbmRlIHBvdXIgZMOpdGVjdGVyIGxlcyBtb2RpZmljYXRpb25zXG4gICAxMDBcdCAgICAgICAgY29uc3QgbW9kaWZpZWQgPSAhaXNFcXVhbChmb3JtVmFsdWVzLCBvcmlnaW5hbE9iaik7XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAzNzhcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImNiOGIzNjA4LWUwOTEtNDkwOC1iOWMyLTkxMWFmZmRjZDc3YTt0b29sdV8wMU5RNGhBMWhlWGJ5bm42QmU3N1R3ZFoiOnsicGhhc2UiOjYsInJlc3VsdCI6eyJ0ZXh0IjoiRmFpbGVkIHRvIGVkaXQgdGhlIGZpbGUgc3JjL2NvbXBvbmVudHMvQm9va0VkaXRGb3JtLnRzeC4gU2VlIGJlbG93IGZvciBkZXRhaWxzLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZV9lbnRyaWVzWzBdOlxuTm8gcmVwbGFjZW1lbnQgd2FzIHBlcmZvcm1lZCwgb2xkU3RyIGRpZCBub3QgYXBwZWFyIHZlcmJhdGltIGluIHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3guXG5UaGUgY29udGVudCBpbiB0aGUgc3BlY2lmaWVkIHJlZ2lvbiBpczpcbiAgICA3N1x0ICAgIGNvbnRyb2wsXG4gICAgNzhcdCAgICBuYW1lOiBcInJlY29tbWVuZGF0aW9uc1wiLFxuICAgIDc5XHQgIH0pO1xuICAgIDgwXHRcbiAgICA4MVx0ICAvLyBTdXJ2ZWlsbGVyIGxlcyBjaGFuZ2VtZW50cyBkYW5zIGxlIGZvcm11bGFpcmVcbiAgICA4Mlx0ICBjb25zdCBmb3JtVmFsdWVzID0gd2F0Y2goKTtcbiAgICA4M1x0XG4gICAgODRcdCAgLy8gRWZmZXQgcG91ciBpbml0aWFsaXNlciBsZXMgdmFsZXVycyBvcmlnaW5hbGVzXG4gICAgODVcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICA4Nlx0ICAgIGNvbnNvbGUud2FybignaW5pdGlhbERhdGEnLCBpbml0aWFsRGF0YSlcbiAgICA4N1x0ICAgIC8vIENoYXF1ZSBmb2lzIHF1ZSBpbml0aWFsRGF0YSBjaGFuZ2UsIG1ldHRyZSDDoCBqb3VyIGxlcyB2YWxldXJzIG9yaWdpbmFsZXNcbiAgICA4OFx0ICAgIGNvbnN0IG5ld09yaWdpbmFsVmFsdWVzID0gSlNPTi5zdHJpbmdpZnkoY29udmVydEJvb2tEYXRhVG9Gb3JtVmFsdWVzKGluaXRpYWxEYXRhKSk7XG4gICAgODlcdCAgICBzZXRPcmlnaW5hbFZhbHVlcyhuZXdPcmlnaW5hbFZhbHVlcyk7XG4gICAgOTBcdCAgfSwgW2luaXRpYWxEYXRhXSk7XG4gICAgOTFcdFxuICAgIDkyXHQgIC8vIEVmZmV0IHBvdXIgZMOpdGVjdGVyIGxlcyBtb2RpZmljYXRpb25zXG4gICAgOTNcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICA5NFx0ICAgIGlmIChvcmlnaW5hbFZhbHVlcyAmJiBmb3JtVmFsdWVzKSB7XG4gICAgOTVcdCAgICAgIHRyeSB7XG4gICAgOTZcdCAgICAgICAgLy8gQ29tcGFyZXIgbGVzIG9iamV0cyBlbiBpZ25vcmFudCBsZXMgcHJvcHJpw6l0w6lzIG5vbiBwZXJ0aW5lbnRlc1xuICAgIDk3XHQgICAgICAgIGNvbnN0IG9yaWdpbmFsT2JqID0gSlNPTi5wYXJzZShvcmlnaW5hbFZhbHVlcyk7XG4gICAgOThcdFxuICAgIDk5XHQgICAgICAgIC8vIFV0aWxpc2VyIHVuZSBjb21wYXJhaXNvbiBwcm9mb25kZSBwb3VyIGTDqXRlY3RlciBsZXMgbW9kaWZpY2F0aW9uc1xuICAgMTAwXHQgICAgICAgIGNvbnN0IG1vZGlmaWVkID0gIWlzRXF1YWwoZm9ybVZhbHVlcywgb3JpZ2luYWxPYmopO1xuICAgMTAxXHQgICAgICAgIHNldElzTW9kaWZpZWQobW9kaWZpZWQpO1xuICAgMTAyXHQgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgMTAzXHQgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VycmV1ciBsb3JzIGRlIGxhIGNvbXBhcmFpc29uIGRlcyBvYmpldHM6JywgZXJyb3IpO1xuICAgMTA0XHRcbiAgIDEwNVx0ICAgICAgfSAgICB9XG4gICAxMDZcdCAgfSwgW2Zvcm1WYWx1ZXMsIG9yaWdpbmFsVmFsdWVzXSk7XG4gICAxMDdcdFxuICAgMTA4XHQgIGNvbnN0IGhhbmRsZUZvcm1TdWJtaXQgPSAoZGF0YTogQm9va0Zvcm1WYWx1ZXNUeXBlKSA9PiB7XG4gICAxMDlcdCAgICAvLyBTaSBhdWN1bmUgbW9kaWZpY2F0aW9uLCByZWRpcmlnZXIgdmVycyBsYSBwYWdlIGQnYWNjdWVpbFxuICAgMTEwXHQgICAgaWYgKCFpc01vZGlmaWVkKSB7XG5cbkRpZmYgYmV0d2VlbiBvbGRTdHIgYW5kIHRoZSBzcGVjaWZpZWQgcmVnaW9uIGlzOlxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLS0tIG9sZFN0clxuKysrIHJlZ2lvbkNvbnRlbnRcbkBAIC0xOCw5ICsxOCw5IEBAXG4gXG4gICAgICAgICAvLyBVdGlsaXNlciB1bmUgY29tcGFyYWlzb24gcHJvZm9uZGUgcG91ciBkw6l0ZWN0ZXIgbGVzIG1vZGlmaWNhdGlvbnNcbiAgICAgICAgIGNvbnN0IG1vZGlmaWVkID0gIWlzRXF1YWwoZm9ybVZhbHVlcywgb3JpZ2luYWxPYmopO1xuLSAgICAgICAgY29uc29sZS5sb2coJ2lzTW9kaWZpZWQnLCBtb2RpZmllZCk7XG4gICAgICAgICBzZXRJc01vZGlmaWVkKG1vZGlmaWVkKTtcbiAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgY29tcGFyYWlzb24gZGVzIG9iamV0czonLCBlcnJvcik7XG4gXG4gICAgICAgfSAgICB9XG4rICB9LCBbZm9ybVZhbHVlcywgb3JpZ2luYWxWYWx1ZXNdKTtcblxuXG5GaXggZmFpbGVkIHN0cl9yZXBsYWNlX2VudHJpZXMgYWNjb3JkaW5nbHkgYW5kIHRyeSBhZ2Fpbi5cbiIsImlzRXJyb3IiOnRydWUsInJlcXVlc3RJZCI6IiJ9fSwiYjdmN2Q3NDEtYmZkOS00ZDJiLWI2YzUtZjkyZDliNDhiMDVhO3Rvb2x1XzAxSnB0TGRFNThOcFVCVmNpMkc4R0dKaSI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIHNyYy9jb21wb25lbnRzL0Jvb2tFZGl0Rm9ybS50c3g6XG4gICAgIDFcdCd1c2UgY2xpZW50JztcbiAgICAgMlx0XG4gICAgIDNcdGltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG4gICAgIDRcdGltcG9ydCB7IHVzZUZvcm0sIHVzZUZpZWxkQXJyYXkgfSBmcm9tICdyZWFjdC1ob29rLWZvcm0nO1xuICAgICA1XHRpbXBvcnQgeyB6b2RSZXNvbHZlciB9IGZyb20gJ0Bob29rZm9ybS9yZXNvbHZlcnMvem9kJztcbiAgICAgNlx0aW1wb3J0IHsgQm9va0RhdGEgfSBmcm9tICdAL3R5cGVzL0Jvb2tEYXRhJztcbiAgICAgN1x0aW1wb3J0IHsgQm9va0Zvcm1TY2hlbWEsIEJvb2tGb3JtVmFsdWVzVHlwZSB9IGZyb20gJy4vc2NoZW1hcy9Cb29rRm9ybVNjaGVtYSc7XG4gICAgIDhcdGltcG9ydCBJbnB1dEZvcm0gZnJvbSAnLi9JbnB1dEZvcm0nO1xuICAgICA5XHRpbXBvcnQgeyBQbHVzQ2lyY2xlLCBQYWxtdHJlZSwgUGxhbmUsIEhvbWUsIE1hcFBpbiwgQXJyb3dMZWZ0IH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcbiAgICAxMFx0aW1wb3J0IFJlY29tbWVuZGF0aW9uIGZyb20gJy4vUmVjb21tZW5kYXRpb24nO1xuICAgIDExXHRpbXBvcnQgeyBtb3Rpb24gfSBmcm9tICdmcmFtZXItbW90aW9uJztcbiAgICAxMlx0aW1wb3J0IHsgQWNjb3JkaW9uLCBBY2NvcmRpb25Db250ZW50LCBBY2NvcmRpb25JdGVtLCBBY2NvcmRpb25UcmlnZ2VyIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2FjY29yZGlvbic7XG4gICAgMTNcdGltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ25leHQvbmF2aWdhdGlvbic7XG4gICAgMTRcdGltcG9ydCBpc0VxdWFsIGZyb20gJ2xvZGFzaC5pc2VxdWFsJztcbiAgICAxNVx0XG4gICAgMTZcdGNvbnN0IGNvbnZlcnRCb29rRGF0YVRvRm9ybVZhbHVlcyA9IChkYXRhOiBCb29rRGF0YSB8IHVuZGVmaW5lZCk6IEJvb2tGb3JtVmFsdWVzVHlwZSA9PiB7XG4gICAgMTdcdCAgcmV0dXJuIHtcbiAgICAxOFx0ICAgIGlkOiBkYXRhPy5pZCxcbiAgICAxOVx0ICAgIGFycml2YWxUaW1lOiBkYXRhPy5hcnJpdmFsVGltZSB8fCAnJyxcbiAgICAyMFx0ICAgIGFjY2Vzc0luc3RydWN0aW9uczogZGF0YT8uYWNjZXNzSW5zdHJ1Y3Rpb25zIHx8ICcnLFxuICAgIDIxXHQgICAgYXJyaXZhbEFkZGl0aW9uYWxJbmZvOiBkYXRhPy5hcnJpdmFsQWRkaXRpb25hbEluZm8gfHwgJycsXG4gICAgMjJcdCAgICBkZXBhcnR1cmVUaW1lOiBkYXRhPy5kZXBhcnR1cmVUaW1lIHx8ICcnLFxuICAgIDIzXHQgICAgZXhpdEluc3RydWN0aW9uczogZGF0YT8uZXhpdEluc3RydWN0aW9ucyB8fCAnJyxcbiAgICAyNFx0ICAgIGRlcGFydHVyZUFkZGl0aW9uYWxJbmZvOiBkYXRhPy5kZXBhcnR1cmVBZGRpdGlvbmFsSW5mbyB8fCAnJyxcbiAgICAyNVx0ICAgIHdpZmlOYW1lOiBkYXRhPy53aWZpTmFtZSB8fCAnJyxcbiAgICAyNlx0ICAgIHdpZmlQYXNzd29yZDogZGF0YT8ud2lmaVBhc3N3b3JkIHx8ICcnLFxuICAgIDI3XHQgICAgaG91c2VSdWxlczogZGF0YT8uaG91c2VSdWxlcyB8fCAnJyxcbiAgICAyOFx0ICAgIG93bmVyQ29udGFjdDogZGF0YT8ub3duZXJDb250YWN0IHx8ICcnLFxuICAgIDI5XHQgICAgb3duZXJOYW1lOiBkYXRhPy5vd25lck5hbWUgfHwgJycsXG4gICAgMzBcdCAgICBnZW5lcmFsSW5mbzogZGF0YT8uZ2VuZXJhbEluZm8gfHwgJycsXG4gICAgMzFcdCAgICByZWNvbW1lbmRhdGlvbnM6IGRhdGE/LnJlY29tbWVuZGF0aW9ucyB8fCBbXSxcbiAgICAzMlx0ICB9O1xuICAgIDMzXHR9O1xuICAgIDM0XHRcbiAgICAzNVx0Y29uc3QgY29udmVydEZvcm1WYWx1ZXNUb0Jvb2tEYXRhID0gKHZhbHVlczogQm9va0Zvcm1WYWx1ZXNUeXBlKTogQm9va0RhdGEgPT4ge1xuICAgIDM2XHQgIHJldHVybiB7XG4gICAgMzdcdCAgICBpZDogdmFsdWVzLmlkLFxuICAgIDM4XHQgICAgYXJyaXZhbFRpbWU6IHZhbHVlcy5hcnJpdmFsVGltZSxcbiAgICAzOVx0ICAgIGFjY2Vzc0luc3RydWN0aW9uczogdmFsdWVzLmFjY2Vzc0luc3RydWN0aW9ucyxcbiAgICA0MFx0ICAgIGFycml2YWxBZGRpdGlvbmFsSW5mbzogdmFsdWVzLmFycml2YWxBZGRpdGlvbmFsSW5mbyB8fCAnJyxcbiAgICA0MVx0ICAgIGRlcGFydHVyZVRpbWU6IHZhbHVlcy5kZXBhcnR1cmVUaW1lLFxuICAgIDQyXHQgICAgZXhpdEluc3RydWN0aW9uczogdmFsdWVzLmV4aXRJbnN0cnVjdGlvbnMsXG4gICAgNDNcdCAgICBkZXBhcnR1cmVBZGRpdGlvbmFsSW5mbzogdmFsdWVzLmRlcGFydHVyZUFkZGl0aW9uYWxJbmZvIHx8ICcnLFxuICAgIDQ0XHQgICAgd2lmaU5hbWU6IHZhbHVlcy53aWZpTmFtZSxcbiAgICA0NVx0ICAgIHdpZmlQYXNzd29yZDogdmFsdWVzLndpZmlQYXNzd29yZCxcbiAgICA0Nlx0ICAgIGhvdXNlUnVsZXM6IHZhbHVlcy5ob3VzZVJ1bGVzLFxuICAgIDQ3XHQgICAgb3duZXJDb250YWN0OiB2YWx1ZXMub3duZXJDb250YWN0LFxuICAgIDQ4XHQgICAgb3duZXJOYW1lOiB2YWx1ZXMub3duZXJOYW1lLFxuICAgIDQ5XHQgICAgZ2VuZXJhbEluZm86IHZhbHVlcy5nZW5lcmFsSW5mbyB8fCAnJyxcbiAgICA1MFx0ICAgIHJlY29tbWVuZGF0aW9uczogdmFsdWVzLnJlY29tbWVuZGF0aW9ucyB8fCBbXSxcbiAgICA1MVx0ICB9O1xuICAgIDUyXHR9O1xuICAgIDUzXHRcbiAgICA1NFx0aW50ZXJmYWNlIEJvb2tFZGl0Rm9ybVByb3BzIHtcbiAgICA1NVx0ICBpbml0aWFsRGF0YT86IEJvb2tEYXRhO1xuICAgIDU2XHQgIG9uU3VibWl0PzogKGRhdGE6IEJvb2tEYXRhKSA9PiB2b2lkO1xuICAgIDU3XHR9XG4gICAgNThcdFxuICAgIDU5XHRleHBvcnQgZnVuY3Rpb24gQm9va0VkaXRGb3JtKHsgaW5pdGlhbERhdGEsIG9uU3VibWl0IH06IEJvb2tFZGl0Rm9ybVByb3BzKSB7XG4gICAgNjBcdCAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG4gICAgNjFcdCAgY29uc3QgW2lzU2F2aW5nLCBzZXRJc1NhdmluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgNjJcdCAgY29uc3QgW2lzTW9kaWZpZWQsIHNldElzTW9kaWZpZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIDYzXHQgIGNvbnN0IFtvcmlnaW5hbFZhbHVlcywgc2V0T3JpZ2luYWxWYWx1ZXNdID0gdXNlU3RhdGU8c3RyaW5nPignJyk7XG4gICAgNjRcdFxuICAgIDY1XHQgIGNvbnN0IHtcbiAgICA2Nlx0ICAgIHJlZ2lzdGVyLFxuICAgIDY3XHQgICAgaGFuZGxlU3VibWl0LFxuICAgIDY4XHQgICAgY29udHJvbCxcbiAgICA2OVx0ICAgIHdhdGNoLFxuICAgIDcwXHQgICAgZm9ybVN0YXRlOiB7IGVycm9ycywgaXNEaXJ0eSB9LFxuICAgIDcxXHQgIH0gPSB1c2VGb3JtPEJvb2tGb3JtVmFsdWVzVHlwZT4oe1xuICAgIDcyXHQgICAgcmVzb2x2ZXI6IHpvZFJlc29sdmVyKEJvb2tGb3JtU2NoZW1hKSBhcyBhbnksXG4gICAgNzNcdCAgICBkZWZhdWx0VmFsdWVzOiBjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMoaW5pdGlhbERhdGEpLFxuICAgIDc0XHQgIH0pO1xuICAgIDc1XHRcbiAgICA3Nlx0ICBjb25zdCB7IGZpZWxkcywgYXBwZW5kLCByZW1vdmUgfSA9IHVzZUZpZWxkQXJyYXkoe1xuICAgIDc3XHQgICAgY29udHJvbCxcbiAgICA3OFx0ICAgIG5hbWU6IFwicmVjb21tZW5kYXRpb25zXCIsXG4gICAgNzlcdCAgfSk7XG4gICAgODBcdFxuICAgIDgxXHQgIC8vIFN1cnZlaWxsZXIgbGVzIGNoYW5nZW1lbnRzIGRhbnMgbGUgZm9ybXVsYWlyZVxuICAgIDgyXHQgIGNvbnN0IGZvcm1WYWx1ZXMgPSB3YXRjaCgpO1xuICAgIDgzXHRcbiAgICA4NFx0ICAvLyBFZmZldCBwb3VyIGluaXRpYWxpc2VyIGxlcyB2YWxldXJzIG9yaWdpbmFsZXNcbiAgICA4NVx0ICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIDg2XHQgICAgY29uc29sZS53YXJuKCdpbml0aWFsRGF0YScsIGluaXRpYWxEYXRhKVxuICAgIDg3XHQgICAgLy8gQ2hhcXVlIGZvaXMgcXVlIGluaXRpYWxEYXRhIGNoYW5nZSwgbWV0dHJlIMOgIGpvdXIgbGVzIHZhbGV1cnMgb3JpZ2luYWxlc1xuICAgIDg4XHQgICAgY29uc3QgbmV3T3JpZ2luYWxWYWx1ZXMgPSBKU09OLnN0cmluZ2lmeShjb252ZXJ0Qm9va0RhdGFUb0Zvcm1WYWx1ZXMoaW5pdGlhbERhdGEpKTtcbiAgICA4OVx0ICAgIHNldE9yaWdpbmFsVmFsdWVzKG5ld09yaWdpbmFsVmFsdWVzKTtcbiAgICA5MFx0ICB9LCBbaW5pdGlhbERhdGFdKTtcbiAgICA5MVx0XG4gICAgOTJcdCAgLy8gRWZmZXQgcG91ciBkw6l0ZWN0ZXIgbGVzIG1vZGlmaWNhdGlvbnNcbiAgICA5M1x0ICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIDk0XHQgICAgaWYgKG9yaWdpbmFsVmFsdWVzICYmIGZvcm1WYWx1ZXMpIHtcbiAgICA5NVx0ICAgICAgdHJ5IHtcbiAgICA5Nlx0ICAgICAgICAvLyBDb21wYXJlciBsZXMgb2JqZXRzIGVuIGlnbm9yYW50IGxlcyBwcm9wcmnDqXTDqXMgbm9uIHBlcnRpbmVudGVzXG4gICAgOTdcdCAgICAgICAgY29uc3Qgb3JpZ2luYWxPYmogPSBKU09OLnBhcnNlKG9yaWdpbmFsVmFsdWVzKTtcbiAgICA5OFx0XG4gICAgOTlcdCAgICAgICAgLy8gVXRpbGlzZXIgdW5lIGNvbXBhcmFpc29uIHByb2ZvbmRlIHBvdXIgZMOpdGVjdGVyIGxlcyBtb2RpZmljYXRpb25zXG4gICAxMDBcdCAgICAgICAgY29uc3QgbW9kaWZpZWQgPSAhaXNFcXVhbChmb3JtVmFsdWVzLCBvcmlnaW5hbE9iaik7XG4gICAxMDFcdCAgICAgICAgc2V0SXNNb2RpZmllZChtb2RpZmllZCk7XG4gICAxMDJcdCAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxMDNcdCAgICAgICAgY29uc29sZS5lcnJvcignRXJyZXVyIGxvcnMgZGUgbGEgY29tcGFyYWlzb24gZGVzIG9iamV0czonLCBlcnJvcik7XG4gICAxMDRcdFxuICAgMTA1XHQgICAgICB9ICAgIH1cbiAgIDEwNlx0ICB9LCBbZm9ybVZhbHVlcywgb3JpZ2luYWxWYWx1ZXNdKTtcbiAgIDEwN1x0XG4gICAxMDhcdCAgY29uc3QgaGFuZGxlRm9ybVN1Ym1pdCA9IChkYXRhOiBCb29rRm9ybVZhbHVlc1R5cGUpID0+IHtcbiAgIDEwOVx0ICAgIC8vIFNpIGF1Y3VuZSBtb2RpZmljYXRpb24sIHJlZGlyaWdlciB2ZXJzIGxhIHBhZ2UgZCdhY2N1ZWlsXG4gICAxMTBcdCAgICBpZiAoIWlzTW9kaWZpZWQpIHtcbiAgIDExMVx0ICAgICAgcm91dGVyLnB1c2goJy8nKTtcbiAgIDExMlx0ICAgICAgcmV0dXJuO1xuICAgMTEzXHQgICAgfVxuICAgMTE0XHRcbiAgIDExNVx0ICAgIC8vIFNpIGRlcyBtb2RpZmljYXRpb25zIG9udCDDqXTDqSBlZmZlY3R1w6llcywgc291bWV0dHJlIGxlcyBkb25uw6llc1xuICAgMTE2XHQgICAgc2V0SXNTYXZpbmcodHJ1ZSk7XG4gICAxMTdcdCAgICBjb25zdCBib29rRGF0YSA9IGNvbnZlcnRGb3JtVmFsdWVzVG9Cb29rRGF0YShkYXRhKTtcbiAgIDExOFx0XG4gICAxMTlcdCAgICBpZiAob25TdWJtaXQpIHtcbiAgIDEyMFx0ICAgICAgLy8gUGFzc2VyIGxlcyBkb25uw6llcyBhdSBjb21wb3NhbnQgcGFyZW50IHF1aSBnw6hyZXJhIGxhIHJlcXXDqnRlIFBVVFxuICAgMTIxXHQgICAgICBvblN1Ym1pdChib29rRGF0YSk7XG4gICAxMjJcdCAgICB9XG4gICAxMjNcdFxuICAgMTI0XHQgICAgLy8gUsOpaW5pdGlhbGlzZXIgbCfDqXRhdCBkZSBzYXV2ZWdhcmRlIGFwcsOocyB1biBjb3VydCBkw6lsYWlcbiAgIDEyNVx0ICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgMTI2XHQgICAgICBzZXRJc1NhdmluZyhmYWxzZSk7XG4gICAxMjdcdCAgICB9LCAxMDAwKTtcbiAgIDEyOFx0ICB9O1xuICAgMTI5XHRcbiAgIDEzMFx0XG4gICAxMzFcdCAgY29uc3QgY29udGFpbmVyVmFyaWFudHMgPSB7XG4gICAxMzJcdCAgICBoaWRkZW46IHsgb3BhY2l0eTogMCB9LFxuICAgMTMzXHQgICAgdmlzaWJsZToge1xuICAgMTM0XHQgICAgICBvcGFjaXR5OiAxLFxuICAgMTM1XHQgICAgICB0cmFuc2l0aW9uOiB7XG4gICAxMzZcdCAgICAgICAgc3RhZ2dlckNoaWxkcmVuOiAwLjJcbiAgIDEzN1x0ICAgICAgfVxuICAgMTM4XHQgICAgfVxuICAgMTM5XHQgIH07XG4gICAxNDBcdFxuICAgMTQxXHQgIGNvbnN0IGl0ZW1WYXJpYW50cyA9IHtcbiAgIDE0Mlx0ICAgIGhpZGRlbjogeyB5OiAyMCwgb3BhY2l0eTogMCB9LFxuICAgMTQzXHQgICAgdmlzaWJsZToge1xuICAgMTQ0XHQgICAgICB5OiAwLFxuICAgMTQ1XHQgICAgICBvcGFjaXR5OiAxLFxuICAgMTQ2XHQgICAgICB0cmFuc2l0aW9uOiB7XG4gICAxNDdcdCAgICAgICAgdHlwZTogJ3NwcmluZycsXG4gICAxNDhcdCAgICAgICAgc3RpZmZuZXNzOiAxMDAsXG4gICAxNDlcdCAgICAgICAgZGFtcGluZzogMTJcbiAgIDE1MFx0ICAgICAgfVxuICAgMTUxXHQgICAgfVxuICAgMTUyXHQgIH07XG4gICAxNTNcdFxuICAgMTU0XHQgIHJldHVybiAoXG4gICAxNTVcdCAgICA8bW90aW9uLmZvcm1cbiAgIDE1Nlx0ICAgICAgaW5pdGlhbD1cImhpZGRlblwiXG4gICAxNTdcdCAgICAgIGFuaW1hdGU9XCJ2aXNpYmxlXCJcbiAgIDE1OFx0ICAgICAgdmFyaWFudHM9e2NvbnRhaW5lclZhcmlhbnRzfVxuICAgMTU5XHQgICAgICBvblN1Ym1pdD17aGFuZGxlU3VibWl0KGhhbmRsZUZvcm1TdWJtaXQgYXMgYW55KX1cbiAgIDE2MFx0ICAgICAgY2xhc3NOYW1lPVwic3BhY2UteS04IHJvdW5kZWQteGwgYmctZ3JhZGllbnQtdG8tYnIgZnJvbS1vcmFuZ2UtNTAgdG8tYW1iZXItNTAgcC04IHNoYWRvdy1sZyBib3JkZXIgYm9yZGVyLWFtYmVyLTEwMFwiXG4gICAxNjFcdCAgICA+XG4gICAxNjJcdCAgICAgIDxBY2NvcmRpb24gdHlwZT1cInNpbmdsZVwiIGNvbGxhcHNpYmxlICBjbGFzc05hbWU9XCJ3LWZ1bGwgc3BhY2UteS00XCI+XG4gICAxNjNcdCAgICAgIDxBY2NvcmRpb25JdGVtIHZhbHVlPVwiYXJyaXZhbFwiIGNsYXNzTmFtZT1cImJvcmRlci1ub25lXCIgPlxuICAgMTY0XHQgICAgICAgIDxtb3Rpb24uZGl2XG4gICAxNjVcdCAgICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxuICAgMTY2XHQgICAgICAgICAgY2xhc3NOYW1lPVwiYmctd2hpdGUvODAgcm91bmRlZC1sZyBzaGFkb3ctc20gYm9yZGVyLWwtNCBib3JkZXItWyNmMDRjMjNdIG92ZXJmbG93LWhpZGRlblwiXG4gICAxNjdcdCAgICAgICAgPlxuICAgMTY4XHQgICAgICAgICAgPEFjY29yZGlvblRyaWdnZXIgY2xhc3NOYW1lPVwicHgtNiBweS00IGhvdmVyOm5vLXVuZGVybGluZSBob3ZlcjpiZy1vcmFuZ2UtNTAvNTAgdHJhbnNpdGlvbi1hbGxcIj5cbiAgIDE2OVx0ICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC14bCBmb250LXNlbWlib2xkIHRleHQtWyNmMDRjMjNdIGZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAxNzBcdCAgICAgICAgICAgICAgPFBsYW5lIGNsYXNzTmFtZT1cImgtNSB3LTVcIiAvPiBBcnJpdsOpZVxuICAgMTcxXHQgICAgICAgICAgICA8L3NwYW4+XG4gICAxNzJcdCAgICAgICAgICA8L0FjY29yZGlvblRyaWdnZXI+XG4gICAxNzNcdCAgICAgICAgICA8QWNjb3JkaW9uQ29udGVudCBjbGFzc05hbWU9XCJweC02IHNwYWNlLXktNFwiPlxuICAgMTc0XHRcbiAgIDE3NVx0ICAgICAgICA8SW5wdXRGb3JtXG4gICAxNzZcdCAgICAgICAgICBsYWJlbD1cIkhldXJlIGQnYXJyaXbDqWVcIlxuICAgMTc3XHQgICAgICAgICAgbmFtZT1cImFycml2YWxUaW1lXCJcbiAgIDE3OFx0ICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRXg6IDE1OjAwXCJcbiAgIDE3OVx0ICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgIDE4MFx0ICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgMTgxXHQgICAgICAgIC8+XG4gICAxODJcdFxuICAgMTgzXHQgICAgICAgIDxJbnB1dEZvcm1cbiAgIDE4NFx0ICAgICAgICAgIGxhYmVsPVwiSW5zdHJ1Y3Rpb25zIGQnYWNjw6hzXCJcbiAgIDE4NVx0ICAgICAgICAgIG5hbWU9XCJhY2Nlc3NJbnN0cnVjdGlvbnNcIlxuICAgMTg2XHQgICAgICAgICAgcGxhY2Vob2xkZXI9XCJDb21tZW50IGFjY8OpZGVyIGF1IGxvZ2VtZW50XCJcbiAgIDE4N1x0ICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgIDE4OFx0ICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgMTg5XHQgICAgICAgIC8+XG4gICAxOTBcdFxuICAgMTkxXHQgICAgICAgIDxJbnB1dEZvcm1cbiAgIDE5Mlx0ICAgICAgICAgIGxhYmVsPVwiSW5mb3JtYXRpb25zIHN1cHBsw6ltZW50YWlyZXNcIlxuICAgMTkzXHQgICAgICAgICAgbmFtZT1cImFycml2YWxBZGRpdGlvbmFsSW5mb1wiXG4gICAxOTRcdCAgICAgICAgICBwbGFjZWhvbGRlcj1cIkF1dHJlcyBpbmZvcm1hdGlvbnMgdXRpbGVzIHBvdXIgbCdhcnJpdsOpZVwiXG4gICAxOTVcdCAgICAgICAgICByZWdpc3Rlcj17cmVnaXN0ZXJ9XG4gICAxOTZcdCAgICAgICAgICBlcnJvcnM9e2Vycm9yc31cbiAgIDE5N1x0ICAgICAgICAvPlxuICAgMTk4XHQgICAgICAgICAgPC9BY2NvcmRpb25Db250ZW50PlxuICAgMTk5XHQgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDIwMFx0ICAgICAgPC9BY2NvcmRpb25JdGVtPlxuICAgMjAxXHRcbiAgIDIwMlx0ICAgICAgPEFjY29yZGlvbkl0ZW0gdmFsdWU9XCJkZXBhcnR1cmVcIiBjbGFzc05hbWU9XCJib3JkZXItbm9uZVwiPlxuICAgMjAzXHQgICAgICAgIDxtb3Rpb24uZGl2XG4gICAyMDRcdCAgICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxuICAgMjA1XHQgICAgICAgICAgY2xhc3NOYW1lPVwiYmctd2hpdGUvODAgcm91bmRlZC1sZyBzaGFkb3ctc20gYm9yZGVyLWwtNCBib3JkZXItcGluay00MDAgb3ZlcmZsb3ctaGlkZGVuXCJcbiAgIDIwNlx0ICAgICAgICA+XG4gICAyMDdcdCAgICAgICAgICA8QWNjb3JkaW9uVHJpZ2dlciBjbGFzc05hbWU9XCJweC02IHB5LTQgaG92ZXI6bm8tdW5kZXJsaW5lIGhvdmVyOmJnLXBpbmstNTAvNTAgdHJhbnNpdGlvbi1hbGxcIj5cbiAgIDIwOFx0ICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC14bCBmb250LXNlbWlib2xkIHRleHQtcGluay01MDAgZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgIDIwOVx0ICAgICAgICAgICAgICA8UGxhbmUgY2xhc3NOYW1lPVwiaC01IHctNSByb3RhdGUtMTgwXCIgLz4gRMOpcGFydFxuICAgMjEwXHQgICAgICAgICAgICA8L3NwYW4+XG4gICAyMTFcdCAgICAgICAgICA8L0FjY29yZGlvblRyaWdnZXI+XG4gICAyMTJcdCAgICAgICAgICA8QWNjb3JkaW9uQ29udGVudCBjbGFzc05hbWU9XCJweC02IHNwYWNlLXktNFwiPlxuICAgMjEzXHRcbiAgIDIxNFx0ICAgICAgICA8SW5wdXRGb3JtXG4gICAyMTVcdCAgICAgICAgICBsYWJlbD1cIkhldXJlIGRlIGTDqXBhcnRcIlxuICAgMjE2XHQgICAgICAgICAgbmFtZT1cImRlcGFydHVyZVRpbWVcIlxuICAgMjE3XHQgICAgICAgICAgcGxhY2Vob2xkZXI9XCJFeDogMTE6MDBcIlxuICAgMjE4XHQgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgMjE5XHQgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAyMjBcdCAgICAgICAgLz5cbiAgIDIyMVx0XG4gICAyMjJcdCAgICAgICAgPElucHV0Rm9ybVxuICAgMjIzXHQgICAgICAgICAgbGFiZWw9XCJJbnN0cnVjdGlvbnMgZGUgc29ydGllXCJcbiAgIDIyNFx0ICAgICAgICAgIG5hbWU9XCJleGl0SW5zdHJ1Y3Rpb25zXCJcbiAgIDIyNVx0ICAgICAgICAgIHBsYWNlaG9sZGVyPVwiQ29tbWVudCBxdWl0dGVyIGxlIGxvZ2VtZW50XCJcbiAgIDIyNlx0ICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgIDIyN1x0ICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgMjI4XHQgICAgICAgIC8+XG4gICAyMjlcdFxuICAgMjMwXHQgICAgICAgIDxJbnB1dEZvcm1cbiAgIDIzMVx0ICAgICAgICAgIGxhYmVsPVwiSW5mb3JtYXRpb25zIHN1cHBsw6ltZW50YWlyZXNcIlxuICAgMjMyXHQgICAgICAgICAgbmFtZT1cImRlcGFydHVyZUFkZGl0aW9uYWxJbmZvXCJcbiAgIDIzM1x0ICAgICAgICAgIHBsYWNlaG9sZGVyPVwiQXV0cmVzIGluZm9ybWF0aW9ucyB1dGlsZXMgcG91ciBsZSBkw6lwYXJ0XCJcbiAgIDIzNFx0ICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgIDIzNVx0ICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgMjM2XHQgICAgICAgIC8+XG4gICAyMzdcdCAgICAgICAgICA8L0FjY29yZGlvbkNvbnRlbnQ+XG4gICAyMzhcdCAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgMjM5XHQgICAgICA8L0FjY29yZGlvbkl0ZW0+XG4gICAyNDBcdFxuICAgMjQxXHQgICAgICA8QWNjb3JkaW9uSXRlbSB2YWx1ZT1cImFjY29tbW9kYXRpb25cIiBjbGFzc05hbWU9XCJib3JkZXItbm9uZVwiPlxuICAgMjQyXHQgICAgICAgIDxtb3Rpb24uZGl2XG4gICAyNDNcdCAgICAgICAgICB2YXJpYW50cz17aXRlbVZhcmlhbnRzfVxuICAgMjQ0XHQgICAgICAgICAgY2xhc3NOYW1lPVwiYmctd2hpdGUvODAgcm91bmRlZC1sZyBzaGFkb3ctc20gYm9yZGVyLWwtNCBib3JkZXItYW1iZXItNDAwIG92ZXJmbG93LWhpZGRlblwiXG4gICAyNDVcdCAgICAgICAgPlxuICAgMjQ2XHQgICAgICAgICAgPEFjY29yZGlvblRyaWdnZXIgY2xhc3NOYW1lPVwicHgtNiBweS00IGhvdmVyOm5vLXVuZGVybGluZSBob3ZlcjpiZy1hbWJlci01MC81MCB0cmFuc2l0aW9uLWFsbFwiPlxuICAgMjQ3XHQgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtc2VtaWJvbGQgdGV4dC1hbWJlci01MDAgZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgIDI0OFx0ICAgICAgICAgICAgICA8SG9tZSBjbGFzc05hbWU9XCJoLTUgdy01XCIgLz4gSMOpYmVyZ2VtZW50XG4gICAyNDlcdCAgICAgICAgICAgIDwvc3Bhbj5cbiAgIDI1MFx0ICAgICAgICAgIDwvQWNjb3JkaW9uVHJpZ2dlcj5cbiAgIDI1MVx0ICAgICAgICAgIDxBY2NvcmRpb25Db250ZW50IGNsYXNzTmFtZT1cInB4LTYgc3BhY2UteS00XCI+XG4gICAyNTJcdFxuICAgMjUzXHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMiBnYXAtNFwiPlxuICAgMjU0XHQgICAgICAgICAgPElucHV0Rm9ybVxuICAgMjU1XHQgICAgICAgICAgICBsYWJlbD1cIk5vbSBkdSByw6lzZWF1IFdpZmlcIlxuICAgMjU2XHQgICAgICAgICAgICBuYW1lPVwid2lmaU5hbWVcIlxuICAgMjU3XHQgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIk5vbSBkdSByw6lzZWF1IFdpZmlcIlxuICAgMjU4XHQgICAgICAgICAgICByZWdpc3Rlcj17cmVnaXN0ZXJ9XG4gICAyNTlcdCAgICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgMjYwXHQgICAgICAgICAgLz5cbiAgIDI2MVx0XG4gICAyNjJcdCAgICAgICAgICA8SW5wdXRGb3JtXG4gICAyNjNcdCAgICAgICAgICAgIGxhYmVsPVwiTW90IGRlIHBhc3NlIFdpZmlcIlxuICAgMjY0XHQgICAgICAgICAgICBuYW1lPVwid2lmaVBhc3N3b3JkXCJcbiAgIDI2NVx0ICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJNb3QgZGUgcGFzc2UgV2lmaVwiXG4gICAyNjZcdCAgICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgIDI2N1x0ICAgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAyNjhcdCAgICAgICAgICAvPlxuICAgMjY5XHQgICAgICAgIDwvZGl2PlxuICAgMjcwXHRcbiAgIDI3MVx0ICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktMlwiPlxuICAgMjcyXHQgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJob3VzZVJ1bGVzXCIgY2xhc3NOYW1lPVwidGV4dC1zbSBmb250LW1lZGl1bVwiPlxuICAgMjczXHQgICAgICAgICAgICBSw6hnbGVzIGRlIGxhIG1haXNvblxuICAgMjc0XHQgICAgICAgICAgPC9sYWJlbD5cbiAgIDI3NVx0ICAgICAgICAgIDx0ZXh0YXJlYVxuICAgMjc2XHQgICAgICAgICAgICBpZD1cImhvdXNlUnVsZXNcIlxuICAgMjc3XHQgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudHJleiBjaGFxdWUgcsOoZ2xlIHN1ciB1bmUgbm91dmVsbGUgbGlnbmVcIlxuICAgMjc4XHQgICAgICAgICAgICB7Li4ucmVnaXN0ZXIoJ2hvdXNlUnVsZXMnKX1cbiAgIDI3OVx0ICAgICAgICAgICAgY2xhc3NOYW1lPXtgdy1mdWxsIG1pbi1oLVsxMDBweF0gcm91bmRlZC1tZCBib3JkZXIgJHtlcnJvcnMuaG91c2VSdWxlcyA/ICdib3JkZXItZGVzdHJ1Y3RpdmUnIDogJ2JvcmRlci1pbnB1dCd9IGJnLXRyYW5zcGFyZW50IHB4LTMgcHktMiB0ZXh0LXNtIHNoYWRvdy1zbWB9XG4gICAyODBcdCAgICAgICAgICAvPlxuICAgMjgxXHQgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC14cyB0ZXh0LW11dGVkLWZvcmVncm91bmRcIj5FbnRyZXogY2hhcXVlIHLDqGdsZSBzdXIgdW5lIG5vdXZlbGxlIGxpZ25lPC9wPlxuICAgMjgyXHQgICAgICAgICAge2Vycm9ycy5ob3VzZVJ1bGVzICYmIChcbiAgIDI4M1x0ICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LWRlc3RydWN0aXZlXCI+e2Vycm9ycy5ob3VzZVJ1bGVzLm1lc3NhZ2U/LnRvU3RyaW5nKCl9PC9wPlxuICAgMjg0XHQgICAgICAgICAgKX1cbiAgIDI4NVx0ICAgICAgICA8L2Rpdj5cbiAgIDI4Nlx0XG4gICAyODdcdCAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncmlkIGdyaWQtY29scy0yIGdhcC00XCI+XG4gICAyODhcdCAgICAgICAgICA8SW5wdXRGb3JtXG4gICAyODlcdCAgICAgICAgICAgIGxhYmVsPVwiTm9tIGR1IHByb3ByacOpdGFpcmVcIlxuICAgMjkwXHQgICAgICAgICAgICBuYW1lPVwib3duZXJOYW1lXCJcbiAgIDI5MVx0ICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJWb3RyZSBub21cIlxuICAgMjkyXHQgICAgICAgICAgICByZWdpc3Rlcj17cmVnaXN0ZXJ9XG4gICAyOTNcdCAgICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgMjk0XHQgICAgICAgICAgLz5cbiAgIDI5NVx0XG4gICAyOTZcdCAgICAgICAgICA8SW5wdXRGb3JtXG4gICAyOTdcdCAgICAgICAgICAgIGxhYmVsPVwiQ29udGFjdCBkdSBwcm9wcmnDqXRhaXJlXCJcbiAgIDI5OFx0ICAgICAgICAgICAgbmFtZT1cIm93bmVyQ29udGFjdFwiXG4gICAyOTlcdCAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVm90cmUgbnVtw6lybyBkZSB0w6lsw6lwaG9uZVwiXG4gICAzMDBcdCAgICAgICAgICAgIHJlZ2lzdGVyPXtyZWdpc3Rlcn1cbiAgIDMwMVx0ICAgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAzMDJcdCAgICAgICAgICAvPlxuICAgMzAzXHQgICAgICAgIDwvZGl2PlxuICAgMzA0XHRcbiAgIDMwNVx0ICAgICAgICA8SW5wdXRGb3JtXG4gICAzMDZcdCAgICAgICAgICBsYWJlbD1cIkluZm9ybWF0aW9ucyBnw6luw6lyYWxlc1wiXG4gICAzMDdcdCAgICAgICAgICBuYW1lPVwiZ2VuZXJhbEluZm9cIlxuICAgMzA4XHQgICAgICAgICAgcGxhY2Vob2xkZXI9XCJBdXRyZXMgaW5mb3JtYXRpb25zIHV0aWxlcyBzdXIgbGUgbG9nZW1lbnRcIlxuICAgMzA5XHQgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgMzEwXHQgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XG4gICAzMTFcdCAgICAgICAgLz5cbiAgIDMxMlx0ICAgICAgICAgIDwvQWNjb3JkaW9uQ29udGVudD5cbiAgIDMxM1x0ICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAzMTRcdCAgICAgIDwvQWNjb3JkaW9uSXRlbT5cbiAgIDMxNVx0XG4gICAzMTZcdCAgICAgIDxBY2NvcmRpb25JdGVtIHZhbHVlPVwicmVjb21tZW5kYXRpb25zXCIgY2xhc3NOYW1lPVwiYm9yZGVyLW5vbmVcIj5cbiAgIDMxN1x0ICAgICAgICA8bW90aW9uLmRpdlxuICAgMzE4XHQgICAgICAgICAgdmFyaWFudHM9e2l0ZW1WYXJpYW50c31cbiAgIDMxOVx0ICAgICAgICAgIGNsYXNzTmFtZT1cImJnLXdoaXRlLzgwIHJvdW5kZWQtbGcgc2hhZG93LXNtIGJvcmRlci1sLTQgYm9yZGVyLXRlYWwtNDAwIG92ZXJmbG93LWhpZGRlblwiXG4gICAzMjBcdCAgICAgICAgPlxuICAgMzIxXHQgICAgICAgICAgPEFjY29yZGlvblRyaWdnZXIgY2xhc3NOYW1lPVwicHgtNiBweS00IGhvdmVyOm5vLXVuZGVybGluZSBob3ZlcjpiZy10ZWFsLTUwLzUwIHRyYW5zaXRpb24tYWxsXCI+XG4gICAzMjJcdCAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQteGwgZm9udC1zZW1pYm9sZCB0ZXh0LXRlYWwtNjAwIGZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAzMjNcdCAgICAgICAgICAgICAgPE1hcFBpbiBjbGFzc05hbWU9XCJoLTUgdy01XCIgLz4gUmVjb21tYW5kYXRpb25zXG4gICAzMjRcdCAgICAgICAgICAgIDwvc3Bhbj5cbiAgIDMyNVx0ICAgICAgICAgIDwvQWNjb3JkaW9uVHJpZ2dlcj5cbiAgIDMyNlx0ICAgICAgICAgIDxBY2NvcmRpb25Db250ZW50IGNsYXNzTmFtZT1cInB4LTYgc3BhY2UteS00XCI+XG4gICAzMjdcdCAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtc20gdGV4dC10ZWFsLTcwMC83MFwiPkFqb3V0ZXogZGVzIHJlY29tbWFuZGF0aW9ucyBwb3VyIHZvcyBpbnZpdMOpcyAocmVzdGF1cmFudHMsIGFjdGl2aXTDqXMsIGJhcnMsIGV0Yy4pPC9wPlxuICAgMzI4XHRcbiAgIDMyOVx0ICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktNFwiPlxuICAgMzMwXHQgICAgICAgICAge2ZpZWxkcy5tYXAoKGZpZWxkLCBpbmRleCkgPT4gKFxuICAgMzMxXHQgICAgICAgICAgICA8UmVjb21tZW5kYXRpb25cbiAgIDMzMlx0ICAgICAgICAgICAgICBrZXk9e2ZpZWxkLmlkfVxuICAgMzMzXHQgICAgICAgICAgICAgIGZpZWxkPXtmaWVsZH1cbiAgIDMzNFx0ICAgICAgICAgICAgICBpbmRleD17aW5kZXh9XG4gICAzMzVcdCAgICAgICAgICAgICAgcmVnaXN0ZXI9e3JlZ2lzdGVyfVxuICAgMzM2XHQgICAgICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxuICAgMzM3XHQgICAgICAgICAgICAgIHJlbW92ZT17cmVtb3ZlfVxuICAgMzM4XHQgICAgICAgICAgICAvPlxuICAgMzM5XHQgICAgICAgICAgKSl9XG4gICAzNDBcdFxuICAgMzQxXHQgICAgICAgICAgPG1vdGlvbi5idXR0b25cbiAgIDM0Mlx0ICAgICAgICAgICAgd2hpbGVIb3Zlcj17eyBzY2FsZTogMS4wMiB9fVxuICAgMzQzXHQgICAgICAgICAgICB3aGlsZVRhcD17eyBzY2FsZTogMC45OCB9fVxuICAgMzQ0XHQgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgIDM0NVx0ICAgICAgICAgICAgb25DbGljaz17KCkgPT4gYXBwZW5kKHsgbmFtZTogJycsIHR5cGU6ICcnIGFzIGFueSwgYWRkcmVzczogJycsIGRlc2NyaXB0aW9uOiAnJyB9KX1cbiAgIDM0Nlx0ICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgdy1mdWxsIHB5LTMgcHgtNCBib3JkZXIgYm9yZGVyLWRhc2hlZCByb3VuZGVkLW1kIGJnLWdyYWRpZW50LXRvLXIgZnJvbS10ZWFsLTQwMCB0by10ZWFsLTMwMCB0ZXh0LXdoaXRlIGhvdmVyOmZyb20tdGVhbC01MDAgaG92ZXI6dG8tdGVhbC00MDAgdHJhbnNpdGlvbi1hbGwgc2hhZG93LXNtIGN1cnNvci1wb2ludGVyXCJcbiAgIDM0N1x0ICAgICAgICAgID5cbiAgIDM0OFx0ICAgICAgICAgICAgPFBsdXNDaXJjbGUgc2l6ZT17MTh9IGNsYXNzTmFtZT1cIm1yLTJcIiAvPlxuICAgMzQ5XHQgICAgICAgICAgICBBam91dGVyIHVuZSByZWNvbW1hbmRhdGlvblxuICAgMzUwXHQgICAgICAgICAgPC9tb3Rpb24uYnV0dG9uPlxuICAgMzUxXHQgICAgICAgIDwvZGl2PlxuICAgMzUyXHQgICAgICAgICAgPC9BY2NvcmRpb25Db250ZW50PlxuICAgMzUzXHQgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDM1NFx0ICAgICAgPC9BY2NvcmRpb25JdGVtPlxuICAgMzU1XHQgICAgICA8L0FjY29yZGlvbj5cbiAgIDM1Nlx0XG4gICAzNTdcdCAgICAgIDxtb3Rpb24uZGl2XG4gICAzNThcdCAgICAgICAgdmFyaWFudHM9e2l0ZW1WYXJpYW50c31cbiAgIDM1OVx0ICAgICAgICBjbGFzc05hbWU9XCJmbGV4IGp1c3RpZnktZW5kIG10LThcIlxuICAgMzYwXHQgICAgICA+XG4gICAzNjFcdCAgICAgICAgPG1vdGlvbi5idXR0b25cbiAgIDM2Mlx0ICAgICAgICAgIHdoaWxlSG92ZXI9e3sgc2NhbGU6IDEuMDUgfX1cbiAgIDM2M1x0ICAgICAgICAgIHdoaWxlVGFwPXt7IHNjYWxlOiAwLjk1IH19XG4gICAzNjRcdCAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgIDM2NVx0ICAgICAgICAgIGRpc2FibGVkPXtpc1NhdmluZ31cbiAgIDM2Nlx0ICAgICAgICAgIGNsYXNzTmFtZT17YHB4LTYgcHktMyB0ZXh0LXdoaXRlIHJvdW5kZWQtbWQgdHJhbnNpdGlvbi1hbGwgc2hhZG93LW1kIGRpc2FibGVkOm9wYWNpdHktNTAgZm9udC1tZWRpdW0gZmxleCBpdGVtcy1jZW50ZXIgJHtpc01vZGlmaWVkID8gJ2JnLWdyYWRpZW50LXRvLXIgZnJvbS1bI2YwNGMyM10gdG8tcGluay01MDAgaG92ZXI6ZnJvbS1bI2YwNGMyM10gaG92ZXI6dG8tcGluay00MDAnIDogJ2JnLWdyYWRpZW50LXRvLXIgZnJvbS1ncmF5LTQwMCB0by1ncmF5LTUwMCBob3Zlcjpmcm9tLWdyYXktNTAwIGhvdmVyOnRvLWdyYXktNjAwJ31gfVxuICAgMzY3XHQgICAgICAgID5cbiAgIDM2OFx0ICAgICAgICAgIHshaXNNb2RpZmllZCAmJiA8QXJyb3dMZWZ0IHNpemU9ezE4fSBjbGFzc05hbWU9XCJtci0yXCIgLz59XG4gICAzNjlcdCAgICAgICAgICB7aXNTYXZpbmcgPyAnRW5yZWdpc3RyZW1lbnQgZW4gY291cnMuLi4nIDogaXNNb2RpZmllZCA/ICdFbnJlZ2lzdHJlciBsZXMgbW9kaWZpY2F0aW9ucycgOiAnUmV0b3VyIMOgIGxcXCdhY2N1ZWlsJ31cbiAgIDM3MFx0ICAgICAgICA8L21vdGlvbi5idXR0b24+XG4gICAzNzFcdCAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDM3Mlx0ICAgIDwvbW90aW9uLmZvcm0+XG4gICAzNzNcdCAgKTtcbiAgIDM3NFx0fVxuICAgMzc1XHRcblRvdGFsIGxpbmVzIGluIGZpbGU6IDM3NVxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiY2Q3OTk4MmYtNjUyOC00MzI5LTljZDItNWU2Njk4NWVjOGFiO3Rvb2x1XzAxQXVyOFA4Y0xZa1JoZUNxWkFxakFWMSI6eyJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIHNyYy9hcHAvb3duZXItZWRpdC1ib29rL3BhZ2UudHN4OlxuICAgMTEwXHQgICAgICAgICAgICAgICAgb25TdWJtaXQ9e2FzeW5jIChkYXRhKSA9PiB7XG4gICAxMTFcdCAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEb25uw6llcyBkdSBmb3JtdWxhaXJlIHNvdW1pc2VzOicsIGRhdGEpO1xuICAgMTEyXHRcbiAgIDExM1x0ICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgIDExNFx0ICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5pZCkge1xuICAgMTE1XHQgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJpc21hRGF0YSA9IHtcbiAgIDExNlx0ICAgICAgICAgICAgICAgICAgICAgICAgYXJyaXZhbFRpbWU6IGRhdGEuYXJyaXZhbFRpbWUsXG4gICAxMTdcdCAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc0luc3RydWN0aW9uczogZGF0YS5hY2Nlc3NJbnN0cnVjdGlvbnMsXG4gICAxMThcdCAgICAgICAgICAgICAgICAgICAgICAgIGFycml2YWxBZGRpdGlvbmFsSW5mbzogZGF0YS5hcnJpdmFsQWRkaXRpb25hbEluZm8sXG4gICAxMTlcdCAgICAgICAgICAgICAgICAgICAgICAgIGRlcGFydHVyZVRpbWU6IGRhdGEuZGVwYXJ0dXJlVGltZSxcbiAgIDEyMFx0ICAgICAgICAgICAgICAgICAgICAgICAgZXhpdEluc3RydWN0aW9uczogZGF0YS5leGl0SW5zdHJ1Y3Rpb25zLFxuICAgMTIxXHQgICAgICAgICAgICAgICAgICAgICAgICBkZXBhcnR1cmVBZGRpdGlvbmFsSW5mbzogZGF0YS5kZXBhcnR1cmVBZGRpdGlvbmFsSW5mbyxcbiAgIDEyMlx0ICAgICAgICAgICAgICAgICAgICAgICAgd2lmaU5hbWU6IGRhdGEud2lmaU5hbWUsXG4gICAxMjNcdCAgICAgICAgICAgICAgICAgICAgICAgIHdpZmlQYXNzd29yZDogZGF0YS53aWZpUGFzc3dvcmQsXG4gICAxMjRcdCAgICAgICAgICAgICAgICAgICAgICAgIGhvdXNlUnVsZXM6IGRhdGEuaG91c2VSdWxlcyxcbiAgIDEyNVx0ICAgICAgICAgICAgICAgICAgICAgICAgb3duZXJDb250YWN0OiBkYXRhLm93bmVyQ29udGFjdCxcbiAgIDEyNlx0ICAgICAgICAgICAgICAgICAgICAgICAgb3duZXJOYW1lOiBkYXRhLm93bmVyTmFtZSxcbiAgIDEyN1x0ICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbEluZm86IGRhdGEuZ2VuZXJhbEluZm8sXG4gICAxMjhcdCAgICAgICAgICAgICAgICAgICAgICAgIHJlY29tbWVuZGF0aW9uczoge1xuICAgMTI5XHQgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZU1hbnk6IHt9LFxuICAgMTMwXHQgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZTogZGF0YS5yZWNvbW1lbmRhdGlvbnMubWFwKHJlYyA9PiAoe1xuICAgMTMxXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcmVjLm5hbWUsXG4gICAxMzJcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiByZWMuYWRkcmVzcyB8fCAnJyxcbiAgIDEzM1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiByZWMuZGVzY3JpcHRpb24gfHwgJycsXG4gICAxMzRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiByZWMudHlwZVxuICAgMTM1XHQgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgMTM2XHQgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAxMzdcdCAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgMTM4XHRcbiAgIDEzOVx0ICAgICAgICAgICAgICAgICAgICAgIC8vIEVudm95ZXIgdW5lIHJlcXXDqnRlIFBVVCBwb3VyIG1ldHRyZSDDoCBqb3VyIGxlcyBkb25uw6llc1xuICAgMTQwXHQgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wdXQoYGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMS9hcGkvc3RheS8ke2RhdGEuaWR9YCwgcHJpc21hRGF0YSk7XG4gICAxNDFcdFxuICAgMTQyXHQgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAxNDNcdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEb25uw6llcyBtaXNlcyDDoCBqb3VyIGF2ZWMgc3VjY8OoczonLCByZXNwb25zZS5kYXRhKTtcbiAgIDE0NFx0XG4gICAxNDVcdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ldHRyZSDDoCBqb3VyIGxlIHN0YXRlIGJvb2tEYXRhIGF2ZWMgbGVzIGRvbm7DqWVzIHLDqWN1cMOpcsOpZXNcbiAgIDE0Nlx0ICAgICAgICAgICAgICAgICAgICAgICAgc2V0Qm9va0RhdGEocmVzcG9uc2UuZGF0YSk7XG4gICAxNDdcdFxuICAgMTQ4XHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBTYXV2ZWdhcmRlciBsZXMgZG9ubsOpZXMgbWlzZXMgw6Agam91ciBkYW5zIGxlIGxvY2FsU3RvcmFnZVxuICAgMTQ5XHQgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYm9va0RhdGEnLCBKU09OLnN0cmluZ2lmeShyZXNwb25zZS5kYXRhKSk7XG4gICAxNTBcdFxuICAgMTUxXHQgICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgnTW9kaWZpY2F0aW9ucyBlbnJlZ2lzdHLDqWVzIGF2ZWMgc3VjY8OocyEnKTtcbiAgIDE1Mlx0XG4gICAxNTNcdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvcmNlciB1biByZWNoYXJnZW1lbnQgZHUgY29tcG9zYW50IHBvdXIgcsOpaW5pdGlhbGlzZXIgbCfDqXRhdFxuICAgMTU0XHQgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAxNTVcdCAgICAgICAgICAgICAgICAgICAgICB9XG4gICAxNTZcdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgIDE1N1x0ICAgICAgICAgICAgICAgICAgICAgIC8vIFBhcyBkJ0lELCBkb25jIG9uIG1ldCBzaW1wbGVtZW50IMOgIGpvdXIgbGUgc3RhdGVcbiAgIDE1OFx0ICAgICAgICAgICAgICAgICAgICAgIHNldEJvb2tEYXRhKGRhdGEpO1xuICAgMTU5XHQgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Jvb2tEYXRhJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgMTYwXHQgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ01vZGlmaWNhdGlvbnMgZW5yZWdpc3Ryw6llcyBhdmVjIHN1Y2PDqHMhJyk7XG4gICAxNjFcdFxuICAgMTYyXHQgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yY2VyIHVuIHJlY2hhcmdlbWVudCBkdSBjb21wb3NhbnQgcG91ciByw6lpbml0aWFsaXNlciBsJ8OpdGF0XG4gICAxNjNcdCAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAxNjRcdCAgICAgICAgICAgICAgICAgICAgfVxuICAgMTY1XHQgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuVG90YWwgbGluZXMgaW4gZmlsZTogMTg3XG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19fSwiZHJhZnRFeGNoYW5nZSI6eyJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIn1dfSwic3RhdHVzIjoiZHJhZnQifSwicmVxdWVzdElkcyI6W10sImlzUGlubmVkIjpmYWxzZSwiaXNTaGFyZWFibGUiOnRydWUsImV4dHJhRGF0YSI6eyJpc0FnZW50Q29udmVyc2F0aW9uIjp0cnVlLCJoYXNEaXJ0eUVkaXRzIjp0cnVlfSwicGVyc29uYVR5cGUiOjB9fSwiYWdlbnRFeGVjdXRpb25Nb2RlIjoibWFudWFsIiwiaXNBZ2VudEVkaXRzQ29sbGFwc2VkIjpmYWxzZX0=" />
      </map>
    </option>
  </component>
</project>